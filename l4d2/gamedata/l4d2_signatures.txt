"Games"
{
	"left4dead2"
	{
		"Signatures"
		{
			/**
			 * AI_CriteriaSet::AppendCriteria(char const*, char const*, float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ModifyOrAppendCriteria" function.
			 * 2. This function should be called in several parts of the "CTerrorPlayer::ModifyOrAppendCriteria" function.
			 **/
			"AI_CriteriaSet::AppendCriteria"
			{
				"library"	"server"
				"linux"		"@_ZN14AI_CriteriaSet14AppendCriteriaEPKcS1_f"
				"mac"		"@_ZN14AI_CriteriaSet14AppendCriteriaEPKcS1_f"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x50\x8D\x2A\x2A\x51\xB9"
						/* ? ? ? ? ? ? 56 8B ? 50 8D ? ? 51 B9 */
			}

			/**
			 * BossZombiePlayerBot::ChooseVictim(CTerrorPlayer *, int, CBaseCombatCharacter *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: %s switching to directly visible victim\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"BossZombiePlayerBot::ChooseVictim"
			{
				"library"	"server"
				"linux"		"@_ZN19BossZombiePlayerBot12ChooseVictimEP13CTerrorPlayeriP20CBaseCombatCharacter"
				"mac"		"@_ZN19BossZombiePlayerBot12ChooseVictimEP13CTerrorPlayeriP20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x53\x8B\x2A\x8B"
						/* ? ? ? ? ? ? A1 ? ? ? ? 83 ? ? ? 53 8B ? 8B */
			}

			/**
			 * CreateGameRulesObject(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "InitGameRules: missing gamerules class '%s' on the server" or "InitGameRules: game rules entity (%s) not created" string.
			 * 2. The string can only be found in this function.
			 **/
			"CreateGameRulesObject"
			{
				"library"	"server"
				"linux"		"@_Z21CreateGameRulesObjectPKc"
				"mac"		"@_Z21CreateGameRulesObjectPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x53"
						/* ? ? ? ? ? ? ? ? ? 85 ? 74 ? 8B ? 8B ? ? 6A ? FF ? 53 */
			}

			/**
			 * CreateServerRagdoll(CBaseAnimating *, int, CTakeDamageInfo const&, int, bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CEntityDissolve::Create" function.
			 * 2. Look for a function call that passes five parameters, with the last parameters both being "1".
			 * 3. That function should be this function.
			 **/
			"CreateServerRagdoll"
			{
				"library"	"server"
				"linux"		"@_Z19CreateServerRagdollP14CBaseAnimatingiRK15CTakeDamageInfoib"
				"mac"		"@_Z19CreateServerRagdollP14CBaseAnimatingiRK15CTakeDamageInfoib"
				"windows"	"\x53\x8B\x2A\x83\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\xB8\x78"
						/* 53 8B ? 83 ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? B8 78 */
			}

			/**
			 * CAmmoDef::CanCarryInfiniteAmmo(int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "total_ammo_below_40" string.
			 * 2. The string can only be found in "CTerrorPlayer::RemoveAmmo".
			 * 3. The first function call in "CTerrorPlayer::RemoveAmmo" should be "CBaseCombatCharacter::RemoveAmmo".
			 * 4. The second and last function call in "CBaseCombatCharacter::RemoveAmmo" should be this function.
			 **/
			"CAmmoDef::CanCarryInfiniteAmmo"
			{
				"library"	"server"
				"linux"		"@_ZN8CAmmoDef20CanCarryInfiniteAmmoEi"
				"mac"		"@_ZN8CAmmoDef20CanCarryInfiniteAmmoEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x7C\x2A\x3B\x2A\x2A\x7D\x2A\x6B\x2A\x2A\x03\x2A\x8B\x2A\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x83"
						/* ? ? ? ? ? ? 83 ? ? 7C ? 3B ? ? 7D ? 6B ? ? 03 ? 8B ? ? 83 ? ? 75 ? 8B ? ? 85 ? 74 ? 8B ? ? 8B ? ? 83 */
			}

			/**
			 * CAmmoDef::MaxCarry(int, CBaseCombatCharacter const*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CAmmoDef::`vftable'" to jump to the "CAmmoDef" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CAmmoDef::MaxCarry"
			{
				"library"	"server"
				"linux"		"@_ZN8CAmmoDef8MaxCarryEiPK20CBaseCombatCharacter"
				"mac"		"@_ZN8CAmmoDef8MaxCarryEiPK20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x7C\x2A\x3B\x2A\x2A\x7D\x2A\x6B\x2A\x2A\x03\x2A\x8B\x2A\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x5D"
						/* ? ? ? ? ? ? 83 ? ? 7C ? 3B ? ? 7D ? 6B ? ? 03 ? 8B ? ? 83 ? ? 75 ? 8B ? ? 85 ? 74 ? 8B ? ? 8B ? ? 5D */
			}

			/**
			 * CBaseAbility::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseAbility::`vftable'" to jump to the "CBaseAbility" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseAbility::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseAbility15ActivateAbilityEv"
				"mac"		"@_ZN12CBaseAbility15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x80\x7E\x64\x00\x74\x2A\x80\x4E\x68\x01\xC6\x86\x48"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 80 7E 64 00 74 ? 80 4E 68 01 C6 86 48 */
			}

			/**
			 * CBaseAbility::CreateForPlayer(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings:
			 * - "ability_charge"
			 * - "ability_leap"
			 * - "ability_lunge"
			 * - "ability_selfdestruct"
			 * - "ability_spit"
			 * - "ability_throw"
			 * - "ability_tongue"
			 * - "ability_vomit"
			 * 2. One of the functions that references any of these strings actually references ALL of these strings.
			 **/
			"CBaseAbility::CreateForPlayer"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseAbility15CreateForPlayerEP13CTerrorPlayer"
				"mac"		"@_ZN12CBaseAbility15CreateForPlayerEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 56 8B ? ? 85 ? 0F 84 ? ? ? ? 8B ? E8 ? ? ? ? 83 */
			}

			/**
			 * CBaseAbility::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseAbility::`vftable'" to jump to the "CBaseAbility" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseAbility::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK12CBaseAbility20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK12CBaseAbility20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2F\x2A\x2A\x2A\x2A\x2A\x76\x2A\x8D\x8F\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x87\x2A\x2A\x2A\x2A\xD9\x2A\xDF\x2A\xDD\x2A\x0F\x82\x2A\x2A\x2A\x2A\x8B\x8F\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? ? ? ? ? ? ? 0F 2F ? ? ? ? ? 76 ? 8D 8F ? ? ? ? E8 ? ? ? ? D9 87 ? ? ? ? D9 ? DF ? DD ? 0F 82 ? ? ? ? 8B 8F ? ? ? ? 83 */
			}

			/**
			 * CBaseAbility::StartActivationTimer(float, float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CThrow::ActivateAbility" function.
			 * 2. The second to last function call should be this function.
			 * 3. This function should be called after the "> 0.0" check.
			 **/
			"CBaseAbility::StartActivationTimer"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseAbility20StartActivationTimerEff"
				"mac"		"@_ZN12CBaseAbility20StartActivationTimerEff"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\x56\x57\x8B"
						/* ? ? ? ? ? ? ? ? 0F 2E ? ? ? ? ? 9F 56 57 8B */
			}

			/**
			 * CBaseAnimating::GetAttachment(int, Vector &, QAngle &)
			 *
			 * How to find on Windows:
			 * 1. Search for the "smoker_mouth" or "medkit" string.
			 * 2. The function call below the string should be this function.
			 **/
			"CBaseAnimating::GetAttachment"
			{
				"library"	"server"
				"linux"		"@_ZN14CBaseAnimating13GetAttachmentEiR6VectorR6QAngle"
				"mac"		"@_ZN14CBaseAnimating13GetAttachmentEiR6VectorR6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x8B\x80\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? 8B 80 ? ? ? ? 53 */
			}

			/**
			 * CBaseAnimating::LookupAttachment(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "smoker_mouth" or "medkit" string.
			 * 2. The string is only passed to this function.
			 **/
			"CBaseAnimating::LookupAttachment"
			{
				"library"	"server"
				"linux"		"@_ZN14CBaseAnimating16LookupAttachmentEPKc"
				"mac"		"@_ZN14CBaseAnimating16LookupAttachmentEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x5E\x85\x2A\x74\x2A\x83\x2A\x2A\x75\x2A\x33\x2A\x5D\xC2\x2A\x2A\x8B\x2A\x2A\x51"
						/* ? ? ? ? ? ? 83 BE ? ? ? ? ? 75 ? E8 ? ? ? ? 85 ? 74 ? 8B ? E8 ? ? ? ? 8B 86 ? ? ? ? 5E 85 ? 74 ? 83 ? ? 75 ? 33 ? 5D C2 ? ? 8B ? ? 51 */
			}

			/**
			 * CBaseAnimating::SelectWeightedSequence(Activity)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseAnimating::`vftable'" to jump to the "CBaseAnimating" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseAnimating::SelectWeightedSequence"
			{
				"library"	"server"
				"linux"		"@_ZN14CBaseAnimating22SelectWeightedSequenceE8Activity"
				"mac"		"@_ZN14CBaseAnimating22SelectWeightedSequenceE8Activity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x57\x8B\xBE\x2A\x2A\x2A\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\xB6"
						/* ? ? ? ? ? ? 83 BE ? ? ? ? ? 57 8B BE ? ? ? ? 75 ? E8 ? ? ? ? 85 ? 74 ? 8B ? E8 ? ? ? ? 8B B6 */
			}

			/**
			 * CBaseBackpackItem::StartAction(CBaseBackpackItem::BackpackItemActionType, CBaseBackpackItem::BackpackItemActionTrigger)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseBackpackItem::`vftable'" to jump to the "CBaseBackpackItem" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseBackpackItem::StartAction"
			{
				"library"	"server"
				"linux"		"@_ZN17CBaseBackpackItem11StartActionENS_22BackpackItemActionTypeENS_25BackpackItemActionTriggerE"
				"mac"		"@_ZN17CBaseBackpackItem11StartActionENS_22BackpackItemActionTypeENS_25BackpackItemActionTriggerE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x32\x2A\x5E\x8B"
						/* ? ? ? ? ? ? 8B ? E8 ? ? ? ? 8B ? 85 ? 75 ? 5F 32 ? 5E 8B */
			}

			/**
			 * CBaseCombatWeapon::GetMaxClip1()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseCombatWeapon::`vftable'" to jump to the "CBaseCombatWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseCombatWeapon::GetMaxClip1"
			{
				"library"	"server"
				"linux"		"@_ZNK17CBaseCombatWeapon11GetMaxClip1Ev"
				"mac"		"@_ZNK17CBaseCombatWeapon11GetMaxClip1Ev"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x80\x60\x01"
						/* ? ? ? ? ? ? ? 50 E8 ? ? ? ? 8B 80 60 01 */
			}

			/**
			 * CBaseEntity::ApplyLocalAngularVelocityImpulse(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTankRock::OnRelease" function.
			 * 2. The sixth function call in "CTankRock::OnRelease" should be this function.
			 **/
			"CBaseEntity::ApplyLocalAngularVelocityImpulse"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity32ApplyLocalAngularVelocityImpulseERK6Vector"
				"mac"		"@_ZN11CBaseEntity32ApplyLocalAngularVelocityImpulseERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B"
						/* ? ? ? ? ? ? ? ? E8 ? ? ? ? F3 0F ? ? ? ? ? ? 57 8B */
			}

			/**
			 * CBaseEntity::Create(char const*, Vector const&, QAngle const&, CBaseEntity*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "tank_rock" string.
			 * 2. One of the functions that references that string is "CTankRock::Create".
			 * 3. The first function call inside "CTankRock::Create" should be this function.
			 **/
			"CBaseEntity::Create"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity6CreateEPKcRK6VectorRK6QAnglePS_"
				"mac"		"@_ZN11CBaseEntity6CreateEPKcRK6VectorRK6QAnglePS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x6A\x2A\x6A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x85\x2A\x75\x2A\x6A"
						/* ? ? ? ? ? ? 56 6A ? 6A ? 50 E8 ? ? ? ? 8B ? 83 ? ? 85 ? 75 ? 6A */
			}

			/**
			 * CBaseEntity::GetGroundEntity()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorGameMovement::CheckJumpButton" function.
			 * 2. This function is called in an if-statement by itself without any comparison checks.
			 **/
			"CBaseEntity::GetGroundEntity"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"mac"		"@_ZN11CBaseEntity15GetGroundEntityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x81\x2A\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xC3\x33\x2A\xC3\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xF6\x81"
						/* ? ? ? ? ? ? 83 ? ? 74 ? 8B ? ? ? ? ? 8B ? 81 ? ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? C3 33 ? C3 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? F6 81 */
			}

			/**
			 * CBaseEntity::GetUsePriority(CBaseEntity*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseEntity::`vftable'" to jump to the "CBaseEntity" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseEntity::GetUsePriority"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity14GetUsePriorityEPS_"
				"mac"		"@_ZN11CBaseEntity14GetUsePriorityEPS_"
				"windows"	"\xB8\x01\x2A\x2A\x2A\xC2\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B"
						/* B8 01 ? ? ? C2 ? ? ? ? ? ? ? ? ? ? 8B */
			}

			/**
			 * CBaseEntity::SetAbsAngles(QAngle const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented\n" string.
			 * 2. The string can only be found in "z_spawn_old".
			 * 3. Click on the first function call in "z_spawn_old" to go to "ZombieManager::SpawnWitch<Vector>".
			 * 4. The fourth function call in "ZombieManager::SpawnWitch<Vector>" should be this function.
			 **/
			"CBaseEntity::SetAbsAngles"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity12SetAbsAnglesERK6QAngle"
				"mac"		"@_ZN11CBaseEntity12SetAbsAnglesERK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x0F\x8B\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 8B ? E8 ? ? ? ? F3 ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? F3 ? ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? F3 ? ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 0F 8B ? ? ? ? 53 */
			}

			/**
			 * CBaseEntity::SetAbsOrigin(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented\n" string.
			 * 2. The string can only be found in "z_spawn_old".
			 * 3. Click on the first function call in "z_spawn_old" to go to "ZombieManager::SpawnWitch<Vector>".
			 * 4. The third function call in "ZombieManager::SpawnWitch<Vector>" should be this function.
			 **/
			"CBaseEntity::SetAbsOrigin"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity12SetAbsOriginERK6Vector"
				"mac"		"@_ZN11CBaseEntity12SetAbsOriginERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x0F\x8B\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 8B ? E8 ? ? ? ? F3 ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? F3 ? ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? F3 ? ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 0F 8B ? ? ? ? 6A */
			}

			/**
			 * CBaseEntity::SetAbsVelocity(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTankRock::OnRelease" function.
			 * 2. The third function call in "CTankRock::OnRelease" should be this function.
			 **/
			"CBaseEntity::SetAbsVelocity"
			{
				"library"	"server"
				"linux"		"@_ZN11CBaseEntity14SetAbsVelocityERK6Vector"
				"mac"		"@_ZN11CBaseEntity14SetAbsVelocityERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x2A\xF3\x2A\x2A\x2A\x57\x8B\x2A\x0F"
						/* ? ? ? ? ? ? 56 8B ? ? F3 ? ? ? 57 8B ? 0F */
			}

			/**
			 * CBasePlayer::GetDefaultFOV()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::SecondaryAttack" function.
			 * 2. The fourth and fifth function calls in "CTerrorPlayer::SecondaryAttack" should be this function.
			 **/
			"CBasePlayer::GetDefaultFOV"
			{
				"library"	"server"
				"linux"		"@_ZNK11CBasePlayer13GetDefaultFOVEv"
				"mac"		"@_ZNK11CBasePlayer13GetDefaultFOVEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\xC3"
						/* ? ? ? ? ? ? 85 ? 75 ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? C3 */
			}

			/**
			 * CBasePlayer::GetFOV()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::SecondaryAttack" function.
			 * 2. The third function call in "CTerrorPlayer::SecondaryAttack" should be this function.
			 **/
			"CBasePlayer::GetFOV"
			{
				"library"	"server"
				"linux"		"@_ZN11CBasePlayer6GetFOVEv"
				"mac"		"@_ZN11CBasePlayer6GetFOVEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\xFF\x2A\x8B\x2A\x85\x2A\x74\x2A\xE8"
						/* ? ? ? ? ? ? ? ? ? ? ? 57 FF ? 8B ? 85 ? 74 ? E8 */
			}

			/**
			 * CBasePlayer::SetFOV(CBaseEntity *, int, float, int)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::SecondaryAttack" function.
			 * 2. The sixth function call in "CTerrorPlayer::SecondaryAttack" should be this function.
			 **/
			"CBasePlayer::SetFOV"
			{
				"library"	"server"
				"linux"		"@_ZN11CBasePlayer6SetFOVEP11CBaseEntityifi"
				"mac"		"@_ZN11CBasePlayer6SetFOVEP11CBaseEntityifi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x85\x2A\x75\x2A\x5E\x32"
						/* ? ? ? ? ? ? ? 56 8B ? 85 ? 75 ? 5E 32 */
			}

			/**
			 * CBasePlayer::SetModel(char const*)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "body_pitch" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CBasePlayer::`vftable'" to jump to the "CBasePlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CBasePlayer::SetModel"
			{
				"library"	"server"
				"linux"		"@_ZN11CBasePlayer8SetModelEPKc"
				"mac"		"@_ZN11CBasePlayer8SetModelEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x50\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x3D"
						/* ? ? ? ? ? ? 56 57 50 8B ? E8 ? ? ? ? 8B 3D */
			}

			/**
			 * CBasePlayer::SetViewEntity(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDeathFallCamera::Enable" function.
			 * 2. The fifth function call in "CDeathFallCamera::Enable" should be this function.
			 **/
			"CBasePlayer::SetViewEntity"
			{
				"library"	"server"
				"linux"		"@_ZN11CBasePlayer13SetViewEntityEP11CBaseEntity"
				"mac"		"@_ZN11CBasePlayer13SetViewEntityEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x50\x8D\x8F"
						/* ? ? ? ? ? ? 56 57 8B ? 50 8D 8F */
			}

			/**
			 * CBasePlayer::WaterMove()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Player.DrownStart" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CBasePlayer::WaterMove"
			{
				"library"	"server"
				"linux"		"@_ZN11CBasePlayer9WaterMoveEv"
				"mac"		"@_ZN11CBasePlayer9WaterMoveEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x75\x2A\x8B\x86"
						/* ? ? ? ? ? ? 56 8B ? 80 BE ? ? ? ? ? 75 ? 8B 86 */
			}

			/**
			 * CBaseShotgun::Reload()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CBaseShotgun::`vftable'" to jump to the "CBaseShotgun" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CBaseShotgun::Reload"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseShotgun6ReloadEv"
				"mac"		"@_ZN12CBaseShotgun6ReloadEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\xA8"
						/* ? ? ? ? ? ? 56 57 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B 87 ? ? ? ? A8 */
			}

			/**
			 * CBaseTrigger::IsTouching(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerOutsideCheckpoint" string.
			 * 2. The string can only be found in "InfoChangelevel::OnCheckpointDoorClosed".
			 * 3. Click on the first function call in "InfoChangelevel::OnCheckpointDoorClosed".
			 * 4. Click on the last function call in that function.
			 * 5. This function should be the second function call in that function.
			 **/
			"CBaseTrigger::IsTouching"
			{
				"library"	"server"
				"linux"		"@_ZN12CBaseTrigger10IsTouchingEP11CBaseEntity"
				"mac"		"@_ZN12CBaseTrigger10IsTouchingEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x89\x2A\x2A\xEB\x2A\xC7\x45\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x51\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x33"
						/* ? ? ? ? ? ? 8B ? ? 85 ? 74 ? 8B ? 8B ? ? FF ? 8B ? 89 ? ? EB ? C7 45 ? ? ? ? ? 8D ? ? 51 8D 8E ? ? ? ? E8 ? ? ? ? 33 */
			}

			/**
			 * CBreakableProp::Break(CBaseEntity *, CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "ExplosionType"
			 * - "PropExplosion"
			 * - "Explosion prop detonated %.0f,%.0f,%.0f.  Breaker:%s. Attacker:%s.\n"
			 * - "Fire prop detonated %.0f,%.0f,%.0f.  Breaker:%s. Attacker:%s.\n"
			 **/
			"CBreakableProp::Break"
			{
				"library"	"server"
				"linux"		"@_ZN14CBreakableProp5BreakEP11CBaseEntityRK15CTakeDamageInfo"
				"mac"		"@_ZN14CBreakableProp5BreakEP11CBaseEntityRK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\xD8\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x89"
						/* ? ? ? ? ? ? ? ? ? A1 D8 ? ? ? 33 ? 89 ? ? 8B ? ? 53 8B ? ? 56 8B ? 8B ? 8B ? ? 89 */
			}

			/**
			 * CCarProp::InputSurvivorStandingOnCar(inputdata_t &)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "PanicType"
			 * - "CarAlarm"
			 * - "PanicEvent"
			 * - "triggered_car_alarm"
			 **/
			"CCarProp::InputSurvivorStandingOnCar"
			{
				"library"	"server"
				"linux"		"@_ZN8CCarProp26InputSurvivorStandingOnCarER11inputdata_t"
				"mac"		"@_ZN8CCarProp26InputSurvivorStandingOnCarER11inputdata_t"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x80"
						/* ? ? ? ? ? ? 56 8B ? 80 BE ? ? ? ? ? 0F 85 ? ? ? ? 80 BE ? ? ? ? ? 0F 85 ? ? ? ? 80 */
			}

			/**
			 * CCharge::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CCharge::`vftable'" to jump to the "CCharge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CCharge::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN7CCharge15ActivateAbilityEv"
				"mac"		"@_ZN7CCharge15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\x53\x83"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 84 ? 0F 84 ? ? ? ? 8B 87 ? ? ? ? 53 83 */
			}

			/**
			 * CCharge::HandleCustomCollision(CBaseEntity *, Vector const&, Vector const&, CGameTrace *, CMoveData *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CCharge::`vftable'" to jump to the "CCharge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CCharge::HandleCustomCollision"
			{
				"library"	"server"
				"linux"		"@_ZN7CCharge21HandleCustomCollisionEP11CBaseEntityRK6VectorS4_P10CGameTraceP9CMoveData"
				"mac"		"@_ZN7CCharge21HandleCustomCollisionEP11CBaseEntityRK6VectorS4_P10CGameTraceP9CMoveData"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x89\x2A\x2A\x8B\x83\x2A\x2A\x2A\x2A\x56\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 53 8B ? 89 ? ? 8B 83 ? ? ? ? 56 8B */
			}

			/**
			 * CCharge::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CCharge::`vftable'" to jump to the "CCharge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CCharge::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK7CCharge20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK7CCharge20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75"
						/* ? ? ? ? ? ? ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 75 */
			}

			/**
			 * CCharge::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CCharge::`vftable'" to jump to the "CCharge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CCharge::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN7CCharge13UpdateAbilityEv"
				"mac"		"@_ZN7CCharge13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x57\x75\x2A\xE8"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? 56 8B ? 80 BE ? ? ? ? ? 57 75 ? E8 */
			}

			/**
			 * CClaw::OnPlayerHit(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CClaw::`vftable'" to jump to the "CClaw" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CClaw::OnPlayerHit"
			{
				"library"	"server"
				"linux"		"@_ZN5CClaw11OnPlayerHitEP13CTerrorPlayer"
				"mac"		"@_ZN5CClaw11OnPlayerHitEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x83"
						/* ? ? ? ? ? ? ? ? ? ? 8B ? 8B ? E8 ? ? ? ? 83 ? ? 75 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 83 */
			}

			/**
			 * CCSPlayer::EmitPrivateSound(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnRevived" function.
			 * 2. This function is called inside that function with the string "Player.Heartbeat" passed to it.
			 * 3. The first function call that references that string should be this function.
			 **/
			"CCSPlayer::EmitPrivateSound"
			{
				"library"	"server"
				"linux"		"@_ZN9CCSPlayer16EmitPrivateSoundEPKc"
				"mac"		"@_ZN9CCSPlayer16EmitPrivateSoundEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? F3 0F ? ? ? ? ? ? 53 56 */
			}

			/**
			 * CCSPlayer::State_Transition(CSPlayerState)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::PlayerZombieAbortControl" function.
			 * 2. The last function call in "CTerrorPlayer::PlayerZombieAbortControl" should be this function.
			 **/
			"CCSPlayer::State_Transition"
			{
				"library"	"server"
				"linux"		"@_ZN9CCSPlayer16State_TransitionE13CSPlayerState"
				"mac"		"@_ZN9CCSPlayer16State_TransitionE13CSPlayerState"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x57\x8B\x2A\x2A\x85\x2A\x74\x2A\x83"
						/* ? ? ? ? ? ? 8B 86 ? ? ? ? 57 8B ? ? 85 ? 74 ? 83 */
			}

			/**
			 * CDeathFallCamera::Enable(CBasePlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SurvivorStandingOnCar" string.
			 * 2. The string can only be found in "CTerrorPlayer::OnGroundChanged".
			 * 3. Look for the "point_deathfall_camera" string in "CTerrorPlayer::OnGroundChanged".
			 * 4. The first function call after that string's second reference should be "CBasePlayer::ClearZoomOwner".
			 * 5. One of the functions that calls "CBasePlayer::ClearZoomOwner" should be this function.
			 **/
			"CDeathFallCamera::Enable"
			{
				"library"	"server"
				"linux"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"mac"		"@_ZN16CDeathFallCamera6EnableEP11CBasePlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x2A\x89\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85"
						/* ? ? ? ? ? ? ? ? 57 8B ? 8B ? 89 ? ? E8 ? ? ? ? 85 */
			}

			/**
			 * CDirector::AllowWitchesInCheckpoints()
			 *
			 * How to find on Windows:
			 * 1. Locate the "WitchLocomotion::IsAreaTraversable" function.
			 * 2. The second function call should be this function.
			 **/
			"CDirector::AllowWitchesInCheckpoints"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector25AllowWitchesInCheckpointsEv"
				"mac"		"@_ZNK9CDirector25AllowWitchesInCheckpointsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x8B\x8E"
						/* ? ? ? ? ? ? ? ? 84 ? 75 ? E8 ? ? ? ? 84 ? 75 ? 8B 8E */
			}

			/**
			 * CDirector::AreTeamsFlipped()
			 *
			 * How to find on Windows:
			 * 1. Search for the "mutation15" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::AreTeamsFlipped"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector15AreTeamsFlippedEv"
				"mac"		"@_ZNK9CDirector15AreTeamsFlippedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\xF7\x05"
						/* ? ? ? ? ? ? ? ? 84 ? 75 ? F7 05 */
			}

			/**
			 * CDirector::AreWanderersAllowed()
			 *
			 * How to find on Windows:
			 * 1. Search for the "AlwaysAllowWanderers" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::AreWanderersAllowed"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector19AreWanderersAllowedEv"
				"mac"		"@_ZNK9CDirector19AreWanderersAllowedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x8A\x2A\x2A\x5E\x8B\x2A\x5D\xC3\x8B\x0D"
						/* ? ? ? ? ? ? 56 8B ? 8B 8E ? ? ? ? 8D ? ? 50 E8 ? ? ? ? 84 ? 74 ? 8A ? ? 5E 8B ? 5D C3 8B 0D */
			}

			/**
			 * CDirector::ClearScavengeScores(bool)
			 *
			 * Note: (Windows) This function is in-lined with the "CTerrorGameRules::ClearScavengeScores" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "RefreshInitialSpawnPositions" string.
			 * 2. The string can only be found in "CDirector::OnRestartMap".
			 * 3. The second to last function call in "CDirector::OnRestartMap" should be this function.
			 **/
			"CDirector::ClearScavengeScores"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector19ClearScavengeScoresEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x33\x2A\x8B\x2A\x33\x2A\x8D\x2A\x2A\x39"
						/* ? ? ? ? ? ? 57 33 ? 8B ? 33 ? 8D ? ? 39 */
			}

			/**
			 * CDirector::ClearTeamScores(bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirector::OnChangeMissionVote" function.
			 * 2. The third to last function call in "CDirector::OnChangeMissionVote" with the value "1" passed to it should be this function.
			 **/
			"CDirector::ClearTeamScores"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector15ClearTeamScoresEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x56"
						/* ? ? ? ? ? ? ? 57 8B ? 8B 0D ? ? ? ? 85 ? 74 ? 56 */
			}

			/**
			 * CDirector::CreateRescuableSurvivors()
			 *
			 * How to find on Windows:
			 * 1. Search for the "rescue spot %d(%s) stops calling for help with nearest survivor at least %.1f path units away\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::CreateRescuableSurvivors"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector24CreateRescuableSurvivorsEv"
				"mac"		"@_ZN9CDirector24CreateRescuableSurvivorsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x57\x8B\x2A\x89\x2A\x2A\x0F\x85"
						/* ? ? ? ? ? ? A1 ? ? ? ? 83 ? ? ? 57 8B ? 89 ? ? 0F 85 */
			}

			/**
			 * CDirector::ForceNextStage()
			 *
			 * How to find on Windows:
			 * 1. Search for the "ForceNextStage" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::ForceNextStage"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14ForceNextStageEv"
				"mac"		"@_ZN9CDirector14ForceNextStageEv"
				"windows"	"\x8B\x2A\x88\x05\x00\x00\xE9\x2A\x9A\x01\x00"
						/* 8B ? 88 05 00 00 E9 ? 9A 01 00 */
			}

			/**
			 * CDirector::FullRestart()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Low Violence client connected\n" or "Low Violence client(s) disconnected\n" string.
			 * 2. The string can only be found in "CDirectorSessionManager::UpdateSession".
			 * 3. The third function call in "CDirectorSessionManager::UpdateSession" should be "CDirectorSessionManager::UpdateDisconnectedPlayers".
			 * 4. The second to last function call in "CDirectorSessionManager::UpdateDisconnectedPlayers" should be this function.
			 **/
			"CDirector::FullRestart"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector11FullRestartEv"
				"mac"		"@_ZN9CDirector11FullRestartEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x86"
						/* ? ? ? ? ? ? ? ? ? ? ? ? ? E8 ? ? ? ? E8 ? ? ? ? 8B ? E8 ? ? ? ? 8B 86 */
			}

			/**
			 * CDirector::GetFurthestSurvivorFlow()
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetFurthestSurvivorFlow" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::GetFurthestSurvivorFlow"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector23GetFurthestSurvivorFlowEv"
				"mac"		"@_ZNK9CDirector23GetFurthestSurvivorFlowEv"
				"windows"	"\xD9\x81\x8C\x01\x00\x00\xC3"
						/* D9 81 8C 01 00 00 C3 */
			}

			/**
			 * CDirector::GetGameModeBase()
			 *
			 * How to find on Windows:
			 * 1. Search for the "NumberOfTeamDead" string.
			 * 2. The string can only be found in "ModifyOrAppendGlobalCriteria".
			 * 3. The first function call below the string should be this function.
			 **/
			"CDirector::GetGameModeBase"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector15GetGameModeBaseEv"
				"mac"		"@_ZN9CDirector15GetGameModeBaseEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x74\x2A\xBE\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xBE\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? ? 56 74 ? BE ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? BE ? ? ? ? 8B */
			}

			/**
			 * CDirector::GetScriptValue(char const*, char const*, char *, int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "No conversion from %s to int now\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::GetScriptValue<int>"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14GetScriptValueEPKcS1_Pci"
				"mac"		"@_ZN9CDirector14GetScriptValueEPKcS1_Pci"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x83\x2A\x2A\x77\x2A\x0F"
						/* ? ? ? ? ? ? ? 0F ? ? 83 ? ? 77 ? 0F */
			}

			/**
			 * CDirector::GetScriptValue(char const*, float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "BuildUpMinInterval" string.
			 * 2. The string can only be found in "CDirector::UpdateTempo".
			 * 3. The only function call in "CDirector::UpdateTempo" should be this function.
			 **/
			"CDirector::GetScriptValue<float>"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14GetScriptValueEPKcf"
				"mac"		"@_ZN9CDirector14GetScriptValueEPKcf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x56\x33\x2A\x8D\x2A\x2A\x56\x8B\x2A\x2A\x66\x2A\x2A\x2A\x66\x2A\x2A\x2A\x89\x2A\x2A\x8B\x2A\x56\x50\x8B\x82\x2A\x2A\x2A\x2A\xFF\x2A\x5E\x84\x2A\x74\x2A\x8D\x2A\x2A\x51\x8D\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x92\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x50\xFF\x2A\xD9"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 83 ? ? 74 ? 8B 0D ? ? ? ? 85 ? 74 ? 56 33 ? 8D ? ? 56 8B ? ? 66 ? ? ? 66 ? ? ? 89 ? ? 8B ? 56 50 8B 82 ? ? ? ? FF ? 5E 84 ? 74 ? 8D ? ? 51 8D ? ? E8 ? ? ? ? 84 ? 75 ? 8B 0D ? ? ? ? 8B ? 8B 92 ? ? ? ? 8D ? ? 50 FF ? D9 */
			}

			/**
			 * CDirector::GetScriptValue(char const*, int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%c_CustomFinaleValue%1d" string.
			 * 2. The first function call below the string should be this function.
			 **/
			"CDirector::GetScriptValue<string>"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14GetScriptValueEPKci"
				"mac"		"@_ZN9CDirector14GetScriptValueEPKci"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x8B\x2A\x2A\x83\x2A\x2A\x74"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 56 8B ? ? 83 ? ? 74 */
			}

			/**
			 * CDirector::HasAnySurvivorLeftSafeArea()
			 *
			 * How to find on Windows:
			 * 1. Search for the "I've walked out of the checkpoint" string.
			 * 2. The first function call below the string should be this function.
			 **/
			"CDirector::HasAnySurvivorLeftSafeArea"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector26HasAnySurvivorLeftSafeAreaEv"
				"mac"		"@_ZN9CDirector26HasAnySurvivorLeftSafeAreaEv"
				"windows"	"\x8A\x2A\xA0\x00\x00\x00\xC3"
						/* 8A ? A0 00 00 00 C3 */
			}

			/**
			 * CDirector::HideScoreboard()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PZEndGamePanelMsg" string.
			 * 2. This function should be six function calls above the string.
			 **/
			"CDirector::HideScoreboard"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14HideScoreboardEv"
				"mac"		"@_ZN9CDirector14HideScoreboardEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x5E\xE9\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? E8 ? ? ? ? 8B 8E ? ? ? ? E8 ? ? ? ? 8B 8E ? ? ? ? 5E E9 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 56 */
			}

			/**
			 * CDirector::IsAnySurvivorInExitCheckpoint()
			 *
			 * How to find on Windows:
			 * 1. Search for the "IsAnySurvivorInExitCheckpoint" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::IsAnySurvivorInExitCheckpoint"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector29IsAnySurvivorInExitCheckpointEv"
				"mac"		"@_ZNK9CDirector29IsAnySurvivorInExitCheckpointEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x50\x66\xC7\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8A"
						/* ? ? ? ? ? ? ? 50 66 C7 ? ? ? ? E8 ? ? ? ? 8A */
			}

			/**
			 * CDirector::IsAnySurvivorInStartArea()
			 *
			 * How to find on Windows:
			 * 1. Search for the "IsAnySurvivorInStartArea" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::IsAnySurvivorInStartArea"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector24IsAnySurvivorInStartAreaEv"
				"mac"		"@_ZNK9CDirector24IsAnySurvivorInStartAreaEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x50\xF3\x2A\x2A\x2A\x2A\xC7\x45\x2A\x2A\x2A\x2A\x2A\xC7"
						/* ? ? ? ? ? ? F3 0F ? ? ? ? ? ? 8D ? ? 50 F3 ? ? ? ? C7 45 ? ? ? ? ? C7 */
			}

			/**
			 * CDirector::IsFinale()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Throwing rock" string.
			 * 2. The string can only be found in "TankAttack::TryToThrowRock".
			 * 3. The first function call in "TankAttack::TryToThrowRock" should be this function.
			 **/
			"CDirector::IsFinale"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector8IsFinaleEv"
				"mac"		"@_ZNK9CDirector8IsFinaleEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x33\xC9\x83\x38"
						/* ? ? ? ? ? ? 33 C9 83 38 */
			}

			/**
			 * CDirector::IsFinaleEscapeInProgress()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::PreThink" function.
			 * 2. This function should be six function calls above the "#L4D_idle_spectator" string.
			 **/
			"CDirector::IsFinaleEscapeInProgress"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector24IsFinaleEscapeInProgressEv"
				"mac"		"@_ZNK9CDirector24IsFinaleEscapeInProgressEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x38\x05\x75\x2A\x32\xC0\xC3\x33\xC0\x83\xB9\xA4\x00\x00\x00\x02"
						/* ? ? ? ? ? ? 83 38 05 75 ? 32 C0 C3 33 C0 83 B9 A4 00 00 00 02 */
			}

			/**
			 * CDirector::IsFirstMapInScenario()
			 *
			 * How to find on Windows:
			 * 1. Search for the "IsFirstMapInScenario" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::IsFirstMapInScenario"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector20IsFirstMapInScenarioEv"
				"mac"		"@_ZNK9CDirector20IsFirstMapInScenarioEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x85\x2A\x75\x2A\xBE\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? ? ? 56 8B ? 85 ? 75 ? BE ? ? ? ? 6A */
			}

			/**
			 * CDirector::IsInTransition()
			 *
			 * How to find on Windows:
			 * 1. Locate the "ZombieManager::CanZombieSpawnHere" function.
			 * 2. The first function call in "ZombieManager::CanZombieSpawnHere" should be this function.
			 **/
			"CDirector::IsInTransition"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector14IsInTransitionEv"
				"mac"		"@_ZNK9CDirector14IsInTransitionEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x75\x2A\x80\xB9\xCC"
						/* ? ? ? ? ? ? ? 75 ? 80 B9 CC */
			}

			/**
			 * CDirector::IsTankInPlay()
			 *
			 * How to find on Windows:
			 * 1. Search for the "IsTankInPlay" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::IsTankInPlay"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector12IsTankInPlayEv"
				"mac"		"@_ZNK9CDirector12IsTankInPlayEv"
				"windows"	"\x33\xC0\x39\x81\x00"
						/* 33 C0 39 81 00 */
			}

			/**
			 * CDirector::IsTeamFull(int, CDirector::PlayerCountType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Human player %s auto-selecting team\n" string.
			 * 2. The string can only be found in "CTerrorPlayer::AutoSelectTeam".
			 * 3. The first function call below the string should be this function.
			 **/
			"CDirector::IsTeamFull"
			{
				"library"	"server"
				"linux"		"@_ZNK9CDirector10IsTeamFullEiNS_15PlayerCountTypeE"
				"mac"		"@_ZNK9CDirector10IsTeamFullEiNS_15PlayerCountTypeE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x50\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 53 56 57 8B ? ? 50 57 8B ? E8 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CDirector::OnChangeChapterVote(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "change chapter now vote - changing to %s\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::OnChangeChapterVote"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector19OnChangeChapterVoteEPKc"
				"mac"		"@_ZN9CDirector19OnChangeChapterVoteEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x57\x8B\x2A\x2A\x57\xFF\x2A\x85\x2A\x0F\x84"
						/* ? ? ? ? ? ? 8B 0D ? ? ? ? 8B ? 8B ? ? 57 8B ? ? 57 FF ? 85 ? 0F 84 */
			}

			/**
			 * CDirector::OnChangeMissionVote(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "change mission now vote - changing to %s (%s)\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::OnChangeMissionVote"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector19OnChangeMissionVoteEPKc"
				"mac"		"@_ZN9CDirector19OnChangeMissionVoteEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x0F"
						/* ? ? ? ? ? ? ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? 8B ? 8B ? 8B ? ? 6A ? FF ? 8B ? 85 ? 0F */
			}

			/**
			 * CDirector::OnFirstSurvivorLeftSafeArea(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Allowing spawning - %s left safe area\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::OnFirstSurvivorLeftSafeArea"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector27OnFirstSurvivorLeftSafeAreaEP13CTerrorPlayer"
				"mac"		"@_ZN9CDirector27OnFirstSurvivorLeftSafeAreaEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\x57\x8B\x2A\x8B\x8F\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? 53 8B ? ? 57 8B ? 8B 8F ? ? ? ? 53 */
			}

			/**
			 * CDirector::OnMobRushStart()
			 *
			 * How to find on Windows:
			 * 1. Search for the "MobMinSize" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::OnMobRushStart"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector14OnMobRushStartEv"
				"mac"		"@_ZN9CDirector14OnMobRushStartEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x56\x57\x51"
						/* ? ? ? ? ? ? A1 ? ? ? ? D9 ? ? 56 57 51 */
			}

			/**
			 * CDirector::OnServerShutdown()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "ServerConfig.vdf" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CDirector::`vftable'" to jump to the "CDirector" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CDirector::OnServerShutdown"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector16OnServerShutdownEv"
				"mac"		"@_ZN9CDirector16OnServerShutdownEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x57"
						/* ? ? ? ? ? ? 8B ? 8B 8E ? ? ? ? 8B ? 8B ? 57 */
			}

			/**
			 * CDirector::RegisterForbiddenTarget(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "trigger_finale at %.0f %.0f %0.f missing modelname\n" string.
			 * 2. The string can only be found in "CFinaleTrigger::Spawn".
			 * 3. Click on the first function call in "CFinaleTrigger::Spawn" to go to "CBreakableProp::Spawn".
			 * 4. The last function call in "CBreakableProp::Spawn" should be this function.
			 **/
			"CDirector::RegisterForbiddenTarget"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector23RegisterForbiddenTargetEP11CBaseEntity"
				"mac"		"@_ZN9CDirector23RegisterForbiddenTargetEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x83\x2A\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x89\x2A\x2A\xEB\x2A\x89\x2A\x2A\x8D\x2A\x2A\x51\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85"
						/* ? ? ? ? ? ? 8B ? ? 83 ? ? 8B ? 85 ? 74 ? 8B ? 8B ? ? 8B ? FF ? 8B ? 89 ? ? EB ? 89 ? ? 8D ? ? 51 8D 8E ? ? ? ? E8 ? ? ? ? 85 */
			}

			/**
			 * CDirector::ResetMobTimer()
			 *
			 * How to find on Windows:
			 * 1. Search for the "ResetMobTimer" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CDirector::ResetMobTimer"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector13ResetMobTimerEv"
				"mac"		"@_ZN9CDirector13ResetMobTimerEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8D\xB9\xD4"
						/* ? ? ? ? ? ? 8D B9 D4 */
			}

			/**
			 * CDirector::Restart()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Reloading original map %s\n" or "Staying on original map %s\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::Restart"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector7RestartEv"
				"mac"		"@_ZN9CDirector7RestartEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\xD8\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x90\x2A\x2A\x2A\x8B\x2A\x2A\x53\x56\x57\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 D8 ? ? ? 33 ? 89 ? ? A1 90 ? ? ? 8B ? ? 53 56 57 8B */
			}

			/**
			 * CDirector::RestartScenarioFromVote(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "RestartScenarioFromVote - changing to map %s\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirector::RestartScenarioFromVote"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector23RestartScenarioFromVoteEPKc"
				"mac"		"@_ZN9CDirector23RestartScenarioFromVoteEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x57\x85\x2A\x74\x2A\x6A"
						/* ? ? ? ? ? ? 8B 0D ? ? ? ? 57 85 ? 74 ? 6A */
			}

			/**
			 * CDirector::StartRematchVote()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PZEndGame" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CDirector::StartRematchVote"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector16StartRematchVoteEv"
				"mac"		"@_ZN9CDirector16StartRematchVoteEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x68\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? 56 8B ? 68 ? ? ? ? 6A */
			}

			/**
			 * CDirector::SwapTeams()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "Switching Survivor Bot '%s' from team %d to SPECTATOR\n"
			 * - "Switching Survivor '%s' from team %d to ZOMBIE\n"
			 * - "   -> Player is now on team %d\n"
			 * - "Switching Zombie '%s' from team %d to SURVIVOR\n"
			 * - "Switching Zombie '%s' from team %d to SURVIVOR %s\n"
			 * - "Adding a survivor bot to fill out Survivor team\n"
			 **/
			"CDirector::SwapTeams"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector9SwapTeamsEv"
				"mac"		"@_ZN9CDirector9SwapTeamsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x57\x89"
						/* ? ? ? ? ? ? ? ? ? 53 56 8B ? 8B 8E ? ? ? ? 57 89 */
			}

			/**
			 * CDirector::TryOfferingTankBot(CBaseEntity *, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "Tank offer: Starting the lottery\n"
			 * - "Tank offer: Going to the only PZ\n"
			 * - "Tank offer: making a bot, and giving him to nobody\n"
			 **/
			"CDirector::TryOfferingTankBot"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector18TryOfferingTankBotEP11CBaseEntityb"
				"mac"		"@_ZN9CDirector18TryOfferingTankBotEP11CBaseEntityb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x89\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\xF3"
						/* ? ? ? ? ? ? ? ? 56 8B ? 89 ? ? 0F 84 ? ? ? ? F3 */
			}

			/**
			 * CDirector::UnregisterForbiddenTarget(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CCarProp::InputSurvivorStandingOnCar" function.
			 * 2. The sixth function call in "CCarProp::InputSurvivorStandingOnCar" should be this function.
			 **/
			"CDirector::UnregisterForbiddenTarget"
			{
				"library"	"server"
				"linux"		"@_ZN9CDirector25UnregisterForbiddenTargetEP11CBaseEntity"
				"mac"		"@_ZN9CDirector25UnregisterForbiddenTargetEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x89\x2A\x2A\xEB\x2A\xC7\x45\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x51\x8D\x8E"
						/* ? ? ? ? ? ? ? ? 8B ? 85 ? 74 ? 8B ? 8B ? ? 8B ? FF ? 8B ? 89 ? ? EB ? C7 45 ? ? ? ? ? 8D ? ? 51 8D 8E */
			}

			/**
			 * CDirectorVersusMode::UpdateVersusBossSpawning()
			 *
			 * How to find on Windows:
			 * 1. Search for the " Highest survivor flow distance = %f  Tank at = %f witch at %f\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorVersusMode::UpdateVersusBossSpawning"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode24UpdateVersusBossSpawningEv"
				"mac"		"@_ZN19CDirectorVersusMode24UpdateVersusBossSpawningEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x89\x2A\x2A\xE8"
						/* ? ? ? ? ? ? 57 8B ? 8B 0D ? ? ? ? 89 ? ? E8 */
			}

			/**
			 * CDirectorChallengeMode::FindRescueAreaTrigger()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Found rescue trigger \"%s\"\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorChallengeMode::FindRescueAreaTrigger"
			{
				"library"	"server"
				"linux"		"@_ZN22CDirectorChallengeMode21FindRescueAreaTriggerEv"
				"mac"		"@_ZN22CDirectorChallengeMode21FindRescueAreaTriggerEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x53\x57\x8B\xB8"
						/* ? ? ? ? ? ? ? ? 83 ? ? 53 57 8B B8 */
			}

			/**
			 * CDirectorChallengeMode::ShouldPlayBossMusic(bool *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ShouldPlayBossMusic" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorChallengeMode::ShouldPlayBossMusic"
			{
				"library"	"server"
				"linux"		"@_ZNK22CDirectorChallengeMode19ShouldPlayBossMusicEPb"
				"mac"		"@_ZNK22CDirectorChallengeMode19ShouldPlayBossMusicEPb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x80\x2A\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x0D"
						/* ? ? ? ? ? ? 80 ? ? ? 74 ? 8B 15 ? ? ? ? 8B 0D */
			}

			/**
			 * CDirectorItemManager::IsMeleeWeaponAllowedToExist(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "no_cs_weapons" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CDirectorItemManager::IsMeleeWeaponAllowedToExist"
			{
				"library"	"server"
				"linux"		"@_ZN20CDirectorItemManager27IsMeleeWeaponAllowedToExistEPKc"
				"mac"		"@_ZN20CDirectorItemManager27IsMeleeWeaponAllowedToExistEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x75\x2A\x8B\x2A\x2A\x6A"
						/* ? ? ? ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 75 ? 8B ? ? 6A */
			}

			/**
			 * CDirectorMusicBanks::OnRoundStart()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "Event.Reveal" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CDirectorMusicBanks::`vftable'" to jump to the "CDirectorMusicBanks" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 ***/
			"CDirectorMusicBanks::OnRoundStart"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorMusicBanks12OnRoundStartEv"
				"mac"		"@_ZN19CDirectorMusicBanks12OnRoundStartEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F"
						/* ? ? ? ? ? ? 56 57 8B ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 0F */
			}

			/**
			 * CDirectorScavengeMode::EndScavengeRound()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "scavenge_round_halftime"
			 * - "scavenge_round_finished"
			 * - "scavenge_match_finished"
			 **/
			"CDirectorScavengeMode::EndScavengeRound"
			{
				"library"	"server"
				"linux"		"@_ZN21CDirectorScavengeMode16EndScavengeRoundEv"
				"mac"		"@_ZN21CDirectorScavengeMode16EndScavengeRoundEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x80\x2A\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x53\xC6"
						/* ? ? ? ? ? ? 56 8B ? 80 ? ? ? 0F 84 ? ? ? ? 53 C6 */
			}

			/**
			 * CDirectorScavengeMode::HideScoreboardNonVirtual()
			 *
			 * How to find on Windows:
			 * 1. Search for the "fullscreen_scavenge_scoreboard" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CDirectorScavengeMode::HideScoreboardNonVirtual"
			{
				"library"	"server"
				"linux"		"@_ZN21CDirectorScavengeMode24HideScoreboardNonVirtualEv"
				"mac"		"@_ZN21CDirectorScavengeMode24HideScoreboardNonVirtualEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x33\x2A\x88"
						/* ? ? ? ? ? ? E8 ? ? ? ? 84 ? 74 ? 33 ? 88 */
			}

			/**
			 * CDirectorScavengeMode::OnBeginRoundSetupTime()
			 *
			 * How to find on Windows:
			 * 1. Search for the "ready_countdown" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CDirectorScavengeMode::OnBeginRoundSetupTime"
			{
				"library"	"server"
				"linux"		"@_ZN21CDirectorScavengeMode21OnBeginRoundSetupTimeEv"
				"mac"		"@_ZN21CDirectorScavengeMode21OnBeginRoundSetupTimeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\xF3\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 56 8B ? E8 ? ? ? ? 84 ? 74 ? F3 ? ? ? ? 83 */
			}

			/**
			 * CDirectorScriptedEventManager::ChangeFinaleStage(CDirectorScriptedEventManager::ScriptedEventStage, char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "ChangeFinaleStage: %d\n"
			 * - "CHANGEFINALESTAGEOVERRIDE: %s\n"
			 * - "OnChangeFinaleStage"
			 * - "OnChangeFinaleMusic"
			 * - "CHANGEFINALESTAGEMUSIC: %s\n"
			 **/
			"CDirectorScriptedEventManager::ChangeFinaleStage"
			{
				"library"	"server"
				"linux"		"@_ZN29CDirectorScriptedEventManager17ChangeFinaleStageENS_18ScriptedEventStageEPKc"
				"mac"		"@_ZN29CDirectorScriptedEventManager17ChangeFinaleStageENS_18ScriptedEventStageEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x2A\x57\x53"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 56 8B ? ? 57 53 */
			}

			/**
			 * CDirectorScriptedEventManager::SendInRescueVehicle()
			 *
			 * How to find on Windows:
			 * 1. Search for the "FinaleEscapeStarted" or "finale_escape_start" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorScriptedEventManager::SendInRescueVehicle"
			{
				"library"	"server"
				"linux"		"@_ZN29CDirectorScriptedEventManager19SendInRescueVehicleEv"
				"mac"		"@_ZN29CDirectorScriptedEventManager19SendInRescueVehicleEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x68\x2A\x2A\x2A\x2A\x8B\x2A\x6A\x2A\xB9\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85"
						/* ? ? ? ? ? ? 56 68 ? ? ? ? 8B ? 6A ? B9 ? ? ? ? E8 ? ? ? ? 85 */
			}

			/**
			 * CDirectorTacticalServices::GetHighestFlowSurvivor(TerrorNavArea::FlowType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "We see a victim!" string.
			 * 2. The string can only be found in "TankIdle::Update".
			 * 3. The first function call below the string should be this function.
			 **/
			"CDirectorTacticalServices::GetHighestFlowSurvivor"
			{
				"library"	"server"
				"linux"		"@_ZNK25CDirectorTacticalServices22GetHighestFlowSurvivorEN13TerrorNavArea8FlowTypeE"
				"mac"		"@_ZNK25CDirectorTacticalServices22GetHighestFlowSurvivorEN13TerrorNavArea8FlowTypeE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x89\x2A\x2A\x89"
						/* ? ? ? ? ? ? F3 0F ? ? ? ? ? ? 33 ? 89 ? ? 89 ? ? 89 */
			}

			/**
			 * CDirectorVersusMode::ClearTeamScoresNonVirtual(bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirector::OnServerShutdown" function.
			 * 2. This function is two function calls above the "ServerConfig" string.
			 * 3. The function with two parameters, with the second having the value "1" passed to it, should be this function.
			 **/
			"CDirectorVersusMode::ClearTeamScoresNonVirtual"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode25ClearTeamScoresNonVirtualEb"
				"mac"		"@_ZN19CDirectorVersusMode25ClearTeamScoresNonVirtualEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x5D"
						/* ? ? ? ? ? ? ? ? 74 ? 89 ? ? 89 ? ? 89 ? ? 89 ? ? 5D */
			}

			/**
			 * CDirectorVersusMode::EndVersusModeRound(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "tiebreak" or "versus_match_finished" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorVersusMode::EndVersusModeRound"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode18EndVersusModeRoundEb"
				"mac"		"@_ZN19CDirectorVersusMode18EndVersusModeRoundEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x80"
						/* ? ? ? ? ? ? 57 8B ? E8 ? ? ? ? 84 ? 0F 84 ? ? ? ? 80 */
			}

			/**
			 * CDirectorVersusMode::GetMissionVersusBossSpawning(float &, float &, float &, float &, bool &)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "versus_boss_spawning"
			 * - "spawn_pos_min"
			 * - "spawn_pos_max"
			 * - "tank_chance"
			 * - "witch_chance"
			 * - "allow_boss_mix"
			 **/
			"CDirectorVersusMode::GetMissionVersusBossSpawning"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode28GetMissionVersusBossSpawningERfS0_S0_S0_Rb"
				"mac"		"@_ZN19CDirectorVersusMode28GetMissionVersusBossSpawningERfS0_S0_S0_Rb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\x5D\xC2\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? ? 83 ? ? 85 ? 75 ? 32 ? 5D C2 ? ? 56 */
			}

			/**
			 * CDirectorVersusMode::HideScoreboardNonVirtual()
			 *
			 * How to find on Windows:
			 * 1. Search for the "fullscreen_vs_results" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorVersusMode::HideScoreboardNonVirtual"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode24HideScoreboardNonVirtualEv"
				"mac"		"@_ZN19CDirectorVersusMode24HideScoreboardNonVirtualEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x53\x8D\x2A\x2A\x33"
						/* ? ? ? ? ? ? E8 ? ? ? ? 84 ? 74 ? 53 8D ? ? 33 */
			}

			/**
			 * CDirectorVersusMode::OnVersusRoundStarted()
			 *
			 * How to find on Windows:
			 * 1. Search for the "versus_round_start" string.
			 * 2. The string can only be found in this function.
			 **/
			"CDirectorVersusMode::OnVersusRoundStarted"
			{
				"library"	"server"
				"linux"		"@_ZN19CDirectorVersusMode20OnVersusRoundStartedEv"
				"mac"		"@_ZN19CDirectorVersusMode20OnVersusRoundStartedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\xA1\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x51\xD9\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 85 ? 74 ? A1 ? ? ? ? D9 ? ? 51 D9 ? ? E8 ? ? ? ? 8B */
			}

			/**
			 * CEntityDissolve::Create(CBaseEntity *, char const*, float, int, bool *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "TLK_DISSOLVESCREAM" or "TLK_ELECTROCUTESCREAM" string.
			 * 2. The string can only be found in this function.
			 **/
			"CEntityDissolve::Create"
			{
				"library"	"server"
				"linux"		"@_ZN15CEntityDissolve6CreateEP11CBaseEntityPKcfiPb"
				"mac"		"@_ZN15CEntityDissolve6CreateEP11CBaseEntityPKcfiPb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x81\xEC\x2A\x2A\x2A\x2A\x85"
						/* ? ? ? ? ? ? 81 EC ? ? ? ? 85 */
			}

			/**
			 * CEnvRockLauncher::LaunchCurrentDir()
			 *
			 * How to find on Windows:
			 * 1. Search for the "tank_rock" string.
			 * 2. One of the functions that references that string is "CTankRock::Create".
			 * 3. One of the functions that calls "CTankRock::Create" should be this function.
			 **/
			"CEnvRockLauncher::LaunchCurrentDir"
			{
				"library"	"server"
				"linux"		"@_ZN16CEnvRockLauncher16LaunchCurrentDirEv"
				"mac"		"@_ZN16CEnvRockLauncher16LaunchCurrentDirEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x57\xA8\x2A\x74\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x96\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x89\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\xF6\x2A\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x96\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x6A\x2A\x89\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x89\x2A\x2A\x52\x8D\x2A\x2A\x50\x89\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8D"
						/* ? ? ? ? ? ? 56 8B ? 8B 86 ? ? ? ? C1 ? ? 57 A8 ? 74 ? E8 ? ? ? ? 8B 8E ? ? ? ? 8B 96 ? ? ? ? 8B 86 ? ? ? ? 89 ? ? 8B 8E ? ? ? ? C1 ? ? 89 ? ? 89 ? ? F6 ? ? 74 ? 8B ? E8 ? ? ? ? 8B 96 ? ? ? ? 8B 86 ? ? ? ? 8B 8E ? ? ? ? 6A ? 89 ? ? 68 ? ? ? ? 8D ? ? 89 ? ? 52 8D ? ? 50 89 ? ? E8 ? ? ? ? 8B 8E ? ? ? ? 8B ? 8D */
			}

			/**
			 * CFinaleTrigger::StartFinale(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "finale_radio_start" string.
			 * 2. The string can only be found in this function.
			 **/
			"CFinaleTrigger::StartFinale"
			{
				"library"	"server"
				"linux"		"@_ZN14CFinaleTrigger11StartFinaleEP13CTerrorPlayer"
				"mac"		"@_ZN14CFinaleTrigger11StartFinaleEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x85\x2A\x75\x2A\xBF\x2A\x2A\x2A\x2A\x39"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 8B ? 85 ? 75 ? BF ? ? ? ? 39 */
			}

			/**
			 * CFirstAidKit::OnActionComplete(CTerrorPlayer*, CBaseEntity*)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "RelaxedSigh" or "HealedByFriend" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CFirstAidKit::`vftable'" to jump to the "CFirstAidKit" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CFirstAidKit::OnActionComplete"
			{
				"library"	"server"
				"linux"		"@_ZN12CFirstAidKit16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"mac"		"@_ZN12CFirstAidKit16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x90"
						/* ? ? ? ? ? ? 53 56 57 8B ? ? 85 ? 74 ? 8B ? 8B 90 */
			}

			/**
			 * CFirstAidKit::ShouldStartAction(CBaseBackpackItem::BackpackItemActionType, CTerrorPlayer *, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CFirstAidKit::`vftable'" to jump to the "CFirstAidKit" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CFirstAidKit::ShouldStartAction"
			{
				"library"	"server"
				"linux"		"@_ZN12CFirstAidKit17ShouldStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntity"
				"mac"		"@_ZN12CFirstAidKit17ShouldStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75\x2A\x5F"
						/* ? ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? 57 8B ? 8B ? FF ? 84 ? 75 ? 5F */
			}

			/**
			 * CGameRulesProxy::NotifyNetworkStateChanged()
			 *
			 * How to find on Windows:
			 * 1. Search for the "WaterSlowsMovement" string.
			 * 2. The string can only be found in "CDirector::Update".
			 * 3. The first function call below the string should be this function.
			 **/
			"CGameRulesProxy::NotifyNetworkStateChanged"
			{
				"library"	"server"
				"linux"		"@_ZN15CGameRulesProxy25NotifyNetworkStateChangedEv"
				"mac"		"@_ZN15CGameRulesProxy25NotifyNetworkStateChangedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\x56\x8B\x2A\x74"
						/* ? ? ? ? ? ? ? 74 ? 80 ? ? ? 56 8B ? 74 */
			}

			/**
			 * CGasCan::Event_Killed(CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "ToWin:%d"
			 * - "PlayerShotGasCan"
			 * - "scavenge_gas_can_destroyed"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CGasCan::`vftable'" to jump to the "CGasCan" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CGasCan::Event_Killed"
			{
				"library"	"server"
				"linux"		"@_ZN7CGasCan12Event_KilledERK15CTakeDamageInfo"
				"mac"		"@_ZN7CGasCan12Event_KilledERK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x8B\x83\x2A\x2A\x2A\x2A\x56\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? 8B 83 ? ? ? ? 56 8B */
			}

			/**
			 * CGasCan::OnActionComplete(CTerrorPlayer *, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "Score:%d,ToWin:%d"
			 * - "PlayerPourFinished"
			 * - "gascan_pour_completed"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CGasCan::`vftable'" to jump to the "CGasCan" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CGasCan::OnActionComplete"
			{
				"library"	"server"
				"linux"		"@_ZN7CGasCan16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"mac"		"@_ZN7CGasCan16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x8B\x0D"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 53 8B ? 8B 0D */
			}

			/**
			 * CGasCan::ShouldStartAction(CBaseBackpackItem::BackpackItemActionType, CTerrorPlayer *, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "gascan_pour_blocked" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CGasCan::`vftable'" to jump to the "CGasCan" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CGasCan::ShouldStartAction"
			{
				"library"	"server"
				"linux"		"@_ZN7CGasCan17ShouldStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntity"
				"mac"		"@_ZN7CGasCan17ShouldStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84"
						/* ? ? ? ? ? ? ? 57 8B ? 85 ? 74 ? 8B ? E8 ? ? ? ? 84 */
			}

			/**
			 * CGib::InitGib(CBaseEntity *, float, float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "models/gibs/agibs.mdl" string.
			 * 2. The string can only be found in "CGib::SpawnRandomGibs".
			 * 3. The first function call below the string should be this function.
			 * 4. The values "300.0" and "400.0" are passed to this function.
			 **/
			"CGib::InitGib"
			{
				"library"	"server"
				"linux"		"@_ZN4CGib7InitGibEP11CBaseEntityff"
				"mac"		"@_ZN4CGib7InitGibEP11CBaseEntityff"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xF3"
						/* ? ? ? ? ? ? 56 57 8B ? ? 8B ? 85 ? 0F 84 ? ? ? ? F3 */
			}

			/**
			 * CGib::Spawn(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "models/gibs/agibs.mdl" string.
			 * 2. The string can only be found in "CGib::SpawnRandomGibs".
			 * 3. The string is passed to this function.
			 **/
			"CGib::Spawn"
			{
				"library"	"server"
				"linux"		"@_ZN4CGib5SpawnEPKc"
				"mac"		"@_ZN4CGib5SpawnEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x05\x2A\x2A\x2A\x2A\x51\x8B\x2A\xD9\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x80"
						/* ? ? ? ? ? ? ? 6A ? 8B ? E8 ? ? ? ? D9 05 ? ? ? ? 51 8B ? D9 ? ? E8 ? ? ? ? 80 */
			}

			/**
			 * CGrenadeLauncher::PrimaryAttack()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "weapon_fire_at_40" or "weapon_fire_on_empty" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CGrenadeLauncher::`vftable'" to jump to the "CGrenadeLauncher" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CGrenadeLauncher::PrimaryAttack"
			{
				"library"	"server"
				"linux"		"@_ZN16CGrenadeLauncher13PrimaryAttackEv"
				"mac"		"@_ZN16CGrenadeLauncher13PrimaryAttackEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 53 56 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B */
			}

			/**
			 * Checkpoint::ContainsArea(TerrorNavArea *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Haven't left the initial checkpoint yet" string.
			 * 2. The string can only be found in "SurvivorBehavior::Update".
			 * 3. The first function call below the string should be this function.
			 **/
			"Checkpoint::ContainsArea"
			{
				"library"	"server"
				"linux"		"@_ZNK10Checkpoint12ContainsAreaEP13TerrorNavArea"
				"mac"		"@_ZNK10Checkpoint12ContainsAreaEP13TerrorNavArea"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x33\x2A\x56\x85\x2A\x7E\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 33 ? 56 85 ? 7E ? 8B ? 8B */
			}

			/**
			 * Checkpoint::GetLargestArea()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Goal area set by checkpoint!\n" string.
			 * 2. The string can only be found in "TerrorNavMesh::FindGoalArea".
			 * 3. This function should be the first function call above the string.
			 **/
			"Checkpoint::GetLargestArea"
			{
				"library"	"server"
				"linux"		"@_ZNK10Checkpoint14GetLargestAreaEv"
				"mac"		"@_ZNK10Checkpoint14GetLargestAreaEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x53\x8B\x2A\x2A\x33\x2A\x33"
						/* ? ? ? ? ? ? ? 8B ? 53 8B ? ? 33 ? 33 */
			}

			/**
			 * CHolidayGift::Create(Vector const&, QAngle const&, QAngle const&, Vector const&, CBaseCombatCharacter *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "holiday_gift" string.
			 * 2. One of the functions that references that string should be this function.
			 * 3. This function should also contain "idle" and "Christmas.GiftDrop" strings.
			 **/
			"CHolidayGift::Create"
			{
				"library"	"server"
				"linux"		"@_ZN12CHolidayGift6CreateERK6VectorRK6QAngleS5_S2_P20CBaseCombatCharacter"
				"mac"		"@_ZN12CHolidayGift6CreateERK6VectorRK6QAngleS5_S2_P20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x83\x2A\x2A\x56\x57"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 8B ? ? 8B ? ? 8B ? ? 83 ? ? 56 57 */
			}

			/**
			 * CInferno::Spread(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "CInferno::InfernoThink (spread)" string.
			 * 2. The string can only be found in "CInferno::InfernoThink".
			 * 3. The first function call below the string should be this function.
			 **/
			"CInferno::Spread"
			{
				"library"	"server"
				"linux"		"@_ZN8CInferno6SpreadERK6Vector"
				"mac"		"@_ZN8CInferno6SpreadERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x56\x57\x8B\x2A\xF3"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 56 57 8B ? F3 */
			}

			/**
			 * CInsectSwarm::CanHarm(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CInsectSwarm::`vftable'" to jump to the "CInsectSwarm" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CInsectSwarm::CanHarm"
			{
				"library"	"server"
				"linux"		"@_ZNK12CInsectSwarm7CanHarmEP11CBaseEntity"
				"mac"		"@_ZNK12CInsectSwarm7CanHarmEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x5E"
						/* ? ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 74 ? 8B ? E8 ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 5E */
			}

			/**
			 * CItem_Adrenaline::OnStartUse(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "UseAdrenaline" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CItem_Adrenaline::`vftable'" to jump to the "CItem_Adrenaline" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CItem_Adrenaline::OnStartUse"
			{
				"library"	"server"
				"linux"		"@_ZN16CItem_Adrenaline10OnStartUseEP13CTerrorPlayer"
				"mac"		"@_ZN16CItem_Adrenaline10OnStartUseEP13CTerrorPlayer"
				"windows"	"\x55\x8B\xEC\x56\x8B\x75\x08\x57\x8B\x3E\x6A\x00\x6A\x00\x6A\x00\x6A\x00\x6A\x01\x83\xEC\x08\x8B\xCC\x68\x74"
						/* 55 8B EC 56 8B 75 08 57 8B 3E 6A 00 6A 00 6A 00 6A 00 6A 01 83 EC 08 8B CC 68 74 */
			}

			/**
			 * CItemDefibrillator::OnActionComplete(CTerrorPlayer *, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CItemDefibrillator::`vftable'" to jump to the "CItemDefibrillator" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CItemDefibrillator::OnActionComplete"
			{
				"library"	"server"
				"linux"		"@_ZN18CItemDefibrillator16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"mac"		"@_ZN18CItemDefibrillator16OnActionCompleteEP13CTerrorPlayerP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x6A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x6A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x8E"
						/* ? ? ? ? ? ? 56 6A ? 68 ? ? ? ? 68 ? ? ? ? 6A ? 50 E8 ? ? ? ? 8B ? 83 ? ? 85 ? 0F 84 ? ? ? ? 8B 8E */
			}

			/**
			 * CItemDefibrillator::OnStartAction(CBaseBackpackItem::BackpackItemActionType, CTerrorPlayer *, CBaseEntity *, float)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "PlayerUsingDefibrillator" or "defibrillator_begin" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CItemDefibrillator::`vftable'" to jump to the "CItemDefibrillator" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CItemDefibrillator::OnStartAction"
			{
				"library"	"server"
				"linux"		"@_ZN18CItemDefibrillator13OnStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntityf"
				"mac"		"@_ZN18CItemDefibrillator13OnStartActionEN17CBaseBackpackItem22BackpackItemActionTypeEP13CTerrorPlayerP11CBaseEntityf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x2A\x6A\x2A\x51\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x6A\x2A\x6A\x2A\x6A\x2A\x6A\x2A\x6A\x2A\x83\x2A\x2A\x8B\x2A\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x2A\x6A"
						/* ? ? ? ? ? ? 56 57 8B ? ? 6A ? 51 D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? 8B ? 6A ? 6A ? 6A ? 6A ? 6A ? 83 ? ? 8B ? 68 ? ? ? ? E8 ? ? ? ? 8B 86 ? ? ? ? 8B ? FF ? 8B ? ? 6A */
			}

			/**
			 * CLeap::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CLeap::`vftable'" to jump to the "CLeap" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CLeap::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN5CLeap15ActivateAbilityEv"
				"mac"		"@_ZN5CLeap15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x57\x75\x2A\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x86\x2A\x2A\x2A\x2A\xD9\x2A\xDF\x2A\xDD\x2A\x72\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 80 BE ? ? ? ? ? 57 75 ? 8D 8E ? ? ? ? E8 ? ? ? ? D9 86 ? ? ? ? D9 ? DF ? DD ? 72 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B 86 ? ? ? ? 83 */
			}

			/**
			 * CLeap::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CLeap::`vftable'" to jump to the "CLeap" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CLeap::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK5CLeap20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK5CLeap20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x32\x2A\x5E\xC3\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 75 ? 5F 32 ? 5E C3 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 75 ? 8B */
			}

			/**
			 * CLeap::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CLeap::`vftable'" to jump to the "CLeap" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CLeap::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN5CLeap13UpdateAbilityEv"
				"mac"		"@_ZN5CLeap13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? F3 0F ? ? ? ? ? ? F3 */
			}

			/**
			 * CLunge::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CLunge::`vftable'" to jump to the "CLunge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CLunge::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CLunge15ActivateAbilityEv"
				"mac"		"@_ZN6CLunge15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x57\x75\x2A\x8D\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x86\x2A\x2A\x2A\x2A\xD9\x2A\xDF\x2A\xDD\x2A\x72\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 80 BE ? ? ? ? ? 57 75 ? 8D 8E ? ? ? ? E8 ? ? ? ? D9 86 ? ? ? ? D9 ? DF ? DD ? 72 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B 86 ? ? ? ? 53 */
			}

			/**
			 * CLunge::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CLunge::`vftable'" to jump to the "CLunge" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CLunge::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK6CLunge20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK6CLunge20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75"
						/* ? ? ? ? ? ? ? ? ? 57 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 75 */
			}

			/**
			 * CLunge::UpdateAbility()
			 *
			 * Note: (Windows) This function is in-lined with the "CTerrorPlayer::OnLungeEnd" function.
			 *
			 * How to find on Windows:
			 * 1a. Search for the "%s ending a pounce\n" or "%s ending a lunge\n" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CLunge::`vftable'" to jump to the "CLunge" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CLunge::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CLunge13UpdateAbilityEv"
				"mac"		"@_ZN6CLunge13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? ? 0F 84 ? ? ? ? 8B 86 ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 57 */
			}

			/**
			 * CMeleeWeaponInfo::Parse(char const*, KeyValues *)
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "refire_delay"
			 * - "addon_attachment"
			 * - "damage_flags"
			 * - "rumble_effect"
			 * - "decapitates"
			 * - "activity_idle"
			 * - "activity_walk"
			 * - "activity_run"
			 * - "activity_crouchidle"
			 * - "activity_crouchwalk"
			 * - "activity_idleinjured"
			 * - "activity_walkinjured"
			 * - "activity_runinjured"
			 * - "activity_idlecalm"
			 * - "activity_walkcalm"
			 * - "activity_runcalm"
			 * - "activity_jump"
			 * - "activity_deploy"
			 * - "activity_shove"
			 * - "player_anim_event"
			 * - "weapon_idle_time"
			 * - "primaryattacks"
			 * - "secondaryattacks"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CMeleeWeaponInfo::`vftable'" to jump to the "CMeleeWeaponInfo" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CMeleeWeaponInfo::Parse"
			{
				"library"	"server"
				"linux"		"@_ZN16CMeleeWeaponInfo5ParseEPKcP9KeyValues"
				"mac"		"@_ZN16CMeleeWeaponInfo5ParseEPKcP9KeyValues"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x53\x56\x57\x8B\x2A\x6A\x2A\x50\x8D\x8B"
						/* ? ? ? ? ? ? 8B ? ? 53 56 57 8B ? 6A ? 50 8D 8B */
			}

			/**
			 * CMeleeWeaponInfoStore::GetMeleeWeaponInfo(int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "models/props_junk/gascan001a.mdl" string.
			 * 2. There will be two copies of the string, but the one to use should be referred to as "aModelsPropsJun_0" in IDA view.
			 * 3. One of the functions that references that string is "CWeaponMeleeSpawn::GetWeaponModel".
			 * 4. The only function call in "CWeaponMeleeSpawn::GetWeaponModel" should be this function.
			 **/
			"CMeleeWeaponInfoStore::GetMeleeWeaponInfo"
			{
				"library"	"server"
				"linux"		"@_ZN21CMeleeWeaponInfoStore18GetMeleeWeaponInfoEi"
				"mac"		"@_ZN21CMeleeWeaponInfoStore18GetMeleeWeaponInfoEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x56\x8B\x2A\x8D\x2A\x2A\x51\x8D\x2A\x2A\x89\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 8B ? ? 56 8B ? 8D ? ? 51 8D ? ? 89 ? ? E8 ? ? ? ? 83 */
			}

			/**
			 * CNavArea::IsBlocked(int, bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "WitchLocomotion::IsAreaTraversable" function.
			 * 2. The first function call in "WitchLocomotion::IsAreaTraversable" should be this function.
			 **/
			"CNavArea::IsBlocked"
			{
				"library"	"server"
				"linux"		"@_ZNK8CNavArea9IsBlockedEib"
				"mac"		"@_ZNK8CNavArea9IsBlockedEib"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x2A\x2A\x85\x2A\x79"
						/* ? ? ? ? ? ? ? 74 ? 8B ? ? 85 ? 79 */
			}

			/**
			 * CNavArea::SpliceEdit(CNavArea*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SpliceEdit: Out of memory.\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CNavArea::SpliceEdit"
			{
				"library"	"server"
				"linux"		"@_ZN8CNavArea10SpliceEditEPS_"
				"mac"		"@_ZN8CNavArea10SpliceEditEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? 53 8B ? ? F3 ? ? ? ? 56 */
			}

			/**
			 * CNavLadder::GetPosAtHeight(float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetPosAtHeight" string.
			 * 2. The last function call below the string should be this function.
			 **/
			"CNavLadder::GetPosAtHeight"
			{
				"library"	"server"
				"linux"		"@_ZNK10CNavLadder14GetPosAtHeightEf"
				"mac"		"@_ZNK10CNavLadder14GetPosAtHeightEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x76\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x89\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x5D\xC2\x2A\x2A\xF3"
						/* ? ? ? ? ? ? ? ? F3 ? ? ? ? 0F ? ? 76 ? 8B ? ? 8B ? ? 89 ? 8B ? ? 8B ? ? 89 ? ? 89 ? ? 5D C2 ? ? F3 */
			}

			/**
			 * CNavMesh::GetNavArea(Vector const&, float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::UpdateVersusBossSpawning" function.
			 * 3. This function should be five function calls below the " Highest survivor flow distance = %f  Tank at = %f witch at %f\n" string.
			 * 4. The value "120.0" is passed to this function.
			 **/
			"CNavMesh::GetNavArea"
			{
				"library"	"server"
				"linux"		"@_ZNK8CNavMesh10GetNavAreaERK6Vectorf"
				"mac"		"@_ZNK8CNavMesh10GetNavAreaERK6Vectorf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x75\x2A\x33\x2A\x8B\x2A\x5D\xC2\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? 83 ? ? ? 75 ? 33 ? 8B ? 5D C2 ? ? F3 0F ? ? ? ? ? ? F3 ? ? ? ? 56 */
			}

			/**
			 * CNavMesh::GetNearestNavArea(Vector const&, bool, float, bool, bool, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetSafeSpawnPos: %s ideal pos %s is clear\n" string.
			 * 2. The string can only be found in "GetSafeSpawnPos".
			 * 3. The third function call in "GetSafeSpawnPos" should be this function.
			 * 4. The values "10000.0", "0", and "1" are passed to this function.
			 **/
			"CNavMesh::GetNearestNavArea<Vector>"
			{
				"library"	"server"
				"linux"		"@_ZNK8CNavMesh17GetNearestNavAreaERK6Vectorbfbbb"
				"mac"		"@_ZNK8CNavMesh17GetNearestNavAreaERK6Vectorbfbbb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x83\x2A\x2A\x2A\x57\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 83 ? ? ? 57 8B */
			}

			/**
			 * CommandNavSave()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings:
			 * - "Navigation map '%s' saved.\n"
			 * - "ERROR: Cannot save navigation map '%s'.\n"
			 * - "(null)"
			 * 2. One of the functions that references any of these strings should be this function.
			 **/
			"CommandNavSave"
			{
				"library"	"server"
				"linux"		"@_Z14CommandNavSavev"
				"mac"		"@_Z14CommandNavSavev"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x84"
						/* ? ? ? ? ? ? ? 74 ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? 8B 0D ? ? ? ? 84 */
			}

			/**
			 * CPipeBombProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter *, float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Pipe bomb projectile spawned at %f %f %f, velocity %f %f %f\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CPipeBombProjectile::Create"
			{
				"library"	"server"
				"linux"		"@_ZN19CPipeBombProjectile6CreateERK6VectorRK6QAngleS2_S2_P20CBaseCombatCharacterf"
				"mac"		"@_ZN19CPipeBombProjectile6CreateERK6VectorRK6QAngleS2_S2_P20CBaseCombatCharacterf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x50\x51\x53\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\xD9\x2A\x2A\x83\x2A\x2A\xDD\x2A\x2A\x2A\x8B\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\xDD\x2A\x2A\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\xDD\x2A\x2A\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 8B ? ? 53 8B ? ? 56 57 50 51 53 68 ? ? ? ? E8 ? ? ? ? 8B ? ? D9 ? ? 83 ? ? DD ? ? ? 8B ? D9 ? ? DD ? ? ? D9 ? DD ? ? ? D9 ? ? DD ? ? ? D9 ? ? DD ? ? ? D9 ? DD ? ? 68 ? ? ? ? E8 ? ? ? ? 8B */
			}

			/**
			 * CPipeBombProjectile::Detonate()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CPipeBombProjectile::`vftable'" to jump to the "CPipeBombProjectile" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CPipeBombProjectile::Detonate"
			{
				"library"	"server"
				"linux"		"@_ZN19CPipeBombProjectile8DetonateEv"
				"mac"		"@_ZN19CPipeBombProjectile8DetonateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x57\xA8\x2A\x74\x2A\xE8\x2A\x2A\x2A\x2A\x8B\xBE"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 8B ? 8B 86 ? ? ? ? C1 ? ? 57 A8 ? 74 ? E8 ? ? ? ? 8B BE */
			}

			/**
			 * CPistol::GetRateOfFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CPistol::`vftable'" to jump to the "CPistol" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CPistol::GetRateOfFire"
			{
				"library"	"server"
				"linux"		"@_ZNK7CPistol13GetRateOfFireEv"
				"mac"		"@_ZNK7CPistol13GetRateOfFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x8B\x2A\x84\x2A\x74\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 8B ? 84 ? 74 ? E8 ? ? ? ? 85 ? 74 */
			}

			/**
			 * CPropDoorRotatingCheckpoint::IsCheckpointDoor()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CPropDoorRotatingCheckpoint::`vftable'" to jump to the "CPropDoorRotatingCheckpoint" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CPropDoorRotatingCheckpoint::IsCheckpointDoor"
			{
				"library"	"server"
				"linux"		"@_ZNK27CPropDoorRotatingCheckpoint16IsCheckpointDoorEv"
				"mac"		"@_ZNK27CPropDoorRotatingCheckpoint16IsCheckpointDoorEv"
				"windows"	"\xB0\x2A\xC3\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x33"
						/* B0 ? C3 ? ? ? ? ? ? ? ? ? ? ? ? ? ? 8B ? 33 */
			}

			/**
			 * CPropDoorRotatingCheckpoint::IsCheckpointExitDoor()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CPropDoorRotatingCheckpoint::`vftable'" to jump to the "CPropDoorRotatingCheckpoint" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CPropDoorRotatingCheckpoint::IsCheckpointExitDoor"
			{
				"library"	"server"
				"linux"		"@_ZNK27CPropDoorRotatingCheckpoint20IsCheckpointExitDoorEv"
				"mac"		"@_ZNK27CPropDoorRotatingCheckpoint20IsCheckpointExitDoorEv"
				"windows"	"\x8A\x81\xC0\x17"
						/* 8A 81 C0 17 */
			}

			/**
			 * CRifle_M60::PrimaryAttack()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CRifle_M60::`vftable'" to jump to the "CRifle_M60" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CRifle_M60::PrimaryAttack"
			{
				"library"	"server"
				"linux"		"@_ZN10CRifle_M6013PrimaryAttackEv"
				"mac"		"@_ZN10CRifle_M6013PrimaryAttackEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x74\x2A\xF3"
						/* ? ? ? ? ? ? 57 8B ? E8 ? ? ? ? 80 BE ? ? ? ? ? 74 ? F3 */
			}

			/**
			 * CSelfDestruct::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSelfDestruct::`vftable'" to jump to the "CSelfDestruct" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSelfDestruct::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN13CSelfDestruct15ActivateAbilityEv"
				"mac"		"@_ZN13CSelfDestruct15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\xB3"
						/* ? ? ? ? ? ? 57 8B ? B3 */
			}

			/**
			 * CSelfDestruct::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSelfDestruct::`vftable'" to jump to the "CSelfDestruct" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSelfDestruct::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK13CSelfDestruct20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK13CSelfDestruct20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x32\x2A\x5E\xC3\x8B\x8E\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x25\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x83\x2A\x2A\x74\x2A\x85\x2A\x74\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xEB\x2A\x33\x2A\x8B\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x75\x2A\x8B\x2A\x5E\xE9\x1A"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 32 ? 5E C3 8B 8E ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 25 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 83 ? ? 74 ? 85 ? 74 ? 39 ? ? 75 ? 8B ? EB ? 33 ? 8B ? 8B ? 8B 82 ? ? ? ? FF ? 84 ? 75 ? 8B ? 5E E9 1A */
			}

			/**
			 * CSelfDestruct::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSelfDestruct::`vftable'" to jump to the "CSelfDestruct" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSelfDestruct::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN13CSelfDestruct13UpdateAbilityEv"
				"mac"		"@_ZN13CSelfDestruct13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x83\x2A\x2A\x74\x2A\x8B\x35\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE2\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xEB"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 56 83 ? ? 74 ? 8B 35 ? ? ? ? 8B ? 81 E2 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? EB */
			}

			/**
			 * CServerGameClients::GetPlayerLimits(int &, int &, int &)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, search for the "ParticleEffectNames" string in the Windows binary.
			 * 3. Go to the ".rdata" address of that string.
			 * 4. The second vtable below the string should be the "CServerGameClients" vtable.
			 * 5. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 6. Look for the target function in the Windows binary.
			 **/
			"CServerGameClients::GetPlayerLimits"
			{
				"library"	"server"
				"linux"		"@_ZNK18CServerGameClients15GetPlayerLimitsERiS0_S0_"
				"mac"		"@_ZNK18CServerGameClients15GetPlayerLimitsERiS0_S0_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\xC7\x00\x2A\x2A\x2A\x2A\xC7\x01\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 8B ? ? C7 00 ? ? ? ? C7 01 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CSmokeCloudSystem::FireGameEvent(IGameEvent *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSmokeCloudSystem::`vftable'" to jump to the "CSmokeCloudSystem" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSmokeCloudSystem::FireGameEvent"
			{
				"library"	"server"
				"linux"		"@_ZN17CSmokeCloudSystem13FireGameEventEP10IGameEvent"
				"mac"		"@_ZN17CSmokeCloudSystem13FireGameEventEP10IGameEvent"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x57\x8B\x2A\x8B\x2A\xFF\x2A\x3D\x2A\x2A\x2A\x2A\x74\x2A\x68\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x85\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 56 8B ? ? 8B ? 8B ? ? 57 8B ? 8B ? FF ? 3D ? ? ? ? 74 ? 68 ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 85 ? 0F 85 ? ? ? ? 8B ? 8B ? ? 6A ? 68 ? ? ? ? 8B ? FF ? 50 E8 ? ? ? ? 8B */
			}

			/**
			 * CSpitAbility::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSpitAbility::`vftable'" to jump to the "CSpitAbility" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSpitAbility::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN12CSpitAbility15ActivateAbilityEv"
				"mac"		"@_ZN12CSpitAbility15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x8B\x83\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F"
						/* ? ? ? ? ? ? 53 8B ? 8B 83 ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 57 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F */
			}

			/**
			 * CSpitAbility::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSpitAbility::`vftable'" to jump to the "CSpitAbility" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSpitAbility::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK12CSpitAbility20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK12CSpitAbility20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x32\x2A\x5E\xC3\x8B\x8E\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x25\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x83\x2A\x2A\x74\x2A\x85\x2A\x74\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xEB\x2A\x33\x2A\x8B\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x75\x2A\x8B\x2A\x5E\xE9\xDA"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 32 ? 5E C3 8B 8E ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 25 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 83 ? ? 74 ? 85 ? 74 ? 39 ? ? 75 ? 8B ? EB ? 33 ? 8B ? 8B ? 8B 82 ? ? ? ? FF ? 84 ? 75 ? 8B ? 5E E9 DA */
			}

			/**
			 * CSpitAbility::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSpitAbility::`vftable'" to jump to the "CSpitAbility" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSpitAbility::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN12CSpitAbility13UpdateAbilityEv"
				"mac"		"@_ZN12CSpitAbility13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x80\xBB"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? 80 BB */
			}

			/**
			 * CSpitterProjectile::Create(Vector const&, QAngle const&, Vector const&, Vector const&, CBaseCombatCharacter*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Spitter projectile spawned at %f %f %f, velocity %f %f %f\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CSpitterProjectile::Create"
			{
				"library"	"server"
				"linux"		"@_ZN18CSpitterProjectile6CreateERK6VectorRK6QAngleS2_S2_P20CBaseCombatCharacter"
				"mac"		"@_ZN18CSpitterProjectile6CreateERK6VectorRK6QAngleS2_S2_P20CBaseCombatCharacter"
				"windows"	"\x55\x8B\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x50\x51\x53\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\xD9\x2A\x2A\x83\x2A\x2A\xDD\x2A\x2A\x2A\x8B\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\xDD\x2A\x2A\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\x2A\xDD\x2A\x2A\x2A\xD9\x2A\xDD\x2A\x2A\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x05\x2A\x2A\x2A\x2A\x83\x2A\x2A\x8B\x2A\xD9\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x57"
						/* 55 8B ? 8B ? ? 8B ? ? 53 8B ? ? 56 57 50 51 53 68 ? ? ? ? E8 ? ? ? ? 8B ? ? D9 ? ? 83 ? ? DD ? ? ? 8B ? D9 ? ? DD ? ? ? D9 ? DD ? ? ? D9 ? ? DD ? ? ? D9 ? ? DD ? ? ? D9 ? DD ? ? 68 ? ? ? ? E8 ? ? ? ? D9 05 ? ? ? ? 83 ? ? 8B ? D9 ? ? E8 ? ? ? ? 57 8B ? E8 ? ? ? ? 57 8B ? E8 ? ? ? ? 8B ? ? 57 */
			}

			/**
			 * CSpitterProjectile::Detonate()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CSpitterProjectile::`vftable'" to jump to the "CSpitterProjectile" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CSpitterProjectile::Detonate"
			{
				"library"	"server"
				"linux"		"@_ZN18CSpitterProjectile8DetonateEv"
				"mac"		"@_ZN18CSpitterProjectile8DetonateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? 57 */
			}

			/**
			 * CSurvivorDeathModel::Create(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "survivor_death_model" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CSurvivorDeathModel::Create"
			{
				"library"	"server"
				"linux"		"@_ZN19CSurvivorDeathModel6CreateEP13CTerrorPlayer"
				"mac"		"@_ZN19CSurvivorDeathModel6CreateEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x33\x2A\x5F\x5D\xC3\x8B"
						/* ? ? ? ? ? ? ? 85 ? 75 ? 33 ? 5F 5D C3 8B */
			}

			/**
			 * CTankClaw::DoSwing()
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "rhand"
			 * - "lhand"
			 * - "ValveBiped.Bip01_L_Hand"
			 * 1b. Search for the "ValveBiped.Bip01_R_Hand" string.
			 * 2b. One of the functions that references that string should be this function.
			 **/
			"CTankClaw::DoSwing"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw7DoSwingEv"
				"mac"		"@_ZN9CTankClaw7DoSwingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x89\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85"
						/* ? ? ? ? ? ? 56 89 ? ? E8 ? ? ? ? 8B ? 85 */
			}

			/**
			 * CTankClaw::GroundPound()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTankClaw::SweepFist" function.
			 * 2. Click on the second to last function call to go to "CTerrorWeapon::MarkAsHit".
			 * 3. This function calls "CTerrorWeapon::MarkAsHit" twice.
			 * 4. To pinpoint the right function, look for the one that sets multiple variables to "0".
			 **/
			"CTankClaw::GroundPound"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw11GroundPoundEv"
				"mac"		"@_ZN9CTankClaw11GroundPoundEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x89"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? E8 ? ? ? ? 8B ? 89 */
			}

			/**
			 * CTankClaw::OnPlayerHit(CTerrorPlayer*, bool)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "PlayerGroundPoundedByTank" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTankClaw::`vftable'" to jump to the "CTankClaw" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTankClaw::OnPlayerHit"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw11OnPlayerHitEP13CTerrorPlayerb"
				"mac"		"@_ZN9CTankClaw11OnPlayerHitEP13CTerrorPlayerb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x8B\x2A\x2A\x57\x8B\x2A\x89\x2A\x2A\xE8"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 8B ? ? 57 8B ? 89 ? ? E8 */
			}

			/**
			 * CTankClaw::OnWindupFinished()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTankClaw::`vftable'" to jump to the "CTankClaw" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTankClaw::OnWindupFinished"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw16OnWindupFinishedEv"
				"mac"		"@_ZN9CTankClaw16OnWindupFinishedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x33\x2A\x3B\x2A\x0F\x84\x2A\x2A\x2A\x2A\xD9"
						/* ? ? ? ? ? ? 53 56 57 8B ? E8 ? ? ? ? 8B ? 33 ? 3B ? 0F 84 ? ? ? ? D9 */
			}

			/**
			 * CTankClaw::PrimaryAttack()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTankClaw::`vftable'" to jump to the "CTankClaw" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTankClaw::PrimaryAttack"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw13PrimaryAttackEv"
				"mac"		"@_ZN9CTankClaw13PrimaryAttackEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x33\x2A\x57\x8B\x2A\x39\x2A\x2A\x0F"
						/* ? ? ? ? ? ? ? ? ? 56 33 ? 57 8B ? 39 ? ? 0F */
			}

			/**
			 * CTankClaw::SweepFist(Vector const&, Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTankClaw::DoSwing" function.
			 * 2. The last function call should be this function.
			 **/
			"CTankClaw::SweepFist"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankClaw9SweepFistERK6VectorS2_"
				"mac"		"@_ZN9CTankClaw9SweepFistERK6VectorS2_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x56\x57\x8B\x2A\x2A\x89\x8D"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 56 57 8B ? ? 89 8D */
			}

			/**
			 * CTankRock::BounceTouch(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "prop_minigun*" or "HulkZombie.ThrownProjectileHit" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTankRock::`vftable'" to jump to the "CTankRock" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTankRock::BounceTouch"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankRock11BounceTouchEP11CBaseEntity"
				"mac"		"@_ZN9CTankRock11BounceTouchEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\xD8\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x0F\xB7"
						/* ? ? ? ? ? ? ? ? ? A1 D8 ? ? ? 33 ? 89 ? ? 53 8B ? ? 0F B7 */
			}

			/**
			 * CTankRock::Create(Vector const&, QAngle const&, Vector const&, CBaseCombatCharacter*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "tank_rock" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTankRock::Create"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankRock6CreateERK6VectorRK6QAngleS2_P20CBaseCombatCharacter"
				"mac"		"@_ZN9CTankRock6CreateERK6VectorRK6QAngleS2_P20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x53\x50"
						/* ? ? ? ? ? ? 8B ? ? 53 8B ? ? 56 57 53 50 */
			}

			/**
			 * CTankRock::Detonate()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "tank_rock_throw_impact_stump" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTankRock::`vftable'" to jump to the "CTankRock" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTankRock::Detonate"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankRock8DetonateEv"
				"mac"		"@_ZN9CTankRock8DetonateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x57\x0F\x84\x2A\x2A\x2A\x2A\xA1"
						/* ? ? ? ? ? ? 53 56 8B ? 80 BE ? ? ? ? ? 57 0F 84 ? ? ? ? A1 */
			}

			/**
			 * CTankRock::OnRelease(Vector const&, QAngle const&, Vector const&, Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "HulkZombie.Throw.FlyLoop" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTankRock::OnRelease"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankRock9OnReleaseERK6VectorRK6QAngleS2_S2_"
				"mac"		"@_ZN9CTankRock9OnReleaseERK6VectorRK6QAngleS2_S2_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\xC6\x86\x2A\x2A\x2A\x2A\x2A\xC7"
						/* ? ? ? ? ? ? 57 C6 86 ? ? ? ? ? C7 */
			}

			/**
			 * CTankRock::ProximityThink()
			 *
			 * How to find on Windows:
			 * 1. Search for the "CTankRock::ProximityThink" or "Terror" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTankRock::ProximityThink"
			{
				"library"	"server"
				"linux"		"@_ZN9CTankRock14ProximityThinkEv"
				"mac"		"@_ZN9CTankRock14ProximityThinkEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x53\x56\x57\x33\x2A\x89\x2A\x2A\x89\x2A\x2A\x8B\x2A\x39\x2A\x2A\x74\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x57\x57\x57\x57\x8D\x2A\x2A\x51\x50\xFF\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x6A\x2A\x57\x68\x2A\x2A\x2A\x2A\x57\x89\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\xFF\x15\x2A\x2A\x2A\x2A\xF3"
						/* ? ? ? ? ? ? A1 ? ? ? ? 53 56 57 33 ? 89 ? ? 89 ? ? 8B ? 39 ? ? 74 ? 8B ? ? 68 ? ? ? ? 8B ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 57 57 57 57 8D ? ? 51 50 FF ? A1 ? ? ? ? 83 ? ? 8B ? ? 8B ? ? 8B ? ? 6A ? 57 68 ? ? ? ? 57 89 ? ? 8B 0D ? ? ? ? 68 ? ? ? ? 89 ? ? 89 ? ? FF 15 ? ? ? ? F3 */
			}

			/**
			 * CTerrorGameMovement::CheckForLadders(bool)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGameMovement::`vftable'" to jump to the "CTerrorGameMovement" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGameMovement::CheckForLadders"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement15CheckForLaddersEb"
				"mac"		"@_ZN19CTerrorGameMovement15CheckForLaddersEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x0F\x85"
						/* ? ? ? ? ? ? 83 BE ? ? ? ? ? 0F 84 ? ? ? ? 8B 8E ? ? ? ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 0F 85 */
			}

			/**
			 * CTerrorGameMovement::CheckJumpButton()
			 *
			 * How to find on Windows:
			 * 1a. Locate the "CTerrorGameMovement::DoJump" function.
			 * 2a. One of the functions that calls "CTerrorGameMovement::DoJump" should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorGameMovement::`vftable'" to jump to the "CTerrorGameMovement" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorGameMovement::CheckJumpButton"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"mac"		"@_ZN19CTerrorGameMovement15CheckJumpButtonEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x80\xB8\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x2A\x2A\x83\x2A\x2A\x2A\x32\x2A\x5E\xC3"
						/* ? ? ? ? ? ? ? ? ? 85 ? 74 ? 80 B8 ? ? ? ? ? 74 ? 8B ? ? 83 ? ? ? 32 ? 5E C3 */
			}

			/**
			 * CTerrorGameMovement::DoJump(Vector*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "player_jump" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameMovement::DoJump"
			{
				"library"	"server"
				"linux"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"mac"		"@_ZN19CTerrorGameMovement6DoJumpEP6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\x6A\x2A\xFF\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A\x2A\x6A"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? 57 6A ? FF ? 8B 8E ? ? ? ? 8B ? 8B 90 ? ? ? ? 6A ? 6A */
			}

			/**
			 * CTerrorGameRules::CalculateSurvivalMultiplier(bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::EndVersusModeRound" function.
			 * 2. The second function call should be this function.
			 **/
			"CTerrorGameRules::CalculateSurvivalMultiplier"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules27CalculateSurvivalMultiplierEb"
				"mac"		"@_ZN16CTerrorGameRules27CalculateSurvivalMultiplierEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x80\x2A\x2A\x2A\x53\x56\x8B\x2A\x0F\x84"
						/* ? ? ? ? ? ? 80 ? ? ? 53 56 8B ? 0F 84 */
			}

			/**
			 * CTerrorGameRules::ClearScavengeScores(bool)
			 *
			 * Note: (Windows) This function is in-lined with the "CDirector::ClearScavengeScores" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "RefreshInitialSpawnPositions" string.
			 * 2. The string can only be found in "CDirector::OnRestartMap".
			 * 3. The second to last function call in "CDirector::OnRestartMap" should be this function.
			 **/
			"CTerrorGameRules::ClearScavengeScores"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules19ClearScavengeScoresEb"
				"mac"		"@_ZN16CTerrorGameRules19ClearScavengeScoresEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x33\x2A\x8B\x2A\x33\x2A\x8D\x2A\x2A\x39"
						/* ? ? ? ? ? ? 57 33 ? 8B ? 33 ? 8D ? ? 39 */
			}

			/**
			 * CTerrorGameRules::ClearTeamScores(bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirector::OnServerShutdown" function.
			 * 2. The third function call in "CDirector::OnServerShutdown" should be this function.
			 **/
			"CTerrorGameRules::ClearTeamScores"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules15ClearTeamScoresEb"
				"mac"		"@_ZN16CTerrorGameRules15ClearTeamScoresEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x33\x2A\x8B\x2A\xF3"
						/* ? ? ? ? ? ? ? 53 56 57 33 ? 8B ? F3 */
			}

			/**
			 * CTerrorGameRules::FastGetSurvivorSet()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorGameRules::GetSurvivorSet" function.
			 * 2. One of the functions that calls "CTerrorGameRules::GetSurvivorSet" should be this function.
			 **/
			"CTerrorGameRules::FastGetSurvivorSet"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules18FastGetSurvivorSetEv"
				"mac"		"@_ZN16CTerrorGameRules18FastGetSurvivorSetEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\xA3\x2A\x2A\x2A\x2A\xC3"
						/* ? ? ? ? ? ? ? 75 ? E8 ? ? ? ? A3 ? ? ? ? C3 */
			}

			/**
			 * CTerrorGameRules::GetMaxHumanPlayers()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGameRules::`vftable'" to jump to the "CTerrorGameRules" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGameRules::GetMaxHumanPlayers"
			{
				"library"	"server"
				"linux"		"@_ZNK16CTerrorGameRules18GetMaxHumanPlayersEv"
				"mac"		"@_ZNK16CTerrorGameRules18GetMaxHumanPlayersEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\xB8"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B 0D ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? 6A ? 68 ? ? ? ? 8B ? E8 ? ? ? ? 85 ? B8 */
			}

			/**
			 * CTerrorGameRules::GetMissionCurrentMap(KeyValues **)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::GetMissionVersusBossSpawning" function.
			 * 2. The first function call in "CDirectorVersusMode::GetMissionVersusBossSpawning" should be this function.
			 **/
			"CTerrorGameRules::GetMissionCurrentMap"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules20GetMissionCurrentMapEPP9KeyValues"
				"mac"		"@_ZN16CTerrorGameRules20GetMissionCurrentMapEPP9KeyValues"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\xC7\x07\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x5E\x5D\xC3\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x57\x56\xFF\x2A\x8B"
						/* ? ? ? ? ? ? ? ? 85 ? 74 ? C7 07 ? ? ? ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? 8B ? 8B ? 8B ? ? 6A ? FF ? 8B ? 85 ? 75 ? 5F 5E 5D C3 8B 0D ? ? ? ? 8B ? 8B ? ? 57 56 FF ? 8B */
			}

			/**
			 * CTerrorGameRules::GetMissionFirstMap(KeyValues**)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Game/chapter" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::GetMissionFirstMap"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules18GetMissionFirstMapEPP9KeyValues"
				"mac"		"@_ZN16CTerrorGameRules18GetMissionFirstMapEPP9KeyValues"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\xC7\x07\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x5E\x5D\xC3\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x57\x56\xFF\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? ? ? 85 ? 74 ? C7 07 ? ? ? ? 8B 0D ? ? ? ? 8B ? 8B ? ? FF ? 8B ? 8B ? 8B ? ? 6A ? FF ? 8B ? 85 ? 75 ? 5F 5E 5D C3 8B 0D ? ? ? ? 8B ? 8B ? ? 57 56 FF ? 6A ? 68 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CTerrorGameRules::GetMissionInfo()
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: Director: Finale state = FINALE_HORDE_ATTACK_1\n" string.
			 * 2. Both functions that reference the string call this function.
			 * 3. The first function call below the string should be this function.
			 **/
			"CTerrorGameRules::GetMissionInfo"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules14GetMissionInfoEv"
				"mac"		"@_ZN16CTerrorGameRules14GetMissionInfoEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x56\xFF\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x75\x2A\x5E"
						/* ? ? ? ? ? ? ? ? ? ? 8B ? 8B ? ? 56 FF ? 8B ? 8B ? 8B ? ? 6A ? FF ? 8B ? 85 ? 75 ? 5E */
			}

			/**
			 * CTerrorGameRules::GetNumChaptersForMissionAndMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Modes/%s" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorGameRules::GetNumChaptersForMissionAndMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules31GetNumChaptersForMissionAndModeEv"
				"mac"		"@_ZN16CTerrorGameRules31GetNumChaptersForMissionAndModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x83\x3D\x2A\x2A\x2A\x2A\x2A\x75"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 83 3D ? ? ? ? ? 75 */
			}

			/**
			 * CTerrorGameRules::GetSurvivorSet()
			 *
			 * How to find on Windows:
			 * 1. Search for the "survivor_set" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorGameRules::GetSurvivorSet"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules14GetSurvivorSetEv"
				"mac"		"@_ZN16CTerrorGameRules14GetSurvivorSetEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x53\x56\xBB\x2A\x2A\x2A\x2A\xFF"
						/* ? ? ? ? ? ? ? ? ? ? 8B ? 8B ? ? 53 56 BB ? ? ? ? FF */
			}

			/**
			 * CTerrorGameRules::GetTeamScore(int, bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::EndVersusModeRound" function.
			 * 2. Click on the function that is three function calls above the "versus_match_finished" string to go to "CDirectorVersusMode::UpdateCampaignScores".
			 * 3. The first function call in "CDirectorVersusMode::UpdateCampaignScores" should be this function.
			 **/
			"CTerrorGameRules::GetTeamScore"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules12GetTeamScoreEib"
				"mac"		"@_ZN16CTerrorGameRules12GetTeamScoreEib"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x7F\x2A\x33\x2A\x5D\xC2\x2A\x2A\x80"
						/* ? ? ? ? ? ? 85 ? 7F ? 33 ? 5D C2 ? ? 80 */
			}

			/**
			 * CTerrorGameRules::GetVersusCompletion(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::EndVersusModeRound" function.
			 * 2. Click on the fourth function call with the value "1" passed to it to go to "CTerrorGameRules::RecomputeTeamScores".
			 * 3. Click on the first function call to go to "CTerrorGameRules::RecomputeVersusCompletion".
			 * 4. The function call directly above the third reference to the "FCVAR_NEVER_AS_STRING" string should be this function.
			 **/
			"CTerrorGameRules::GetVersusCompletion"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules19GetVersusCompletionEP13CTerrorPlayer"
				"mac"		"@_ZN16CTerrorGameRules19GetVersusCompletionEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8"
						/* ? ? ? ? ? ? 53 56 8B ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? E8 */
			}

			/**
			 * CTerrorGameRules::GetVersusCompletionPerCharacter(SurvivorCharacterType, int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "versus_marker_reached" string.
			 * 2. The string can only be found in "CDirectorVersusMode::UpdateMarkersReached".
			 * 3. The first function call in "CDirectorVersusMode::UpdateMarkersReached" should be this function.
			 **/
			"CTerrorGameRules::GetVersusCompletionPerCharacter"
			{
				"library"	"server"
				"linux"		"@_ZNK16CTerrorGameRules31GetVersusCompletionPerCharacterE21SurvivorCharacterTypei"
				"mac"		"@_ZNK16CTerrorGameRules31GetVersusCompletionPerCharacterE21SurvivorCharacterTypei"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x50\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8D"
						/* ? ? ? ? ? ? 56 50 8B ? E8 ? ? ? ? 8B ? ? 8D */
			}

			/**
			 * CTerrorGameRules::HasConfigurableDifficultySetting()
			 *
			 * How to find on Windows:
			 * 1. Search for the "hasdifficulty" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorGameRules::HasConfigurableDifficultySetting"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules32HasConfigurableDifficultySettingEv"
				"mac"		"@_ZN16CTerrorGameRules32HasConfigurableDifficultySettingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\xE8"
						/* ? ? ? ? ? ? 85 ? 75 ? E8 ? ? ? ? 84 ? 75 ? E8 */
			}

			/**
			 * CTerrorGameRules::HasPlayerControlledZombies()
			 *
			 * How to find on Windows:
			 * 1. Search for the "COuttroStats: Skip state changed. %d players, %d skips\n" string.
			 * 2. The string can only be found in "COuttroStats::InputSkipStateChanged".
			 * 3. The first function call in "COuttroStats::InputSkipStateChanged" should be this function.
			 **/
			"CTerrorGameRules::HasPlayerControlledZombies"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules26HasPlayerControlledZombiesEv"
				"mac"		"@_ZN16CTerrorGameRules26HasPlayerControlledZombiesEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x7E"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B 0D ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? 6A ? 68 ? ? ? ? 8B ? E8 ? ? ? ? 85 ? 7E */
			}

			/**
			 * CTerrorGameRules::IsCoopMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "coop" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::IsCoopMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules10IsCoopModeEv"
				"mac"		"@_ZN16CTerrorGameRules10IsCoopModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\xC3\xF7\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x2A\x3C"
						/* ? ? ? ? ? ? 85 ? 75 ? 32 ? C3 F7 ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? ? 3C */
			}

			/**
			 * CTerrorGameRules::IsGenericCooperativeMode()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorGameRules::IsRealismMode" function.
			 * 2. One of the functions that calls "CTerrorGameRules::IsRealismMode" should be this function.
			 **/
			"CTerrorGameRules::IsGenericCooperativeMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules24IsGenericCooperativeModeEv"
				"mac"		"@_ZN16CTerrorGameRules24IsGenericCooperativeModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x75\x2A\xE8\x2A\x2A\x2A\x2A\x84\xC0\x75\x2A\x33\xC0\xC3\xB8\x01\x00\x00\x00\xC3\x2A\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? 75 ? E8 ? ? ? ? 84 C0 75 ? 33 C0 C3 B8 01 00 00 00 C3 ? ? ? ? ? 8B */
			}

			/**
			 * CTerrorGameRules::IsInIntro()
			 *
			 * How to find on Windows:
			 * 1. Find the "CTerrorPlayerAnimState::DoAnimationEvent" function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayerAnimState::`vftable'" to jump to the "CTerrorPlayerAnimState" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the "CTerrorPlayerAnimState::DoAnimationEvent" function.
			 * 5. Look for the "CTerrorPlayerAnimState::DoAnimationEvent" function in the Windows binary.
			 * 6. The first function call in "CTerrorPlayerAnimState::DoAnimationEvent" should be this function.
			 **/
			"CTerrorGameRules::IsInIntro"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules9IsInIntroEv"
				"mac"		"@_ZN16CTerrorGameRules9IsInIntroEv"
				"windows"	"\x8A\x81\x44\x04\x00\x00\xC3\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x55"
						/* 8A 81 44 04 00 00 C3 ? ? ? ? ? ? ? ? ? 55 */
			}

			/**
			 * CTerrorGameRules::IsMissionFinalMap()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Game/chapter" string.
			 * 2. One of the functions that references that string should be this function.
			 * 3. This function references the string twice.
			 **/
			"CTerrorGameRules::IsMissionFinalMap"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules17IsMissionFinalMapEv"
				"mac"		"@_ZN16CTerrorGameRules17IsMissionFinalMapEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x56\xFF\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x75\x2A\xB0"
						/* ? ? ? ? ? ? 8B ? 8B ? ? 56 FF ? 8B ? 8B ? 8B ? ? 6A ? FF ? 8B ? 85 ? 75 ? B0 */
			}

			/**
			 * CTerrorGameRules::IsRealismMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "realism" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::IsRealismMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules13IsRealismModeEv"
				"mac"		"@_ZN16CTerrorGameRules13IsRealismModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\xC3\xF7\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x2A\x84"
						/* ? ? ? ? ? ? 85 ? 75 ? 32 ? C3 F7 ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? ? 84 */
			}

			/**
			 * CTerrorGameRules::IsScavengeMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "scavenge" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::IsScavengeMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules14IsScavengeModeEv"
				"mac"		"@_ZN16CTerrorGameRules14IsScavengeModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\xC3\xF7\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x2A\x58"
						/* ? ? ? ? ? ? 85 ? 75 ? 32 ? C3 F7 ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? ? 58 */
			}

			/**
			 * CTerrorGameRules::IsSurvivalMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "survival" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::IsSurvivalMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules14IsSurvivalModeEv"
				"mac"		"@_ZN16CTerrorGameRules14IsSurvivalModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\xC3\xF7\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x2A\x78"
						/* ? ? ? ? ? ? 85 ? 75 ? 32 ? C3 F7 ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? ? 78 */
			}

			/**
			 * CTerrorGameRules::IsVersusMode()
			 *
			 * How to find on Windows:
			 * 1. Search for the "versus" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorGameRules::IsVersusMode"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules12IsVersusModeEv"
				"mac"		"@_ZN16CTerrorGameRules12IsVersusModeEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x32\x2A\xC3\xF7\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x2A\x70"
						/* ? ? ? ? ? ? 85 ? 75 ? 32 ? C3 F7 ? ? ? ? ? ? ? ? ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? ? 70 */
			}

			/**
			 * CTerrorGameRules::RecordInfectedDamageForVersus(int)
			 *
			 * How to find on Windows:
			 * 1. Find the "CTerrorGameRules::TrackPlayerZombieDamage" function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGameRules::`vftable'" to jump to the "CTerrorGameRules" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the "CTerrorGameRules::TrackPlayerZombieDamage" function.
			 * 5. Look for the "CTerrorGameRules::TrackPlayerZombieDamage" function in the Windows binary.
			 * 6. The only function call in "CTerrorGameRules::TrackPlayerZombieDamage" should be this function.
			 **/
			"CTerrorGameRules::RecordInfectedDamageForVersus"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules29RecordInfectedDamageForVersusEi"
				"mac"		"@_ZN16CTerrorGameRules29RecordInfectedDamageForVersusEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x74\x2A\xB8\x2A\x2A\x2A\x2A\xEB\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x7F\x2A\xBF\x2A\x2A\x2A\x2A\xEB\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x33\x2A\x84\x2A\x0F\x2A\x2A\x8D\x2A\x2A\x8B\xB4\x2A\x2A\x2A\x2A\x2A\x03"
						/* ? ? ? ? ? ? ? ? ? ? ? ? ? 53 56 57 8B ? 74 ? B8 ? ? ? ? EB ? A1 ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 8B 0D ? ? ? ? 8B ? 50 8B ? ? FF ? 85 ? 74 ? 6A ? 68 ? ? ? ? 8B ? E8 ? ? ? ? 85 ? 7F ? BF ? ? ? ? EB ? 8B 0D ? ? ? ? E8 ? ? ? ? 33 ? 84 ? 0F ? ? 8D ? ? 8B B4 ? ? ? ? ? 03 */
			}

			/**
			 * CTerrorGameRules::ResetRoundNumber()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirector::RestartScenarioFromVote" function.
			 * 2. One of the functions that calls "CDirector::RestartScenarioFromVote" should be "CDirector::Rematch" (called twice).
			 * 3. This function is only called somewhere inside "CDirector::Rematch".
			 **/
			"CTerrorGameRules::ResetRoundNumber"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules16ResetRoundNumberEv"
				"mac"		"@_ZN16CTerrorGameRules16ResetRoundNumberEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xE8\x2A\x2A\x2A\x2A\xC7\x86\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x5E\xC3\x2A\x2A\x2A\x55"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? E8 ? ? ? ? C7 86 ? ? ? ? ? ? ? ? 5E C3 ? ? ? 55 */
			}

			/**
			 * CTerrorGameRules::SetCampaignScores(int, int)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorVersusMode::EndVersusModeRound" function.
			 * 2. Click on the function that is three function calls above the "versus_match_finished" string to go to "CDirectorVersusMode::UpdateCampaignScores".
			 * 3. The last function call in "CDirectorVersusMode::UpdateCampaignScores" should be this function.
			 **/
			"CTerrorGameRules::SetCampaignScores"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules17SetCampaignScoresEii"
				"mac"		"@_ZN16CTerrorGameRules17SetCampaignScoresEii"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x39\xBE\x2A\x2A\x2A\x2A\x74\x2A\xE8\x2A\x2A\x2A\x2A\x89\xBE\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? 8B ? 39 BE ? ? ? ? 74 ? E8 ? ? ? ? 89 BE ? ? ? ? 8B */
			}

			/**
			 * CTerrorGameRules::SetRoundEndTime(float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CDirectorScavengeMode::EndScavengeRound" function.
			 * 2. The first function call in "CDirectorScavengeMode::EndScavengeRound" should be this function.
			 **/
			"CTerrorGameRules::SetRoundEndTime"
			{
				"library"	"server"
				"linux"		"@_ZN16CTerrorGameRules15SetRoundEndTimeEf"
				"mac"		"@_ZN16CTerrorGameRules15SetRoundEndTimeEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x2A\x9F\x57\xF6"
						/* ? ? ? ? ? ? F3 0F ? ? ? ? ? ? 0F ? ? ? 9F 57 F6 */
			}

			/**
			 * CTerrorGun::EquipSecondWeapon()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "Player.PickupWeapon" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorGun::`vftable'" to jump to the "CTerrorGun" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorGun::EquipSecondWeapon"
			{
				"library"	"server"
				"linux"		"@_ZN10CTerrorGun17EquipSecondWeaponEv"
				"mac"		"@_ZN10CTerrorGun17EquipSecondWeaponEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x74\x2A\x32\x2A\x5E\x8B"
						/* ? ? ? ? ? ? 56 8B ? 80 BE ? ? ? ? ? 74 ? 32 ? 5E 8B */
			}

			/**
			 * CTerrorGun::FireBullet()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "CTerrorGun::FireBullet HorizSpread"
			 * - "CTerrorGun::FireBullet VertSpread"
			 * - "m_iClip1 <= 0"
			 * - "IsFirePreventedUntilButtonRelease"
			 * - "IsHoldingFireButton() && !IsFullyAutomatic()"
			 **/
			"CTerrorGun::FireBullet"
			{
				"library"	"server"
				"linux"		"@_ZN10CTerrorGun10FireBulletEv"
				"mac"		"@_ZN10CTerrorGun10FireBulletEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x80"
						/* ? ? ? ? ? ? 53 56 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 80 */
			}

			/**
			 * CTerrorGun::GetRateOfFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGun::`vftable'" to jump to the "CTerrorGun" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGun::GetRateOfFire"
			{
				"library"	"server"
				"linux"		"@_ZNK10CTerrorGun13GetRateOfFireEv"
				"mac"		"@_ZNK10CTerrorGun13GetRateOfFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x0D"
						/* ? ? ? ? ? ? ? E8 ? ? ? ? 85 ? 74 ? 8B ? 8B ? 8B 82 ? ? ? ? FF ? 84 ? 74 ? 8B 0D */
			}

			/**
			 * CTerrorGun::Holster(CBaseCombatWeapon *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGun::`vftable'" to jump to the "CTerrorGun" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGun::Holster"
			{
				"library"	"server"
				"linux"		"@_ZN10CTerrorGun7HolsterEP17CBaseCombatWeapon"
				"mac"		"@_ZN10CTerrorGun7HolsterEP17CBaseCombatWeapon"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x74\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\xEB\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x81\x09\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x33\x2A\x66\x2A\x2A\x2A\xC6\x86\x2A\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 80 BE ? ? ? ? ? 74 ? 80 BE ? ? ? ? ? 74 ? 80 ? ? ? 74 ? 80 ? ? ? EB ? 8B ? ? 85 ? 74 ? 81 09 ? ? ? ? E8 ? ? ? ? 33 ? 66 ? ? ? C6 86 ? ? ? ? ? 8B */
			}

			/**
			 * CTerrorGun::Reload()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGun::`vftable'" to jump to the "CTerrorGun" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGun::Reload"
			{
				"library"	"server"
				"linux"		"@_ZN10CTerrorGun6ReloadEv"
				"mac"		"@_ZN10CTerrorGun6ReloadEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x83"
						/* ? ? ? ? ? ? 53 56 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B 83 */
			}

			/**
			 * CTerrorGun::ShouldUnzoom()
			 *
			 * How to find on Windows:
			 * 1. Search for the "weapon_zoom" string.
			 * 2. The string can only be found in "CTerrorGun::CycleZoom".
			 * 3. The fourth function call in "CTerrorGun::CycleZoom" should be this function.
			 **/
			"CTerrorGun::ShouldUnzoom"
			{
				"library"	"server"
				"linux"		"@_ZNK10CTerrorGun12ShouldUnzoomEv"
				"mac"		"@_ZNK10CTerrorGun12ShouldUnzoomEv"
				"windows"	"\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x32\x2A\x5E\xC3\x8B\x2A\xE8"
						/* 56 57 8B ? E8 ? ? ? ? 8B ? 85 ? 75 ? 5F 32 ? 5E C3 8B ? E8 */
			}

			/**
			 * CTerrorGun::Use(CBaseEntity *, CBaseEntity *, USE_TYPE, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorGun::`vftable'" to jump to the "CTerrorGun" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorGun::Use"
			{
				"library"	"server"
				"linux"		"@_ZN10CTerrorGun3UseEP11CBaseEntityS1_8USE_TYPEf"
				"mac"		"@_ZN10CTerrorGun3UseEP11CBaseEntityS1_8USE_TYPEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 56 57 8B ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CTerrorMeleeWeapon::DoMeleeSwing()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorMeleeWeapon::TestMeleeSwingCollision" function.
			 * 2. This function is the only one that calls that function.
			 **/
			"CTerrorMeleeWeapon::DoMeleeSwing"
			{
				"library"	"server"
				"linux"		"@_ZN18CTerrorMeleeWeapon12DoMeleeSwingEv"
				"mac"		"@_ZN18CTerrorMeleeWeapon12DoMeleeSwingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 53 56 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 83 */
			}

			/**
			 * CTerrorMeleeWeapon::Holster(CBaseCombatWeapon *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorMeleeWeapon::`vftable'" to jump to the "CTerrorMeleeWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorMeleeWeapon::Holster"
			{
				"library"	"server"
				"linux"		"@_ZN18CTerrorMeleeWeapon7HolsterEP17CBaseCombatWeapon"
				"mac"		"@_ZN18CTerrorMeleeWeapon7HolsterEP17CBaseCombatWeapon"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\xFF\x2A\x8B\x2A\x2A\x83\x2A\x2A\x75"
						/* ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? 57 FF ? 8B ? ? 83 ? ? 75 */
			}

			/**
			 * CTerrorMeleeWeapon::SecondaryAttack()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorMeleeWeapon::`vftable'" to jump to the "CTerrorMeleeWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorMeleeWeapon::SecondaryAttack"
			{
				"library"	"server"
				"linux"		"@_ZN18CTerrorMeleeWeapon15SecondaryAttackEv"
				"mac"		"@_ZN18CTerrorMeleeWeapon15SecondaryAttackEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F"
						/* ? ? ? ? ? ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? E8 ? ? ? ? 84 ? 0F */
			}

			/**
			 * CTerrorMeleeWeapon::StartMeleeSwing(CTerrorPlayer *, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "melee attack failed - !IsWeaponVisible()\n" or "melee attack failed - !player->CanAttack()\n" string.
			 * 2. The string can only be found in "CTerrorMeleeWeapon::PrimaryAttack".
			 * 3. This function should be two function calls above the string.
			 **/
			"CTerrorMeleeWeapon::StartMeleeSwing"
			{
				"library"	"server"
				"linux"		"@_ZN18CTerrorMeleeWeapon15StartMeleeSwingEP13CTerrorPlayerb"
				"mac"		"@_ZN18CTerrorMeleeWeapon15StartMeleeSwingEP13CTerrorPlayerb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x50\xB9\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? 8B 86 ? ? ? ? 50 B9 ? ? ? ? E8 ? ? ? ? 8B */
			}

			/**
			 * CTerrorMeleeWeapon::TestMeleeSwingCollision(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings:
			 * - "MeleeSlashSplatter"
			 * - "MeleeClubSplatter"
			 * - "bloodslash"
			 * 2. One of the functions that references any of these strings should be this function.
			 **/
			"CTerrorMeleeWeapon::TestMeleeSwingCollision"
			{
				"library"	"server"
				"linux"		"@_ZN18CTerrorMeleeWeapon23TestMeleeSwingCollisionERK6Vector"
				"mac"		"@_ZN18CTerrorMeleeWeapon23TestMeleeSwingCollisionERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x2A\x57\x89\x2A\x2A\xE8"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? ? 57 89 ? ? E8 */
			}

			/**
			 * CTerrorPlayer::AddUpgrade(SurvivorUpgradeType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s INVALID UPGRADE '%s'\n" string.
			 * 2. One of the functions that references that string should be "UpgradeAdd".
			 * 3. This function should be the last function call in "UpgradeAdd".
			 **/
			"CTerrorPlayer::AddUpgrade"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10AddUpgradeE19SurvivorUpgradeType"
				"mac"		"@_ZN13CTerrorPlayer10AddUpgradeE19SurvivorUpgradeType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x53\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 56 57 53 8B */
			}

			/**
			 * CTerrorPlayer::BecomeGhost(bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::CanBecomeGhost" function.
			 * 2. One of the functions that calls that function should be this function.
			 **/
			"CTerrorPlayer::BecomeGhost"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11BecomeGhostEb"
				"mac"		"@_ZN13CTerrorPlayer11BecomeGhostEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x53\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75"
						/* ? ? ? ? ? ? ? 56 53 8B ? E8 ? ? ? ? 84 ? 75 */
			}

			/**
			 * CTerrorPlayer::CanBecomeGhost(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ghost_spawn_time" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::CanBecomeGhost"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer14CanBecomeGhostEb"
				"mac"		"@_ZN13CTerrorPlayer14CanBecomeGhostEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? 56 57 8B ? E8 ? ? ? ? 83 */
			}

			/**
			 * CTerrorPlayer::CancelStagger()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnIncapacitatedAsSurvivor" function.
			 * 2. The third function call below the "%s is incapacitated" string should be this function.
			 **/
			"CTerrorPlayer::CancelStagger"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13CancelStaggerEv"
				"mac"		"@_ZN13CTerrorPlayer13CancelStaggerEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x57\x8D\xBE\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x8B\x2A\x2A\x8B\x2A\x8D\x2A\x2A\x57\xFF\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x0F\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x80\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\xEB\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x81\x09\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x33\x2A\x66\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x80\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\xEB\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x81\x09\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x33\x2A\x66\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x80\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\xEB\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x81\x09\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x33\x2A\x66\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? ? ? 0F 2E ? ? ? ? ? 57 8D BE ? ? ? ? 9F F6 ? ? 7B ? 8B ? ? 8B ? 8D ? ? 57 FF ? F3 0F ? ? ? ? ? ? F3 ? ? ? 0F ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7B ? 80 ? ? ? 74 ? 80 ? ? ? EB ? 8B ? ? 85 ? 74 ? 81 09 ? ? ? ? E8 ? ? ? ? 0F ? ? 33 ? 66 ? ? ? F3 0F ? ? ? ? ? ? F3 0F ? ? ? ? ? ? F3 0F ? ? ? ? ? ? F3 0F ? ? ? ? ? ? 0F ? ? 9F F6 ? ? 7B ? 80 ? ? ? 74 ? 80 ? ? ? EB ? 8B ? ? 85 ? 74 ? 81 09 ? ? ? ? E8 ? ? ? ? 0F ? ? 33 ? 66 ? ? ? F3 0F ? ? ? ? ? ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7A ? 0F 2E ? ? ? ? ? 9F F6 ? ? 7B ? 80 ? ? ? 74 ? 80 ? ? ? EB ? 8B ? ? 85 ? 74 ? 81 09 ? ? ? ? E8 ? ? ? ? 0F ? ? 33 ? 66 ? ? ? F3 0F ? ? ? ? ? ? F3 0F ? ? ? ? ? ? F3 0F ? ? ? ? ? ? 8B */
			}

			/**
			 * CTerrorPlayer::CheckFriendSightings()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "CTerrorPlayer::CheckFriendSightings"
			 * - "DeadCharacter:%s,Distance:%d"
			 * - "PlayerSeeDeadPlayer"
			 **/
			"CTerrorPlayer::CheckFriendSightings"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20CheckFriendSightingsEv"
				"mac"		"@_ZN13CTerrorPlayer20CheckFriendSightingsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x53\x56\x57\x33\x2A\x89\xBD\x2A\x2A\x2A\x2A\x89\xBD\x2A\x2A\x2A\x2A\x8B\x2A\x39\x2A\x2A\x74\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x57\x57\x57\x57\x8D\x8D\x2A\x2A\x2A\x2A\x51\x50\xFF\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x8B\x8D\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x85\x2A\x2A\x2A\x2A\x6A\x2A\x57\x68\x2A\x2A\x2A\x2A\x57\x89\x8D"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? A1 ? ? ? ? 53 56 57 33 ? 89 BD ? ? ? ? 89 BD ? ? ? ? 8B ? 39 ? ? 74 ? 8B ? ? 68 ? ? ? ? 8B ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 57 57 57 57 8D 8D ? ? ? ? 51 50 FF ? A1 ? ? ? ? 83 ? ? 8B 8D ? ? ? ? 8B ? ? 8B 85 ? ? ? ? 6A ? 57 68 ? ? ? ? 57 89 8D */
			}

			/**
			 * CTerrorPlayer::ChooseSurvivorCharacter(SurvivorCharacterType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "(SKIN) Survivor %s changed model from %s to %s via GetIntoGame\n" string.
			 * 2. The string can only be found in "CTerrorPlayer::GetIntoGame".
			 * 3. The third function call in "CTerrorPlayer::GetIntoGame" should be this function.
			 **/
			"CTerrorPlayer::ChooseSurvivorCharacter"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer23ChooseSurvivorCharacterE21SurvivorCharacterType"
				"mac"		"@_ZNK13CTerrorPlayer23ChooseSurvivorCharacterE21SurvivorCharacterType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x85"
						/* ? ? ? ? ? ? 53 56 57 8B ? E8 ? ? ? ? 8B ? ? 8B ? 85 */
			}

			/**
			 * CTerrorPlayer::CleanupPlayerState()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tongue letting go on death." string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::CleanupPlayerState"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18CleanupPlayerStateEv"
				"mac"		"@_ZN13CTerrorPlayer18CleanupPlayerStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x0F\x2A\x2A\x83\x2A\x2A\x56\x8B\x2A\xC7"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 0F ? ? 83 ? ? 56 8B ? C7 */
			}

			/**
			 * CTerrorPlayer::CullZombie()
			 *
			 * How to find on Windows:
			 * 1. Locate the "ZombieManager::ReplaceTank" function.
			 * 2. The third function call should be this function.
			 **/
			"CTerrorPlayer::CullZombie"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10CullZombieEv"
				"mac"		"@_ZN13CTerrorPlayer10CullZombieEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x57\x56"
						/* ? ? ? ? ? ? 56 8B ? 8B 0D ? ? ? ? 57 56 */
			}

			/**
			 * CTerrorPlayer::DoAnimationEvent(PlayerAnimEvent_t, int)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::DoAnimationEvent"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16DoAnimationEventE17PlayerAnimEvent_ti"
				"mac"		"@_ZN13CTerrorPlayer16DoAnimationEventE17PlayerAnimEvent_ti"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x83\x2A\x2A\x74\x2A\x8B\x8F"
						/* ? ? ? ? ? ? ? 57 8B ? 83 ? ? 74 ? 8B 8F */
			}

			/**
			 * CTerrorPlayer::Event_Killed(CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "charger_carry_kill"
			 * - "blood_bleedout"
			 * - "spitter_killed"
			 * - "SubjectIsA:%s,Distance:%f"
			 * - "DeadCharacter:"
			 * - ",SubjectTeam:Survivor"
			 * - "SurvivorDied"
			 * - "pounce_attempt_stopped"
			 * - "infected_explosive_barrel_kill"
			 * - "mulletTongue"
			 * - "charger_killed"
			 * - "charging"
			 * - "jockey_killed"
			 * - "boomer_exploded"
			 * - "splashedbile"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::Event_Killed"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer12Event_KilledERK15CTakeDamageInfo"
				"mac"		"@_ZN13CTerrorPlayer12Event_KilledERK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x56\x8B\x2A\x8B\x2A\x89\x85\x2A\x2A\x2A\x2A\x8B\x82\x2A\x2A\x2A\x2A\x57\xFF\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 56 8B ? 8B ? 89 85 ? ? ? ? 8B 82 ? ? ? ? 57 FF ? 8B ? 8B */
			}

			/**
			 * CTerrorPlayer::Extinguish()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::Extinguish"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10ExtinguishEv"
				"mac"		"@_ZN13CTerrorPlayer10ExtinguishEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x8B\xB7\x2A\x2A\x2A\x2A\x68"
						/* ? ? ? ? ? ? 53 56 57 8B ? 8B B7 ? ? ? ? 68 */
			}

			/**
			 * CTerrorPlayer::FindUseEntity(float, float, float, bool *, bool)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::FindUseEntity"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13FindUseEntityEfffPbb"
				"mac"		"@_ZN13CTerrorPlayer13FindUseEntityEfffPbb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x0F"
						/* ? ? ? ? ? ? ? ? E8 ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 0F */
			}

			/**
			 * CTerrorPlayer::FireBullet(Vector, QAngle const&, CSWeaponID, int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "CTerrorPlayer::FireBullet SpreadDir" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::FireBullet"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10FireBulletE6VectorRK6QAngle10CSWeaponIDi"
				"mac"		"@_ZN13CTerrorPlayer10FireBulletE6VectorRK6QAngle10CSWeaponIDi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x57\x8B\x2A\x50\x89"
						/* ? ? ? ? ? ? ? ? ? 8B ? ? 57 8B ? 50 89 */
			}

			/**
			 * CTerrorPlayer::Fling(Vector const&, PlayerAnimEvent_t, CBaseCombatCharacter*, float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "ThrowImpactedSurvivor" function.
			 * 2. The function call before the line where the "charger_impact" string is referenced should be this function.
			 **/
			"CTerrorPlayer::Fling"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer5FlingERK6Vector17PlayerAnimEvent_tP20CBaseCombatCharacterf"
				"mac"		"@_ZN13CTerrorPlayer5FlingERK6Vector17PlayerAnimEvent_tP20CBaseCombatCharacterf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x56\x8B\x2A\x2A\x57\x6A"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 56 8B ? ? 57 6A */
			}

			/**
			 * CTerrorPlayer::GetCrouchTopSpeed()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::GetRunTopSpeed" function.
			 * 2. One of the functions that calls "CTerrorPlayer::GetRunTopSpeed" should be this function.
			 **/
			"CTerrorPlayer::GetCrouchTopSpeed"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer17GetCrouchTopSpeedEv"
				"mac"		"@_ZNK13CTerrorPlayer17GetCrouchTopSpeedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x5E\xE9\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 5E E9 ? ? ? ? E8 ? ? ? ? 83 */
			}

			/**
			 * CTerrorPlayer::GetFlowDistance(TerrorNavArea::FlowType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "We see a victim!" string.
			 * 2. The second and third function calls below the string should be this function.
			 **/
			"CTerrorPlayer::GetFlowDistance"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer15GetFlowDistanceEN13TerrorNavArea8FlowTypeE"
				"mac"		"@_ZNK13CTerrorPlayer15GetFlowDistanceEN13TerrorNavArea8FlowTypeE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\xD9\x84"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 85 ? 74 ? 8B ? ? D9 84 */
			}

			/**
			 * CTerrorPlayer::GetPlayerByCharacter(SurvivorCharacterType)
			 *
			 * How to find on Windows:
			 * 1. Locate the "WitchAttack::GetVictim" function.
			 * 2. The only function call in "WitchAttack::GetVictim" should be this function.
			 **/
			"CTerrorPlayer::GetPlayerByCharacter"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20GetPlayerByCharacterE21SurvivorCharacterType"
				"mac"		"@_ZN13CTerrorPlayer20GetPlayerByCharacterE21SurvivorCharacterType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x75\x2A\x33\x2A\x8B\x2A\x5D\xC3\x50\xE8\x2A\x2A\x2A\x2A\x89"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 75 ? 33 ? 8B ? 5D C3 50 E8 ? ? ? ? 89 */
			}

			/**
			 * CTerrorPlayer::GetRunTopSpeed()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTongue::IsAbilityReadyToFire" function.
			 * 2. The first function call in "CTongue::IsAbilityReadyToFire" should be this function.
			 **/
			"CTerrorPlayer::GetRunTopSpeed"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer14GetRunTopSpeedEv"
				"mac"		"@_ZNK13CTerrorPlayer14GetRunTopSpeedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\xA1"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 74 ? A1 */
			}

			/**
			 * CTerrorPlayer::GetWalkTopSpeed()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::GetRunTopSpeed" function.
			 * 2. One of the functions that calls "CTerrorPlayer::GetRunTopSpeed" should be this function.
			 **/
			"CTerrorPlayer::GetWalkTopSpeed"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer15GetWalkTopSpeedEv"
				"mac"		"@_ZNK13CTerrorPlayer15GetWalkTopSpeedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x5E\xE9\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x50"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 5E E9 ? ? ? ? E8 ? ? ? ? 50 */
			}

			/**
			 * CTerrorPlayer::GiveActiveWeapon(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ThrowWeapon" function.
			 * 2. This function is the only one that calls that function.
			 **/
			"CTerrorPlayer::GiveActiveWeapon"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16GiveActiveWeaponEPS_"
				"mac"		"@_ZN13CTerrorPlayer16GiveActiveWeaponEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? ? ? ? 56 8B ? E8 ? ? ? ? 83 ? ? 0F 85 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 85 ? ? ? ? 53 */
			}

			/**
			 * CTerrorPlayer::GiveDefaultItems()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "AMMO_TYPE_PISTOL_MAGNUM" string.
			 * 2a. One of the functions that references that string should be this function.
			 * 3a. This function references the string twice.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::GiveDefaultItems"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16GiveDefaultItemsEv"
				"mac"		"@_ZN13CTerrorPlayer16GiveDefaultItemsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x88"
						/* ? ? ? ? ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 84 ? 0F 84 ? ? ? ? A1 ? ? ? ? 8B 88 */
			}

			/**
			 * CTerrorPlayer::GiveNamedItem(char const*, int, bool, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::GiveNamedItem"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13GiveNamedItemEPKcibP11CBaseEntity"
				"mac"		"@_ZN13CTerrorPlayer13GiveNamedItemEPKcibP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x89\x85\x2A\x2A\x2A\x2A\xC7"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 53 8B ? ? 56 8B ? 89 85 ? ? ? ? C7 */
			}

			/**
			 * CTerrorPlayer::GoAwayFromKeyboard()
			 *
			 * How to find on Windows:
			 * 1. Search for the "player_afk" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::GoAwayFromKeyboard"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18GoAwayFromKeyboardEv"
				"mac"		"@_ZN13CTerrorPlayer18GoAwayFromKeyboardEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 53 56 57 8B ? 8B ? 8B 90 ? ? ? ? 8B */
			}

			/**
			 * CTerrorPlayer::GrabVictimWithTongue(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tongue grab starting." string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::GrabVictimWithTongue"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20GrabVictimWithTongueEPS_"
				"mac"		"@_ZN13CTerrorPlayer20GrabVictimWithTongueEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x56\x8B\x2A\x57\x89\x2A\x2A\x0F\x85"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? A1 ? ? ? ? 83 ? ? ? 56 8B ? 57 89 ? ? 0F 85 */
			}

			/**
			 * CTerrorPlayer::Input_GoAwayFromKeyboard()
			 *
			 * Note: (Windows) This function is in-lined with the "go_away_from_keyboard" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "Go away from the keyboard so a bot will take over." string.
			 * 2. The string will have two references, with the second reference being passed to this function.
			 **/
			"CTerrorPlayer::Input_GoAwayFromKeyboard"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer24Input_GoAwayFromKeyboardEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x0F\x2A\x2A\xF7\x2A\x1B\x2A\x23\x2A\x5E"
						/* ? ? ? ? ? ? 8B ? 85 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 0F ? ? F7 ? 1B ? 23 ? 5E */
			}

			/**
			 * CTerrorPlayer::IsClassOverLimit(int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ConvertZombieClass" string.
			 * 2. The string can only be found in "CDirectorChallengeMode::ConvertZombieClass".
			 * 3. The only function that calls "CDirectorChallengeMode::ConvertZombieClass" should be "CTerrorPlayer::Spawn".
			 * 4. This function is called before "CDirectorChallengeMode::ConvertZombieClass" inside "CTerrorPlayer::Spawn".
			 **/
			"CTerrorPlayer::IsClassOverLimit"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16IsClassOverLimitEi"
				"mac"		"@_ZN13CTerrorPlayer16IsClassOverLimitEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x8B\x80"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? A1 ? ? ? ? 8B 80 */
			}

			/**
			 * CTerrorPlayer::IsDominatedBySpecialInfected()
			 *
			 * How to find on Windows:
			 * 1. Search for the "IsDominatedBySpecialInfected" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"CTerrorPlayer::IsDominatedBySpecialInfected"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer28IsDominatedBySpecialInfectedEv"
				"mac"		"@_ZNK13CTerrorPlayer28IsDominatedBySpecialInfectedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x83\x2A\x2A\x74"
						/* ? ? ? ? ? ? 56 8B ? 8B 86 ? ? ? ? 83 ? ? 74 ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 83 ? ? 74 */
			}

			/**
			 * CTerrorPlayer::IsInvulnerable()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorWeapon::OnHit" function.
			 * 2. The sixth function call below the "Tongue letting go for a melee." string should be this function.
			 * 3. This function is called in an if-statement with two other function calls.
			 **/
			"CTerrorPlayer::IsInvulnerable"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer14IsInvulnerableEv"
				"mac"		"@_ZNK13CTerrorPlayer14IsInvulnerableEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\xB0\x2A\x5E\xC3\xF3"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 84 ? 74 ? B0 ? 5E C3 F3 */
			}

			/**
			 * CTerrorPlayer::IsStaggering()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Looking toward breakable for melee swing" string.
			 * 2. The string can only be found in "SurvivorLocomotion::Update".
			 * 3. The fourth function call in "SurvivorLocomotion::Update" should be this function.
			 * 4. This function is called in an if-statement with three other function calls.
			 **/
			"CTerrorPlayer::IsStaggering"
			{
				"library"	"server"
				"linux"		"@_ZNK13CTerrorPlayer12IsStaggeringEv"
				"mac"		"@_ZNK13CTerrorPlayer12IsStaggeringEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\xB0\x2A\xC3\xE8"
						/* ? ? ? ? ? ? ? 74 ? B0 ? C3 E8 */
			}

			/**
			 * CTerrorPlayer::MaterializeFromGhost()
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s materialized from spawn mode as a %s\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::MaterializeFromGhost"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20MaterializeFromGhostEv"
				"mac"		"@_ZN13CTerrorPlayer20MaterializeFromGhostEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x50\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x50\x68\x2A\x2A\x2A\x2A\xE8"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 50 E8 ? ? ? ? 83 ? ? 50 8B ? 8B 90 ? ? ? ? 8B ? FF ? 50 68 ? ? ? ? E8 */
			}

			/**
			 * CTerrorPlayer::ModifyOrAppendCriteria(AI_CriteriaSet &)
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "InfectedState"
			 * - "Alert"
			 * - "Engaged"
			 * - "Normal"
			 * - "Coughing"
			 * - "OnFire"
			 * - "Incapacitated"
			 * - "HangingFromLedge"
			 * - "PounceVictim"
			 * - "HangingFromTongue"
			 * - "Sneaking"
			 * - "ActiveWeapon"
			 * - "InBattlefield"
			 * - "InCheckpoint"
			 * - "InStartArea"
			 * - "InSafeSpot"
			 * - "InRescueVehicle"
			 * - "Intensity"
			 * - "TimeAveragedIntensity"
			 * - "%ssKilled"
			 * - "ZombiesKilledWhileIncapacitated"
			 * - "CurrentHealth"
			 * - "CurrentTemporaryHealth"
			 * - "HasFirstAidKit"
			 * - "HasPainPills"
			 * - "HasGrenade"
			 * - "HasMolotov"
			 * - "IncapacitatedCount"
			 * - "OnThirdStrike"
			 * - "DistToGambler"
			 * - "DistToProducer"
			 * - "DistToCoach"
			 * - "DistToMechanic"
			 * - "DistToNamVet"
			 * - "DistToTeenGirl"
			 * - "DistToBiker"
			 * - "DistToManager"
			 * - "DistToClosestSurvivor"
			 * - "NumberInSafeSpot"
			 * - "NumberOutsideSafeSpot"
			 * - "ZombiePresentNormal"
			 * - "ZombiePresentSmoker"
			 * - "ZombiePresentBoomer"
			 * - "ZombiePresentHunter"
			 * - "ZombiePresentCharger"
			 * - "ZombiePresentWitch"
			 * - "ZombiePresentTank"
			 * - "l4d2_1"
			 * - "l4d2_2"
			 * - "l4d2_3"
			 * - "l4d2_4"
			 * - "l4d2_5"
			 * - "l4d2_6"
			 * - "l4d2_7"
			 * - "l4d2_8"
			 * - "l4d2_9"
			 * - "l4d2_10"
			 * - "l4d2_11"
			 * - "l4d2_12"
			 * - "l4d2_13"
			 * - "l4d2_14"
			 * - "InCombat"
			 * - "InCombatMusic"
			 * - "TimeSinceCombat"
			 * - "TimeSinceGroupInCombat"
			 * - "BeingJockeyed"
			 * - "BeingHealed"
			 * - "MovementSpeed"
			 * - "LowViolence"
			 * - "speaking"
			 * - "campaignrandomnum"
			 * - "introactor"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::ModifyOrAppendCriteria"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer22ModifyOrAppendCriteriaER14AI_CriteriaSet"
				"mac"		"@_ZN13CTerrorPlayer22ModifyOrAppendCriteriaER14AI_CriteriaSet"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x2A\x33"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? ? 33 */
			}

			/**
			 * CTerrorPlayer::ModifyOrAppendDerivedCriteria(AI_CriteriaSet &)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "dist_from_subject" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::ModifyOrAppendDerivedCriteria"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer29ModifyOrAppendDerivedCriteriaER14AI_CriteriaSet"
				"mac"		"@_ZN13CTerrorPlayer29ModifyOrAppendDerivedCriteriaER14AI_CriteriaSet"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x89"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 89 */
			}

			/**
			 * CTerrorPlayer::OnAdrenalineEnd()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tongue letting go on death." string.
			 * 2. This function is called somewhere towards the end of the function that references that string.
			 **/
			"CTerrorPlayer::OnAdrenalineEnd"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer15OnAdrenalineEndEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8D\xBE\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD8\x2A\x2A\x83\x2A\x2A\xD9\x2A\x2A\xD9"
						/* ? ? ? ? ? ? ? 57 8D BE ? ? ? ? 8B ? E8 ? ? ? ? D8 ? ? 83 ? ? D9 ? ? D9 */
			}

			/**
			 * CTerrorPlayer::OnAdrenalineUsed(float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s used adrenaline\n" string.
			 * 2. The string can only be found in "CItem_Adrenaline::CompleteUse".
			 * 3. The first function call in "CItem_Adrenaline::CompleteUse" should be this function.
			 **/
			"CTerrorPlayer::OnAdrenalineUsed"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16OnAdrenalineUsedEf"
				"mac"		"@_ZN13CTerrorPlayer16OnAdrenalineUsedEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8D\x9E\x2A\x2A\x2A\x2A\x57\x8B\x2A\xE8"
						/* ? ? ? ? ? ? 8B ? 8D 9E ? ? ? ? 57 8B ? E8 */
			}

			/**
			 * CTerrorPlayer::OnBeginChangeLevel(char const*)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "Saving %s for transition at %f %f %f\n" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnBeginChangeLevel"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18OnBeginChangeLevelEPKc"
				"mac"		"@_ZN13CTerrorPlayer18OnBeginChangeLevelEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? ? E8 ? ? ? ? 84 ? 0F 85 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 85 ? ? ? ? 53 */
			}

			/**
			 * CTerrorPlayer::OnEndChangeLevel()
			 *
			 * How to find on Windows:
			 * 1a. Search for any of the following strings (they can each only be found in this function):
			 * - "OnEndChangelevel %s(%d): %d saved players:\n"
			 * - "\t%s(%d), state %d\n"
			 * - "Skipping saved player %s(%d) - restore was already done\n"
			 * - "Skipping saved player %s(%d) - we're on %s and it's only valid for %s\n"
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnEndChangeLevel"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16OnEndChangeLevelEv"
				"mac"		"@_ZN13CTerrorPlayer16OnEndChangeLevelEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x0D"
						/* ? ? ? ? ? ? 53 56 57 8B ? E8 ? ? ? ? 8B ? ? 8B 0D */
			}

			/**
			 * CTerrorPlayer::OnEnterGhostState()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "spawnmode_bar" string.
			 * 2a. One of the functions that references that string should be this function.
			 * 3a. This function should also contain "data" and "zombieClass" strings.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnEnterGhostState"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer17OnEnterGhostStateEv"
				"mac"		"@_ZN13CTerrorPlayer17OnEnterGhostStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8D\x8E\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? 53 56 8B ? 8B 86 ? ? ? ? 8B ? ? 8D 8E ? ? ? ? 57 */
			}

			/**
			 * CTerrorPlayer::OnEnterIntroCameraState()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnEnterIntroCameraState"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer23OnEnterIntroCameraStateEv"
				"mac"		"@_ZN13CTerrorPlayer23OnEnterIntroCameraStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\xFF\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? 6A ? 68 ? ? ? ? FF ? 8B ? 8B 90 ? ? ? ? 6A */
			}

			/**
			 * CTerrorPlayer::OnFalling()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerZombie.Fall" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnFalling"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"mac"		"@_ZN13CTerrorPlayer9OnFallingEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? E8 ? ? ? ? 83 ? ? 0F */
			}

			/**
			 * CTerrorPlayer::OnHitByVomitJar(CBaseCombatCharacter*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnHitByVomitJar"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer15OnHitByVomitJarEP20CBaseCombatCharacter"
				"mac"		"@_ZN13CTerrorPlayer15OnHitByVomitJarEP20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F"
						/* ? ? ? ? ? ? 56 8B ? E8 ? ? ? ? 84 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F */
			}

			/**
			 * CTerrorPlayer::OnIncapacitatedAsSurvivor(CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "%s is incapacitated"
			 * - "PlayerIncapacitated"
			 * - ",IncapacitatedCharacter:"
			 * - "SurvivorIncapacitated"
			 **/
			"CTerrorPlayer::OnIncapacitatedAsSurvivor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer25OnIncapacitatedAsSurvivorERK15CTakeDamageInfo"
				"mac"		"@_ZN13CTerrorPlayer25OnIncapacitatedAsSurvivorERK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x6A"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 6A */
			}

			/**
			 * CTerrorPlayer::OnIncapacitatedAsTank(CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "deathEvent" or "HulkZombie.Die" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnIncapacitatedAsTank"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer21OnIncapacitatedAsTankERK15CTakeDamageInfo"
				"mac"		"@_ZN13CTerrorPlayer21OnIncapacitatedAsTankERK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x50\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74"
						/* ? ? ? ? ? ? ? 8B 8E ? ? ? ? E8 ? ? ? ? 50 8B ? E8 ? ? ? ? 84 ? 74 */
			}

			/**
			 * CTerrorPlayer::OnITExpired()
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerVomitExpired" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnITExpired"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11OnITExpiredEv"
				"mac"		"@_ZN13CTerrorPlayer11OnITExpiredEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2E\x2A\x2A\x2A\x2A\x2A\x8D\xB7\x2A\x2A\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x8B\x2A\x2A\x8B\x2A\x8D\x2A\x2A\x56\xFF\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x8B\x2A\x6A"
						/* ? ? ? ? ? ? ? ? ? ? ? ? 0F 2E ? ? ? ? ? 8D B7 ? ? ? ? 9F F6 ? ? 7B ? 8B ? ? 8B ? 8D ? ? 56 FF ? F3 0F ? ? ? ? ? ? F3 ? ? ? 8B ? 6A */
			}

			/**
			 * CTerrorPlayer::OnLadderDismount()
			 *
			 * How to find on Windows:
			 * 1. Search for the "CTerrorPlayer::PlayerRunCommand" string.
			 * 2. The string can only be found in "CTerrorPlayer::PlayerRunCommand".
			 * 3. The last function call in "CTerrorPlayer::PlayerRunCommand" should be this function.
			 **/
			"CTerrorPlayer::OnLadderDismount"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16OnLadderDismountEv"
				"mac"		"@_ZN13CTerrorPlayer16OnLadderDismountEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x84\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\xFF"
						/* ? ? ? ? ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 84 ? 74 ? 8B ? E8 ? ? ? ? 85 ? 74 ? 8B ? E8 ? ? ? ? 8B ? 8B ? 8B 82 ? ? ? ? FF */
			}

			/**
			 * CTerrorPlayer::OnLadderMount()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Player.Fall" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnLadderMount"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13OnLadderMountEv"
				"mac"		"@_ZN13CTerrorPlayer13OnLadderMountEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x6A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x50"
						/* ? ? ? ? ? ? 8B ? E8 ? ? ? ? 8B ? E8 ? ? ? ? 6A ? 8B ? E8 ? ? ? ? 8B ? E8 ? ? ? ? 50 */
			}

			/**
			 * CTerrorPlayer::OnLedgeGrabbed(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "PlayerLedgeHangStart"
			 * - "HangingCharacter:"
			 * - "SurvivorGrabbedLedge"
			 **/
			"CTerrorPlayer::OnLedgeGrabbed"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer14OnLedgeGrabbedERK6Vector"
				"mac"		"@_ZN13CTerrorPlayer14OnLedgeGrabbedERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 8B ? 8B ? 8B 90 ? ? ? ? 57 FF ? 84 ? 0F 84 ? ? ? ? 8B */
			}

			/**
			 * CTerrorPlayer::OnLeptOnSurvivor(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SurvivorJockeyed" or "SurvivorJockeyedOther" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnLeptOnSurvivor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16OnLeptOnSurvivorEPS_"
				"mac"		"@_ZN13CTerrorPlayer16OnLeptOnSurvivorEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x2A\x57\x8B\x2A\x0F\x85\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? 83 ? ? 83 ? ? ? 57 8B ? 0F 85 ? ? ? ? 56 */
			}

			/**
			 * CTerrorPlayer::OnLungeEnd()
			 *
			 * Note: (Windows) This function is in-lined with the "CLunge::UpdateAbility" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s ending a pounce\n" or "%s ending a lunge\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnLungeEnd"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10OnLungeEndEv"
				"mac"		"@_ZN13CTerrorPlayer10OnLungeEndEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? ? 0F 84 ? ? ? ? 8B 86 ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 57 */
			}

			/**
			 * CTerrorPlayer::OnPouncedOnSurvivor(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s pounced on %s, %d damage interrupts\n" or "Pounce by %s dealt %0.1f damage from a 2d distance of %.0f\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnPouncedOnSurvivor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer19OnPouncedOnSurvivorEPS_"
				"mac"		"@_ZN13CTerrorPlayer19OnPouncedOnSurvivorEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x56\x57\x8B"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? A1 ? ? ? ? 83 ? ? ? 56 57 8B */
			}

			/**
			 * CTerrorPlayer::OnPounceEnded()
			 *
			 * How to find on Windows:
			 * 1. Search for the "pounce_end" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnPounceEnded"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13OnPounceEndedEv"
				"mac"		"@_ZN13CTerrorPlayer13OnPounceEndedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x80\xBB\x2A\x2A\x2A\x2A\x2A\x56\x74"
						/* ? ? ? ? ? ? ? 80 BB ? ? ? ? ? 56 74 */
			}

			/**
			 * CTerrorPlayer::OnPreThinkGhostState()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnPreThinkGhostState"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20OnPreThinkGhostStateEv"
				"mac"		"@_ZN13CTerrorPlayer20OnPreThinkGhostStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x8B\x0D"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 8B 0D */
			}

			/**
			 * CTerrorPlayer::OnPummelEnded(bool, CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "charger_pummel_end" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnPummelEnded"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13OnPummelEndedEbPS_"
				"mac"		"@_ZN13CTerrorPlayer13OnPummelEndedEbPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\x57\x83\x2A\x2A\x0F"
						/* ? ? ? ? ? ? ? ? ? 53 56 8B ? 8B 86 ? ? ? ? 57 83 ? ? 0F */
			}

			/**
			 * CTerrorPlayer::OnRevived()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "ReviveType" or "RevivedByFriend" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnRevived"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer9OnRevivedEv"
				"mac"		"@_ZN13CTerrorPlayer9OnRevivedEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8"
						/* ? ? ? ? ? ? 53 56 8B ? 8B ? 8B 90 ? ? ? ? 57 FF ? 84 ? 0F 84 ? ? ? ? 8B ? E8 */
			}

			/**
			 * CTerrorPlayer::OnRevivedByDefibrillator(CTerrorPlayer*, CSurvivorDeathModel *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "RevivedByDefibrillator" or "RevivedByDefibrillatorDelayed" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnRevivedByDefibrillator"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer24OnRevivedByDefibrillatorEPS_P19CSurvivorDeathModel"
				"mac"		"@_ZN13CTerrorPlayer24OnRevivedByDefibrillatorEPS_P19CSurvivorDeathModel"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x8A\x86\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? 53 56 8B ? 8A 86 ? ? ? ? 57 */
			}

			/**
			 * CTerrorPlayer::OnRideEnded(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SurvivorJockeyEnded" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnRideEnded"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11OnRideEndedEPS_"
				"mac"		"@_ZN13CTerrorPlayer11OnRideEndedEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8D"
						/* ? ? ? ? ? ? 53 56 57 68 ? ? ? ? 8B ? E8 ? ? ? ? 8D */
			}

			/**
			 * CTerrorPlayer::OnShovedByPounceLanding(CTerrorPlayer*, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tongue letting go on getting bashed." string.
			 * 2. The string can only be found in "CTerrorPlayer::OnStunned".
			 * 3. One of the functions that calls "CTerrorPlayer::OnStunned" should be this function.
			 **/
			"CTerrorPlayer::OnShovedByPounceLanding"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer23OnShovedByPounceLandingEPS_b"
				"mac"		"@_ZN13CTerrorPlayer23OnShovedByPounceLandingEPS_b"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? 56 8B ? E8 ? ? ? ? 84 ? 0F 85 ? ? ? ? 57 */
			}

			/**
			 * CTerrorPlayer::OnShovedBySurvivor(CTerrorPlayer*, Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Survivor was lunged while %sfacing the hunter and %sbashing\n" string.
			 * 2. The string can only be found in one function.
			 * 3. The very last function call in the code block that comes after the line where that string is referenced should be this function.
			 **/
			"CTerrorPlayer::OnShovedBySurvivor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18OnShovedBySurvivorEPS_RK6Vector"
				"mac"		"@_ZN13CTerrorPlayer18OnShovedBySurvivorEPS_RK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x89"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 56 57 8B ? ? 8B ? 89 */
			}

			/**
			 * CTerrorPlayer::OnSlammedSurvivor(CTerrorPlayer*, bool, bool)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CCharge::HandleCustomCollision" function.
			 * 2. Look for a function call that passes four parameters, with the last parameters being "1" and "0".
			 * 3. That function should be this function.
			 **/
			"CTerrorPlayer::OnSlammedSurvivor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer17OnSlammedSurvivorEPS_bb"
				"mac"		"@_ZN13CTerrorPlayer17OnSlammedSurvivorEPS_bb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xD9\x2A\x56\x57\x6A\x2A\x51\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xF3"
						/* ? ? ? ? ? ? D9 ? 56 57 6A ? 51 D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? F3 */
			}

			/**
			 * CTerrorPlayer::OnStaggered(CBaseEntity*, Vector const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerShoved" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::OnStaggered"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11OnStaggeredEP11CBaseEntityPK6Vector"
				"mac"		"@_ZN13CTerrorPlayer11OnStaggeredEP11CBaseEntityPK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? 56 57 8B ? E8 ? ? ? ? 84 ? 0F 85 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CTerrorPlayer::OnStartCarryingVictim(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "charger_carry_start" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnStartCarryingVictim"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer21OnStartCarryingVictimEPS_"
				"mac"		"@_ZN13CTerrorPlayer21OnStartCarryingVictimEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x6A\x2A\x6A\x2A\x68\x2A\x2A\x2A\x2A\xFF\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x8B\x2A\x50\x8B\x2A\x2A\xFF\x2A\x8B\x2A\x50\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 8B ? 8B 0D ? ? ? ? 8B ? 8B ? ? 6A ? 6A ? 68 ? ? ? ? FF ? 8B ? 85 ? 74 ? 8B ? ? 8B 0D ? ? ? ? 8B ? 50 8B ? ? FF ? 8B ? 50 8B ? ? 68 ? ? ? ? 8B ? FF ? 8B ? ? 8B */
			}

			/**
			 * CTerrorPlayer::OnTakeDamage_Alive(CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::OnTakeDamage_Alive"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer18OnTakeDamage_AliveERK15CTakeDamageInfo"
				"mac"		"@_ZN13CTerrorPlayer18OnTakeDamage_AliveERK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x8B\x2A\x2A\x57\x83\x2A\x2A\x74"
						/* ? ? ? ? ? ? ? ? ? 53 8B ? ? 56 8B ? 8B ? ? 57 83 ? ? 74 */
			}

			/**
			 * CTerrorPlayer::OnVomitedUpon(CTerrorPlayer*, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "PlayerVomitInFace" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::OnVomitedUpon"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13OnVomitedUponEPS_b"
				"mac"		"@_ZN13CTerrorPlayer13OnVomitedUponEPS_b"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 53 56 57 8B ? E8 ? ? ? ? 84 ? 74 ? 8B ? 8B */
			}

			/**
			 * CTerrorPlayer::PlayerZombieAbortControl()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::PlayerZombieAbortControl"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer24PlayerZombieAbortControlEv"
				"mac"		"@_ZN13CTerrorPlayer24PlayerZombieAbortControlEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\xE8"
						/* ? ? ? ? ? ? 56 8B ? E8 ? ? ? ? 83 ? ? 0F 85 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? E8 */
			}

			/**
			 * CTerrorPlayer::PreThink()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "#L4D_idle_spectator" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::PreThink"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer8PreThinkEv"
				"mac"		"@_ZN13CTerrorPlayer8PreThinkEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xE8"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? E8 ? ? ? ? 8B ? E8 */
			}

			/**
			 * CTerrorPlayer::QueuePummelVictim(CTerrorPlayer*, float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnSlammedSurvivor" function.
			 * 2. The last function call in that function should be this function.
			 **/
			"CTerrorPlayer::QueuePummelVictim"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer17QueuePummelVictimEPS_f"
				"mac"		"@_ZN13CTerrorPlayer17QueuePummelVictimEPS_f"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x83"
						/* ? ? ? ? ? ? ? 56 57 8B ? 85 ? 74 ? 8B ? 8B ? ? 8B ? FF ? 8B ? 83 */
			}

			/**
			 * CTerrorPlayer::ReleaseTongueVictim(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tongue letting go because of damage." string.
			 * 2. This function should be two function calls below the string.
			 **/
			"CTerrorPlayer::ReleaseTongueVictim"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer19ReleaseTongueVictimEb"
				"mac"		"@_ZN13CTerrorPlayer19ReleaseTongueVictimEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x8B\x81"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? 8B 81 */
			}

			/**
			 * CTerrorPlayer::RemoveUpgrade(SurvivorUpgradeType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s INVALID UPGRADE '%s'\n" string.
			 * 2. One of the functions that references that string should be "UpgradeRemove".
			 * 3. This function should be the last function call in "UpgradeRemove".
			 **/
			"CTerrorPlayer::RemoveUpgrade"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13RemoveUpgradeE19SurvivorUpgradeType"
				"windows"	"\x55\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x6A\x2A\xFF\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x5D\xFF\x2A\x5D\xC2\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x55"
						/* 55 8B ? 8B ? 8B ? ? ? ? ? 6A ? FF ? 85 ? 74 ? 8B ? 8B ? 8B ? ? ? ? ? 5D FF ? 5D C2 ? ? ? ? ? ? ? ? ? ? ? ? ? ? 55 */
			}

			/**
			 * CTerrorPlayer::ReplaceWithBot(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "player_bot_replace" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::ReplaceWithBot"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer14ReplaceWithBotEb"
				"mac"		"@_ZN13CTerrorPlayer14ReplaceWithBotEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\x80"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 74 ? 80 */
			}

			/**
			 * CTerrorPlayer::ResetCheckpointStats()
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::RoundRespawn" function.
			 * 2. The third function call should be this function.
			 **/
			"CTerrorPlayer::ResetCheckpointStats"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer20ResetCheckpointStatsEv"
				"mac"		"@_ZN13CTerrorPlayer20ResetCheckpointStatsEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x39\x9E\x2A\x2A\x2A\x2A\x74"
						/* ? ? ? ? ? ? 57 39 9E ? ? ? ? 74 */
			}

			/**
			 * CTerrorPlayer::RoundRespawn()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::RoundRespawn"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer12RoundRespawnEv"
				"mac"		"@_ZN13CTerrorPlayer12RoundRespawnEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xC6\x86"
						/* ? ? ? ? ? ? ? ? E8 ? ? ? ? 84 ? 75 ? 8B ? E8 ? ? ? ? C6 86 */
			}

			/**
			 * CTerrorPlayer::SelectWeightedSequence(Activity)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "Hulk_RunAttack1_Gesture" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::SelectWeightedSequence"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer22SelectWeightedSequenceE8Activity"
				"mac"		"@_ZN13CTerrorPlayer22SelectWeightedSequenceE8Activity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x81\xFF\x2A\x2A\x2A\x2A\x75"
						/* ? ? ? ? ? ? ? ? 8B ? 81 FF ? ? ? ? 75 */
			}

			/**
			 * CTerrorPlayer::SetBecomeGhostAt(float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::CanBecomeGhost" function.
			 * 2. This function should be two function calls above the "ghost_spawn_time" string.
			 **/
			"CTerrorPlayer::SetBecomeGhostAt"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16SetBecomeGhostAtEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x6A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\x68"
						/* ? ? ? ? ? ? ? ? 56 6A ? 68 ? ? ? ? 8B ? 68 */
			}

			/**
			 * CTerrorPlayer::SetCharacter(SurvivorCharacterType)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::SetCharacter"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer12SetCharacterE21SurvivorCharacterType"
				"mac"		"@_ZN13CTerrorPlayer12SetCharacterE21SurvivorCharacterType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x74"
						/* ? ? ? ? ? ? ? E8 ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 84 ? 0F 84 ? ? ? ? 83 BE ? ? ? ? ? 74 */
			}

			/**
			 * CTerrorPlayer::SetClass(ZombieClassType)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::SetClass"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer8SetClassE15ZombieClassType"
				"mac"		"@_ZN13CTerrorPlayer8SetClassE15ZombieClassType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x40"
						/* ? ? ? ? ? ? E8 ? ? ? ? 83 ? ? 0F 85 ? ? ? ? A1 ? ? ? ? 40 */
			}

			/**
			 * CTerrorPlayer::SetHealthBuffer(float)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnRevived" function.
			 * 2. This function is four function calls above the "Player.Heartbeat" string.
			 **/
			"CTerrorPlayer::SetHealthBuffer"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer15SetHealthBufferEf"
				"mac"		"@_ZN13CTerrorPlayer15SetHealthBufferEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x0F\x2A\x2A\x56\x57\x8B\x2A\x77"
						/* ? ? ? ? ? ? ? ? 0F ? ? 0F ? ? 56 57 8B ? 77 */
			}

			/**
			 * CTerrorPlayer::SetNextShoveTime(float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::SetNextShoveTime"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16SetNextShoveTimeEf"
				"mac"		"@_ZN13CTerrorPlayer16SetNextShoveTimeEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x0F\x2F\x2A\x2A\x2A\x2A\x2A\x76\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x9F\xF6\x2A\x2A\x7B\x2A\x80\x2A\x2A\x2A\x74\x2A\x80\x2A\x2A\x2A\xF3\x0F\x2A\x2A\x2A\x2A\x2A\x2A\x5E\x5D"
						/* ? ? ? ? ? ? ? ? 56 8B ? 0F 2F ? ? ? ? ? 76 ? F3 0F ? ? ? ? ? ? 0F ? ? 9F F6 ? ? 7B ? 80 ? ? ? 74 ? 80 ? ? ? F3 0F ? ? ? ? ? ? 5E 5D */
			}

			/**
			 * CTerrorPlayer::SetPreSpawnClass(ZombieClassType)
			 *
			 * How to find on Windows:
			 * 1. Search for the "tank_frustrated" string.
			 * 2. The string can only be found in "CTerrorPlayer::UpdateZombieFrustration".
			 * 3. The fourth to last function call in "CTerrorPlayer::UpdateZombieFrustration" with the value "3" passed to it should be this function.
			 **/
			"CTerrorPlayer::SetPreSpawnClass"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16SetPreSpawnClassE15ZombieClassType"
				"mac"		"@_ZN13CTerrorPlayer16SetPreSpawnClassE15ZombieClassType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\xF1\x39\xBE\xB8"
						/* ? ? ? ? ? ? ? ? 8B F1 39 BE B8 */
			}

			/**
			 * CTerrorPlayer::StartReviving(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "Tongue letting because victim is being revived"
			 * - "%s starts reviving %s"
			 * - "revive_begin"
			 * - "PlayerHeal"
			 * - "PlayerLedgeSaveCritical"
			 * - "PlayerReviveFriendCritical"
			 * - "PlayerLedgeSave"
			 * - "PlayerReviveFriend"
			 **/
			"CTerrorPlayer::StartReviving"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer13StartRevivingEPS_"
				"mac"		"@_ZN13CTerrorPlayer13StartRevivingEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x8B\x83\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 8B 83 ? ? ? ? 56 */
			}

			/**
			 * CTerrorPlayer::StopBeingRevived(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Player.StopVoice" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::StopBeingRevived"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16StopBeingRevivedEb"
				"mac"		"@_ZN13CTerrorPlayer16StopBeingRevivedEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x51\xD9\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x87"
						/* ? ? ? ? ? ? 57 51 D9 ? ? 8B ? E8 ? ? ? ? 8B 87 */
			}

			/**
			 * CTerrorPlayer::StopRevivingSomeone(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "revive_end"
			 * - "LedgeHang"
			 * - "ReviveMeInterrupted"
			 **/
			"CTerrorPlayer::StopRevivingSomeone"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer19StopRevivingSomeoneEb"
				"mac"		"@_ZN13CTerrorPlayer19StopRevivingSomeoneEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x51\xD9\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? 53 56 51 D9 ? ? 8B */
			}

			/**
			 * CTerrorPlayer::StopTrackedSound(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnLadderMount" function.
			 * 2. The first function call in "CTerrorPlayer::OnLadderMount" should be this function.
			 **/
			"CTerrorPlayer::StopTrackedSound"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer16StopTrackedSoundEPKc"
				"mac"		"@_ZN13CTerrorPlayer16StopTrackedSoundEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x85\x2A\x74\x2A\x80"
						/* ? ? ? ? ? ? 53 56 57 8B ? 85 ? 74 ? 80 */
			}

			/**
			 * CTerrorPlayer::TakeOverBot(bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "[TAKEOVER]: %s (%d) is trying to take over %s\n" or "[TAKEOVER]: %s (%d) possessed %s\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::TakeOverBot"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11TakeOverBotEb"
				"mac"		"@_ZN13CTerrorPlayer11TakeOverBotEb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x8D"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 8D */
			}

			/**
			 * CTerrorPlayer::TakeOverZombieBot(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "bot_player_replace" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::TakeOverZombieBot"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer17TakeOverZombieBotEPS_"
				"mac"		"@_ZN13CTerrorPlayer17TakeOverZombieBotEPS_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x80\xBB"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 80 BB */
			}

			/**
			 * CTerrorPlayer::ThrowWeapon(CTerrorWeapon *, CTerrorPlayer*, float, char const*, char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ValveBiped.Bip01_R_Hand" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::ThrowWeapon"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11ThrowWeaponEP13CTerrorWeaponPS_fPKcS4_"
				"mac"		"@_ZN13CTerrorPlayer11ThrowWeaponEP13CTerrorWeaponPS_fPKcS4_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 8B ? ? F3 ? ? ? ? 56 */
			}

			/**
			 * CTerrorPlayer::TrackSound(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::OnRevived" function.
			 * 2. This function is called inside that function with the string "Player.Heartbeat" passed to it.
			 * 3. The second function call that references that string should be this function.
			 **/
			"CTerrorPlayer::TrackSound"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer10TrackSoundEPKc"
				"mac"		"@_ZN13CTerrorPlayer10TrackSoundEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x57\x8B\x2A\x2A\x85\x2A\x74\x2A\x80"
						/* ? ? ? ? ? ? 56 57 8B ? ? 85 ? 74 ? 80 */
			}

			/**
			 * CTerrorPlayer::UpdatePounce()
			 *
			 * How to find on Windows:
			 * 1. Search for the "HunterZombie.Pounce.shred" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CTerrorPlayer::UpdatePounce"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer12UpdatePounceEv"
				"mac"		"@_ZN13CTerrorPlayer12UpdatePounceEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x50"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? E8 ? ? ? ? 50 */
			}

			/**
			 * CTerrorPlayer::UpdateZombieFrustration()
			 *
			 * How to find on Windows:
			 * 1. Search for the "tank_frustrated" string.
			 * 2. The string can only be found in this function.
			 **/
			"CTerrorPlayer::UpdateZombieFrustration"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer23UpdateZombieFrustrationEv"
				"mac"		"@_ZN13CTerrorPlayer23UpdateZombieFrustrationEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x2A\x56\x8B\x2A\x0F\x84\x2A\x2A\x2A\x2A\xE8"
						/* ? ? ? ? ? ? ? ? 83 ? ? 83 ? ? ? 56 8B ? 0F 84 ? ? ? ? E8 */
			}

			/**
			 * CTerrorPlayer::Vocalize(char const*, float, float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "leak_rectum" string.
			 * 2. The function call that passes the "BoomerZombie.Warn" string should be this function.
			 **/
			"CTerrorPlayer::Vocalize"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer8VocalizeEPKcff"
				"mac"		"@_ZN13CTerrorPlayer8VocalizeEPKcff"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xD9\x2A\xF3\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? D9 ? F3 ? ? ? ? 0F ? ? 56 */
			}

			/**
			 * CTerrorPlayer::WarpToValidPositionIfStuck()
			 *
			 * How to find on Windows:
			 * 1. Search for the "AddPlayer" or "RemovePlayer" string.
			 * 2. The string can only be found in "SurvivorReplacement::Restore".
			 * 3. The fourth to last function call in "SurvivorReplacement::Restore" should be this function.
			 **/
			"CTerrorPlayer::WarpToValidPositionIfStuck"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer26WarpToValidPositionIfStuckEv.part.198"
				"mac"		"@_ZN13CTerrorPlayer26WarpToValidPositionIfStuckEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x80\xBE\x2A\x2A\x2A\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 8B ? 80 BE ? ? ? ? ? 0F 85 ? ? ? ? 8B ? 8B 90 ? ? ? ? 53 */
			}

			/**
			 * CTerrorPlayer::Weapon_Drop(CBaseCombatWeapon *, Vector const*, Vector const*)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "weapon_drop" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CTerrorPlayer::`vftable'" to jump to the "CTerrorPlayer" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CTerrorPlayer::Weapon_Drop"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorPlayer11Weapon_DropEP17CBaseCombatWeaponPK6VectorS4_"
				"mac"		"@_ZN13CTerrorPlayer11Weapon_DropEP17CBaseCombatWeaponPK6VectorS4_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x50\x51"
						/* ? ? ? ? ? ? 53 56 57 8B ? ? 8B ? 8B ? ? 50 51 */
			}

			/**
			 * CTerrorWeapon::CanDeployFor(CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeapon::`vftable'" to jump to the "CTerrorWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeapon::CanDeployFor"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorWeapon12CanDeployForEP13CTerrorPlayer"
				"mac"		"@_ZN13CTerrorWeapon12CanDeployForEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\xE8"
						/* ? ? ? ? ? ? ? 57 8B ? 85 ? 0F 84 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 8B ? E8 */
			}

			/**
			 * CTerrorWeapon::OnHit(CGameTrace &, Vector const&, bool)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeapon::`vftable'" to jump to the "CTerrorWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeapon::OnHit"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorWeapon5OnHitER10CGameTraceRK6Vectorb"
				"mac"		"@_ZN13CTerrorWeapon5OnHitER10CGameTraceRK6Vectorb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x80\x2A\x2A\x2A\x89\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? 80 ? ? ? 89 ? ? 0F 84 ? ? ? ? 8B ? ? 57 */
			}

			/**
			 * CTerrorWeapon::OnSwingStart()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeapon::`vftable'" to jump to the "CTerrorWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeapon::OnSwingStart"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorWeapon12OnSwingStartEv"
				"mac"		"@_ZN13CTerrorWeapon12OnSwingStartEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B */
			}

			/**
			 * CTerrorWeapon::SecondaryAttack()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeapon::`vftable'" to jump to the "CTerrorWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeapon::SecondaryAttack"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorWeapon15SecondaryAttackEv"
				"mac"		"@_ZN13CTerrorWeapon15SecondaryAttackEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 85 ? ? ? ? 8B ? 8B */
			}

			/**
			 * CTerrorWeapon::TrySwing(float, float, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeapon::`vftable'" to jump to the "CTerrorWeapon" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeapon::TrySwing"
			{
				"library"	"server"
				"linux"		"@_ZN13CTerrorWeapon8TrySwingEfff"
				"mac"		"@_ZN13CTerrorWeapon8TrySwingEfff"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x0F\x85\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 0F 85 ? ? ? ? 53 */
			}

			/**
			 * CTerrorWeaponInfo::Parse(KeyValues *, char const*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTerrorWeaponInfo::`vftable'" to jump to the "CTerrorWeaponInfo" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTerrorWeaponInfo::Parse"
			{
				"library"	"server"
				"linux"		"@_ZN17CTerrorWeaponInfo5ParseEP9KeyValuesPKc"
				"mac"		"@_ZN17CTerrorWeaponInfo5ParseEP9KeyValuesPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x57\x8B\x2A\x2A\x50\x57"
						/* ? ? ? ? ? ? 83 ? ? 56 57 8B ? ? 50 57 */
			}

			/**
			 * CThrow::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "HulkZombie.Throw.Fail" or "HulkZombie.Throw.Pickup" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CThrow::`vftable'" to jump to the "CThrow" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CThrow::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CThrow15ActivateAbilityEv"
				"mac"		"@_ZN6CThrow15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x83\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74"
						/* ? ? ? ? ? ? ? 8B 83 ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 57 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 74 */
			}

			/**
			 * CThrow::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CThrow::`vftable'" to jump to the "CThrow" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CThrow::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK6CThrow20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK6CThrow20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x75\x2A\x32\x2A\x5E\xC3\x8B\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 75 ? 32 ? 5E C3 8B ? 8B */
			}

			/**
			 * CThrow::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CThrow::`vftable'" to jump to the "CThrow" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CThrow::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CThrow13UpdateAbilityEv"
				"mac"		"@_ZN6CThrow13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x57\x8B\x2A\x8B\x87\x2A\x2A\x2A\x2A\x89"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 57 8B ? 8B 87 ? ? ? ? 89 */
			}

			/**
			 * CTongue::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTongue::`vftable'" to jump to the "CTongue" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTongue::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN7CTongue15ActivateAbilityEv"
				"mac"		"@_ZN7CTongue15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85"
						/* ? ? ? ? ? ? ? ? ? ? ? FF ? 84 ? 74 ? 8B 86 ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 */
			}

			/**
			 * CTongue::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTongue::`vftable'" to jump to the "CTongue" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTongue::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK7CTongue20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK7CTongue20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x74\x2A\x83\xBF"
						/* ? ? ? ? ? ? ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 74 ? 83 BF */
			}

			/**
			 * CTongue::OnUpdateAttachedToTargetState()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "tongue_broke_bent"
			 * - "Tongue broke because we left the ground."
			 * - "Tongue broke because victim is on a moving platform."
			 * - "Tongue broke because victim is on the rescue vehicle."
			 * - "Tongue dropping because it bent too many times."
			 * - "Bend point %d: %f %f %f"
			 * - "Target is at %f %f %f"
			 * - "Tongue dropping because we released it."
			 * - "Tongue dropping because we no longer have a target."
			 **/
			"CTongue::OnUpdateAttachedToTargetState"
			{
				"library"	"server"
				"linux"		"@_ZN7CTongue29OnUpdateAttachedToTargetStateEv"
				"mac"		"@_ZN7CTongue29OnUpdateAttachedToTargetStateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x86\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xC1\x2A\x2A\x39\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x57\x8B\x2A\x89"
						/* ? ? ? ? ? ? 56 8B ? 8B 86 ? ? ? ? 83 ? ? 0F 84 ? ? ? ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 0F 84 ? ? ? ? C1 ? ? 39 ? ? 0F 85 ? ? ? ? 57 8B ? 89 */
			}

			/**
			 * CTongue::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTongue::`vftable'" to jump to the "CTongue" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTongue::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN7CTongue13UpdateAbilityEv"
				"mac"		"@_ZN7CTongue13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x74\x2A\x8D\x86\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 74 ? 8D 86 ? ? ? ? 50 E8 ? ? ? ? 8B ? E8 ? ? ? ? 8B */
			}

			/**
			 * CTriggerTraceEnum::EnumEntity(IHandleEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CTriggerTraceEnum::`vftable'" to jump to the "CTriggerTraceEnum" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CTriggerTraceEnum::EnumEntity"
			{
				"library"	"server"
				"linux"		"@_ZN17CTriggerTraceEnum10EnumEntityEP13IHandleEntity"
				"mac"		"@_ZN17CTriggerTraceEnum10EnumEntityEP13IHandleEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x57\x8B\x2A\x8B\x2A\xFF"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 8B ? ? 8B ? 8B ? ? 57 8B ? 8B ? FF */
			}

			/**
			 * CVomit::ActivateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CVomit::`vftable'" to jump to the "CVomit" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CVomit::ActivateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CVomit15ActivateAbilityEv"
				"mac"		"@_ZN6CVomit15ActivateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 0F 84 ? ? ? ? 8B 87 ? ? ? ? 83 */
			}

			/**
			 * CVomit::IsAbilityReadyToFire()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CVomit::`vftable'" to jump to the "CVomit" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CVomit::IsAbilityReadyToFire"
			{
				"library"	"server"
				"linux"		"@_ZNK6CVomit20IsAbilityReadyToFireEv"
				"mac"		"@_ZNK6CVomit20IsAbilityReadyToFireEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\x85\x2A\x75\x2A\x5F\x32\x2A\x5E\xC3\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75\x2A\xF7"
						/* ? ? ? ? ? ? ? ? ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? 85 ? 75 ? 5F 32 ? 5E C3 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 75 ? F7 */
			}

			/**
			 * CVomit::UpdateAbility()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CVomit::`vftable'" to jump to the "CVomit" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CVomit::UpdateAbility"
			{
				"library"	"server"
				"linux"		"@_ZN6CVomit13UpdateAbilityEv"
				"mac"		"@_ZN6CVomit13UpdateAbilityEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\x8B\x87\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? 8B 87 ? ? ? ? 83 */
			}

			/**
			 * CVomitJarProjectile::Detonate()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "CedaJar.Explode" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CVomitJarProjectile::`vftable'" to jump to the "CVomitJarProjectile" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CVomitJarProjectile::Detonate"
			{
				"library"	"server"
				"linux"		"@_ZN19CVomitJarProjectile8DetonateEv"
				"mac"		"@_ZN19CVomitJarProjectile8DetonateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\xF6\x2A\x2A\x2A\x0F"
						/* ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? E8 ? ? ? ? 8B ? F6 ? ? ? 0F */
			}

			/**
			 * CVomitJarProjectile::ExplodeVomit(Vector, Vector)
			 *
			 * How to find on Windows:
			 * 1. Search for the "vomit_jar" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"CVomitJarProjectile::ExplodeVomit"
			{
				"library"	"server"
				"linux"		"@_ZN19CVomitJarProjectile12ExplodeVomitE6VectorS0_"
				"mac"		"@_ZN19CVomitJarProjectile12ExplodeVomitE6VectorS0_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 8B ? ? F3 ? ? ? ? 53 */
			}

			/**
			 * CWeaponAmmoSpawn::Use(CBaseEntity *, CBaseEntity *, USE_TYPE, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CWeaponAmmoSpawn::`vftable'" to jump to the "CWeaponAmmoSpawn" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"CWeaponAmmoSpawn::Use"
			{
				"library"	"server"
				"linux"		"@_ZN16CWeaponAmmoSpawn3UseEP11CBaseEntityS1_8USE_TYPEf"
				"mac"		"@_ZN16CWeaponAmmoSpawn3UseEP11CBaseEntityS1_8USE_TYPEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x56\x6A"
						/* ? ? ? ? ? ? ? ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 56 6A */
			}

			/**
			 * CWeaponSpawn::Use(CBaseEntity *, CBaseEntity *, USE_TYPE, float)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "spawner_give_item" string.
			 * 2a. The string can only be found in this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "CWeaponSpawn::`vftable'" to jump to the "CWeaponSpawn" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"CWeaponSpawn::Use"
			{
				"library"	"server"
				"linux"		"@_ZN12CWeaponSpawn3UseEP11CBaseEntityS1_8USE_TYPEf"
				"mac"		"@_ZN12CWeaponSpawn3UseEP11CBaseEntityS1_8USE_TYPEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x57\x8B\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 53 57 8B ? ? 8B ? 85 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B */
			}

			/**
			 * ForEachPlayer<ProximityCheck>(ProximityCheck &)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTankRock::ProximityThink" function.
			 * 2. Click on the first function call above the "prop_door*" string.
			 * 3. The last function call in that function should be this function.
			 **/
			"ForEachPlayer<ProximityCheck>"
			{
				"library"	"server"
				"linux"		"@_Z13ForEachPlayerI14ProximityCheckEbRT_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\xD8\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x8B\x2A\x2A\x57\x8B\x2A\x85\x2A\x74"
						/* ? ? ? ? ? ? ? ? ? A1 D8 ? ? ? 33 ? 89 ? ? 56 8B ? ? 57 8B ? 85 ? 74 */
			}

			/**
			 * ForEachSurvivor<MinigunnerScan>(MinigunnerScan &)
			 *
			 * How to find on Windows:
			 * 1. Locate the "TankAttack::Update" function.
			 * 2. This function is called before the "== 0.0" check.
			 **/
			"ForEachSurvivor<MinigunnerScan>"
			{
				"library"	"server"
				"linux"		"@_Z15ForEachSurvivorI14MinigunnerScanEbRT_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x57\xBF\x2A\x2A\x2A\x2A\x39\x2A\x2A\x7C\x2A\x53\x8B\x2A\x2A\x56\x57\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\x85\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x2B\x2A\x2A\xC1\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x75\x2A\x80"
						/* ? ? ? ? ? ? ? ? 57 BF ? ? ? ? 39 ? ? 7C ? 53 8B ? ? 56 57 E8 ? ? ? ? 8B ? 83 ? ? 85 ? 74 ? 8B ? ? 85 ? 74 ? 8B 0D ? ? ? ? 2B ? ? C1 ? ? 85 ? 74 ? 8B ? 8B 82 ? ? ? ? 8B ? FF ? 84 ? 74 ? 83 BE ? ? ? ? ? 74 ? 8B ? E8 ? ? ? ? 83 ? ? 75 ? 80 */
			}

			/**
			 * ForEachTerrorPlayer<SpawnablePZScan>(SpawnablePZScan &)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented" string.
			 * 2. The string can be found in "z_spawn_old" and "ZSpawnCore".
			 * 3. The first function call below the string should be this function.
			 **/
			"ForEachTerrorPlayer<SpawnablePZScan>"
			{
				"library"	"server"
				"linux"		"@_Z19ForEachTerrorPlayerI15SpawnablePZScanEbRT_"
				"windows"	"\x55\x8B\xEC\xA1\x90\x36\x7F\x10\x53\x56\x57\xBF\x01\x00\x00\x00\x39\x78\x14\x7C\x5A\x8B\x5D\x08\x57\xE8\x42\xFD"
						/* 55 8B EC A1 90 36 7F 10 53 56 57 BF 01 00 00 00 39 78 14 7C 5A 8B 5D 08 57 E8 42 FD */
			}

			/**
			 * GetWeaponInfo(CSWeaponID)
			 *
			 * How to find on Windows:
			 * 1. Search for the "weapon_reparse_server" string.
			 * 2. The string can only be found in one function.
			 * 3. The second function call in that function should be "weapon_reparse_server".
			 * 4. The first function call in "weapon_reparse_server" should be this function.
			 **/
			"GetWeaponInfo"
			{
				"library"	"server"
				"linux"		"@_Z13GetWeaponInfo10CSWeaponID"
				"mac"		"@_Z13GetWeaponInfo10CSWeaponID"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x33\x2A\x5B\x5D\xC3\x80"
						/* ? ? ? ? ? ? ? 85 ? 75 ? 33 ? 5B 5D C3 80 */
			}

			/**
			 * IGameSystem::LevelInitPreEntityAllSystems(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "InitScripts()" string.
			 * 2. This function is called above the string.
			 **/
			"IGameSystem::LevelInitPreEntityAllSystems"
			{
				"library"	"server"
				"linux"		"@_ZN11IGameSystem28LevelInitPreEntityAllSystemsEPKc"
				"mac"		"@_ZN11IGameSystem28LevelInitPreEntityAllSystemsEPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? 85 ? 74 ? 50 E8 ? ? ? ? 83 ? ? 56 */
			}

			/**
			 * Infected::AttackSurvivorTeam()
			 *
			 * How to find on Windows:
			 * 1. Locate the "ZombieManager::SpawnCommonZombie" function.
			 * 2. This function is called after the "== 1" check.
			 **/
			"Infected::AttackSurvivorTeam"
			{
				"library"	"server"
				"linux"		"@_ZN8Infected18AttackSurvivorTeamEv"
				"mac"		"@_ZN8Infected18AttackSurvivorTeamEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x74\x2A\x80\x7E\x64\x00\x74\x2A\x80\x4E\x68\x01\xC6\x86\xC1"
						/* ? ? ? ? ? ? ? ? ? ? 74 ? 80 7E 64 00 74 ? 80 4E 68 01 C6 86 C1 */
			}

			/**
			 * Infected::GetFlowDistance()
			 *
			 * How to find on Windows:
			 * 1. Search for the "F4 9F 86 01 00" bytes.
			 * 2. The bytes can be only be found in "CNarrowEscapeAwardTemplate::FireGameEvent".
			 * 3. Click on the last function call in "CNarrowEscapeAwardTemplate::FireGameEvent".
			 * 4. Click on the last function call in that function.
			 * 5. The last two function calls in that function should be this function.
			 **/
			"Infected::GetFlowDistance"
			{
				"library"	"server"
				"linux"		"@_ZNK8Infected15GetFlowDistanceEv"
				"mac"		"@_ZNK8Infected15GetFlowDistanceEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x85\x2A\x74\x2A\xD9\x80\x2A\x2A\x2A\x2A\xC3"
						/* ? ? ? ? ? ? ? ? FF ? 85 ? 74 ? D9 80 ? ? ? ? C3 */
			}

			/**
			 * Infected::OnHitByVomitJar(CBaseCombatCharacter *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "Infected::`vftable'" to jump to the "Infected" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"Infected::OnHitByVomitJar"
			{
				"library"	"server"
				"linux"		"@_ZN8Infected15OnHitByVomitJarEP20CBaseCombatCharacter"
				"mac"		"@_ZN8Infected15OnHitByVomitJarEP20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x75\x2A\x56"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 75 ? 56 */
			}

			/**
			 * Infected::Spawn()
			 *
			 * How to find on Windows:
			 * 1a. Search for the "UpperBody" or "LowerBody" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "Infected::`vftable'" to jump to the "Infected" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"Infected::Spawn"
			{
				"library"	"server"
				"linux"		"@_ZN8Infected5SpawnEv"
				"mac"		"@_ZN8Infected5SpawnEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\xFF\x2A\xF7"
						/* ? ? ? ? ? ? 56 8B ? 8B ? 8B 90 ? ? ? ? 57 FF ? F7 */
			}

			/**
			 * InfectedExecAction::OnInjured(Infected *, CTakeDamageInfo const&)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "InfectedExecAction::`vftable'" to jump to the "InfectedExecAction" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"InfectedExecAction::OnInjured"
			{
				"library"	"server"
				"linux"		"@_ZN18InfectedExecAction9OnInjuredEP8InfectedRK15CTakeDamageInfo"
				"mac"		"@_ZN18InfectedExecAction9OnInjuredEP8InfectedRK15CTakeDamageInfo"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x2A\x57\xA8"
						/* ? ? ? ? ? ? 53 56 8B ? ? 8B ? ? 57 A8 */
			}

			/**
			 * InfectedShoved::OnShoved(Infected *, CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "InfectedShoved::`vftable'" to jump to the "InfectedShoved" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"InfectedShoved::OnShoved"
			{
				"library"	"server"
				"linux"		"@_ZN14InfectedShoved8OnShovedEP8InfectedP11CBaseEntity"
				"mac"		"@_ZN14InfectedShoved8OnShovedEP8InfectedP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x33\x2A\xC7"
						/* ? ? ? ? ? ? 50 E8 ? ? ? ? 8B ? ? 33 ? C7 */
			}

			/**
			 * InfoChangelevel::ChangeLevelNow()
			 *
			 * How to find on Windows:
			 * 1. Locate the "InfoChangelevel::StartChangeLevel" function.
			 * 2. Look for a function being passed through another function along with the values "0.0" and "0".
			 * 3. That function should be "InfoChangelevel::ChangeLevelSpeechDelay".
			 * 4. Click on that function to go to "InfoChangelevel::ChangeLevelSpeechDelay".
			 * 5. Look for a function being passed through another function along with the values "0.0" and "0".
			 * 6. That function should be this function.
			 **/
			"InfoChangelevel::ChangeLevelNow"
			{
				"library"	"server"
				"linux"		"@_ZN15InfoChangelevel14ChangeLevelNowEv"
				"mac"		"@_ZN15InfoChangelevel14ChangeLevelNowEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? ? ? ? 8B ? 8B ? ? FF ? 84 ? 74 ? 8B 0D ? ? ? ? 6A */
			}

			/**
			 * InfoChangelevel::StartChangeLevel(Checkpoint const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Would change level, but not going to!\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"InfoChangelevel::StartChangeLevel"
			{
				"library"	"server"
				"linux"		"@_ZN15InfoChangelevel16StartChangeLevelEPK10Checkpoint"
				"mac"		"@_ZN15InfoChangelevel16StartChangeLevelEPK10Checkpoint"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x56\x8B\x2A\x74\x2A\x68"
						/* ? ? ? ? ? ? ? ? 83 ? ? ? 56 8B ? 74 ? 68 */
			}

			/**
			 * InstallBotControl()
			 *
			 * How to find on Windows:
			 * 1. Search for the "resource/ModEvents.res" string.
			 * 2. The function call below the string should be this function.
			 **/
			"InstallBotControl"
			{
				"library"	"server"
				"linux"		"@_Z17InstallBotControlv"
				"mac"		"@_Z17InstallBotControlv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x2A\x6A\x2A\xFF\x2A\xA1\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? 85 ? 74 ? 8B ? 8B ? 6A ? FF ? A1 ? ? ? ? 8B */
			}

			/**
			 * IsAreaConnectedToNonCheckpointArea(TerrorNavArea *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetPlayerSpawnPosition: No spawn zones\n" string.
			 * 2. The string can only be found in "GetPlayerSpawnPosition".
			 * 3. There are four while loops ("while ( 1 )") inside "GetPlayerSpawnPosition".
			 * 4. This function should be the first function call in the fourth/last while loop.
			 **/
			"IsAreaConnectedToNonCheckpointArea"
			{
				"library"	"server"
				"linux"		"@_Z34IsAreaConnectedToNonCheckpointAreaP13TerrorNavArea"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x53\x56\xC7\x45"
						/* ? ? ? ? ? ? 8B ? ? 53 56 C7 45 */
			}

			/**
			 * IsVisibleToPlayer(Vector const&, CBasePlayer *, int, int, float, CBaseEntity const*, TerrorNavArea **, bool *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tank/Witch threat spawn: No non-visible valid areas between threat area and goal area! Choosing random area.\n" string.
			 * 2. The string can only be found in "CDirector::OnThreatEncountered".
			 * 3. The function "CDirector::OnThreatEncountered" calls "CDirectorTacticalServices::IsSpawnLocationVisibleToTeam" with the values "2" and "3" passed to it.
			 * 4. The last function call in "CDirectorTacticalServices::IsSpawnLocationVisibleToTeam" should be this function.
			 **/
			"IsVisibleToPlayer"
			{
				"library"	"server"
				"linux"		"@_Z17IsVisibleToPlayerRK6VectorP11CBasePlayeriifPK11CBaseEntityPP13TerrorNavAreaPb"
				"mac"		"@_Z17IsVisibleToPlayerRK6VectorP11CBasePlayeriifPK11CBaseEntityPP13TerrorNavAreaPb"
				"windows"	"\x55\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x2A\xC6"
						/* 55 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 8B ? ? 53 8B ? ? 56 8B ? ? C6 */
			}

			/**
			 * KeyValues::FindKey(char const*, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "SpawnBossThreats" string.
			 * 2. Both functions that reference the string call this function with the string passed to it.
			 **/
			"KeyValues::FindKey"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues7FindKeyEPKcb"
				"mac"		"@_ZN9KeyValues7FindKeyEPKcb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x8A"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? 8A */
			}

			/**
			 * KeyValues::GetFirstTrueSubKey()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in one function):
			 * - "g:l4d2,"
			 * - "%s,"
			 * - "BuiltIn"
			 * - "CfgTag"
			 * - "GameData: Too many missions installed, not advertising for mission \"%s\"\n"
			 * 2. This function should be the first function call above the for-loop.
			 **/
			"KeyValues::GetFirstTrueSubKey"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues18GetFirstTrueSubKeyEv"
				"mac"		"@_ZN9KeyValues18GetFirstTrueSubKeyEv"
				"windows"	"\x85\xC9\x74\x2A\x8B\x41\x18\x85\xC0\x74\x2A\xEB\x2A\x8D\x49\x00\x80\x78\x10\x00\x74"
						/* 85 C9 74 ? 8B 41 18 85 C0 74 ? EB ? 8D 49 00 80 78 10 00 74 */
			}

			/**
			 * KeyValues::GetInt(char const*, int)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in one function):
			 * - "g:l4d2,"
			 * - "%s,"
			 * - "BuiltIn"
			 * - "CfgTag"
			 * - "GameData: Too many missions installed, not advertising for mission \"%s\"\n"
			 * 2. This function should be the function that has the string "BuiltIn" passed to it.
			 **/
			"KeyValues::GetInt"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues6GetIntEPKci"
				"mac"		"@_ZN9KeyValues6GetIntEPKci"
				"windows"	"\x55\x8B\x2A\x8B\x2A\x2A\x6A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x85\x2A\x74\x2A\x0F\x2A\x2A\x2A\x49"
						/* 55 8B ? 8B ? ? 6A ? 50 E8 ? ? ? ? 85 ? 74 ? 0F ? ? ? 49 */
			}

			/**
			 * KeyValues::GetNextTrueSubKey()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in one function):
			 * - "g:l4d2,"
			 * - "%s,"
			 * - "BuiltIn"
			 * - "CfgTag"
			 * - "GameData: Too many missions installed, not advertising for mission \"%s\"\n"
			 * 2. This function should be the last function call in the for-loop.
			 **/
			"KeyValues::GetNextTrueSubKey"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues17GetNextTrueSubKeyEv"
				"mac"		"@_ZN9KeyValues17GetNextTrueSubKeyEv"
				"windows"	"\x85\xC9\x74\x2A\x8B\x41\x14\x85\xC0\x74\x2A\xEB\x2A\x8D\x49\x00\x80\x78\x10\x00\x74"
						/* 85 C9 74 ? 8B 41 14 85 C0 74 ? EB ? 8D 49 00 80 78 10 00 74 */
			}

			/**
			 * KeyValues::GetString(char const*, char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "L4D2C" string.
			 * 2. Both functions that reference the string call this function.
			 **/
			"KeyValues::GetString"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues9GetStringEPKcS1_"
				"mac"		"@_ZN9KeyValues9GetStringEPKcS1_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x6A\x2A\x53\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x2A\x48\x83\x2A\x2A\x0F\x87\x2A\x2A\x2A\x2A\xFF\x24\x2A\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x83\x2A\x2A\xDD\x2A\x2A\x68"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 56 57 6A ? 53 8B ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? 0F ? ? ? 48 83 ? ? 0F 87 ? ? ? ? FF 24 ? ? ? ? ? D9 ? ? 83 ? ? DD ? ? 68 */
			}

			/**
			 * KeyValues::SetString(char const*, char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "KeyValues::GetString" function.
			 * 2. This function should be the last function call in that function.
			 **/
			"KeyValues::SetString"
			{
				"library"	"server"
				"linux"		"@_ZN9KeyValues9SetStringEPKcS1_"
				"mac"		"@_ZN9KeyValues9SetStringEPKcS1_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x6A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x2A\x53\x57\x51\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x52\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x83\x2A\x2A\xC7\x46\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\xBB\x2A\x2A\x2A\x2A\x53"
						/* ? ? ? ? ? ? 56 6A ? 50 E8 ? ? ? ? 8B ? 85 ? 74 ? 8B ? ? 53 57 51 E8 ? ? ? ? 8B ? ? 52 E8 ? ? ? ? 8B ? ? 83 ? ? C7 46 ? ? ? ? ? 85 ? 75 ? BB ? ? ? ? 53 */
			}

			/**
			 * L4D1SurvivorBehavior::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "L4D1SurvivorBehavior::`vftable'" to jump to the "L4D1SurvivorBehavior" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"L4D1SurvivorBehavior::SelectMoreDangerousThreat"
			{
				"library"	"server"
				"linux"		"@_ZNK20L4D1SurvivorBehavior25SelectMoreDangerousThreatEPK8INextBotPK20CBaseCombatCharacterPS3_S6_"
				"mac"		"@_ZNK20L4D1SurvivorBehavior25SelectMoreDangerousThreatEPK8INextBotPK20CBaseCombatCharacterPS3_S6_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xAC\x9C"
						/* ? ? ? ? ? ? ? ? 8B ? ? 8B ? 8B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? AC 9C */
			}

			/**
			 * ModifyOrAppendGlobalCriteria(AI_CriteriaSet *)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings:
			 * - "NumberOfTeamAlive"
			 * - "NumberOfTeamIncapacitated"
			 * - "NumberOfTeamDead"
			 * - "gamemode"
			 * 2. One of the functions that references any of these strings should be this function.
			 **/
			"ModifyOrAppendGlobalCriteria"
			{
				"library"	"server"
				"linux"		"@_ZL28ModifyOrAppendGlobalCriteriaP14AI_CriteriaSet"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8D\x85\x2A\x2A\x2A\x2A\x57\x50\x89"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8D 85 ? ? ? ? 57 50 89 */
			}

			/**
			 * MovePropAway(CBaseEntity *, CBasePlayer *)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in one function):
			 * - "nobody"
			 * - "(PHYSICS) %s was hit for %.1f damage by a physics obs of mass %.2f(%.2f), moving at a relative speed %.2f(%.2f), moved by %s\n"
			 * - "(PHYSICS) %s was moved above a prop (%f %f %f) to (%f %f %f)\n"
			 * 2. This function is the first function call after the "< 900.0" check.
			 **/
			"MovePropAway"
			{
				"library"	"server"
				"linux"		"@_Z12MovePropAwayP11CBaseEntityP11CBasePlayer"
				"mac"		"@_Z12MovePropAwayP11CBaseEntityP11CBasePlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 53 56 8B ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 8B ? 8B */
			}

			/**
			 * Music::IsL4D1()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "Music::`vftable'" to jump to the "Music" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"Music::IsL4D1"
			{
				"library"	"server"
				"linux"		"@_ZN5Music6IsL4D1Ev"
				"mac"		"@_ZN5Music6IsL4D1Ev"
				"windows"	"\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x2A\x2A\xC3"
						/* E8 ? ? ? ? 83 ? ? 0F ? ? C3 */
			}

			/**
			 * Music::OnPZAlert(int, float, char const*, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "Music::`vftable'" to jump to the "Music" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"Music::OnPZAlert"
			{
				"library"	"server"
				"linux"		"@_ZN5Music9OnPZAlertEifPKcf"
				"mac"		"@_ZN5Music9OnPZAlertEifPKcf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x57\x8B\x2A\xE8"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 57 8B ? E8 */
			}

			/**
			 * Music::OnSavedFromLedgeHang()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "Music::`vftable'" to jump to the "Music" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"Music::OnSavedFromLedgeHang"
			{
				"library"	"server"
				"linux"		"@_ZN5Music20OnSavedFromLedgeHangEv"
				"mac"		"@_ZN5Music20OnSavedFromLedgeHangEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\xFF\x2A\x2A\x68\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x6A\x2A\x2A\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x2A\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x2A\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x2A\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x2A\xD9\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? 8B ? 8B ? ? ? ? ? FF ? ? 68 ? ? ? ? E8 ? ? ? ? D9 ? ? ? ? ? 83 ? ? 6A ? ? D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? D9 ? ? ? ? ? 6A ? ? D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? D9 ? ? ? ? ? 6A ? ? D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? D9 ? ? ? ? ? 6A ? ? D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? D9 ? ? ? ? ? 6A ? ? D9 ? ? 68 ? ? ? ? 8B ? E8 ? ? ? ? ? ? ? ? ? ? ? 56 8B ? 8B ? ? ? ? ? 8B */
			}

			/**
			 * Music::Play(char const*, int, float, bool, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "!m_me\n"
			 * - "Invalid emit entity index: %i\n"
			 * - "Invalid play entity index: %i\n"
			 * - "PlayCommand: Unable to find sound %s\n"
			 * - "MusicParameters"
			 * - "AFTER_DEATH"
			 * - "AFTER_MISSION_END"
			 **/
			"Music::Play"
			{
				"library"	"server"
				"linux"		"@_ZN5Music4PlayEPKcifbb"
				"mac"		"@_ZN5Music4PlayEPKcifbb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x53\x8B\x2A\x2A\x56\x57"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? A1 ? ? ? ? 83 ? ? ? 53 8B ? ? 56 57 */
			}

			/**
			 * Music::StopPlaying(char const*, float, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%s Music::OnEnterCheckpoint\n" string.
			 * 2. The string can only be found in "Music::OnEnterCheckpoint".
			 * 3. The function call with the string "all" and value "1.0" passed to it should be this function.
			 **/
			"Music::StopPlaying"
			{
				"library"	"server"
				"linux"		"@_ZN5Music11StopPlayingEPKcfb"
				"mac"		"@_ZN5Music11StopPlayingEPKcfb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x2A\x56\x8B\x2A\x89\x2A\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x8E\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x53\x57\x85\x2A\x75\x2A\x33\x2A\xEB\x2A\x8B\x15\x2A\x2A\x2A\x2A\x2B\x2A\x2A\xC1\x2A\x2A\x8B\x2A\x8D\x2A\x2A\xE8\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\xBF\x2A\x2A\x2A\x2A\x39\x2A\x2A\x7C\x2A\x57\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x82\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x56\x8D\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x47\x3B\x2A\x2A\x7E\x2A\x8B\x2A\x2A\x8D\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x68\x2A\x2A\x2A\x2A\x52\xE8\x2A\x2A\x2A\x2A\x33"
						/* ? ? ? ? ? ? A1 ? ? ? ? 83 ? ? ? 56 8B ? 89 ? ? 0F 84 ? ? ? ? 8B 8E ? ? ? ? 8B ? ? 53 57 85 ? 75 ? 33 ? EB ? 8B 15 ? ? ? ? 2B ? ? C1 ? ? 8B ? 8D ? ? E8 ? ? ? ? A1 ? ? ? ? BF ? ? ? ? 39 ? ? 7C ? 57 E8 ? ? ? ? 8B ? 83 ? ? 85 ? 74 ? 8B ? 8B 82 ? ? ? ? 8B ? FF ? 84 ? 74 ? 8B ? E8 ? ? ? ? 84 ? 75 ? 56 8D ? ? E8 ? ? ? ? 8B 0D ? ? ? ? 47 3B ? ? 7E ? 8B ? ? 8D ? ? E8 ? ? ? ? 8D ? ? 68 ? ? ? ? 52 E8 ? ? ? ? 33 */
			}

			/**
			 * float NavAreaTravelDistance<ShortestPathCost>(Vector const&, Vector const&, ShortestPathCost &)
			 *
			 * How to find on Windows:
			 * 1. Find the "CNavArea::ComputeEarliestOccupyTimes" function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "CNavArea::`vftable'" to jump to the "CNavArea" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the "CNavArea::ComputeEarliestOccupyTimes" function.
			 * 5. Look for the "CNavArea::ComputeEarliestOccupyTimes" function in the Windows binary.
			 * 6. The first function call above both "info_player_counterterrorist" strings in "CNavArea::ComputeEarliestOccupyTimes" should be this function.
			 **/
			"NavAreaTravelDistance<ShortestPathCost>"
			{
				"library"	"server"
				"linux"		"@_Z21NavAreaTravelDistanceI16ShortestPathCostEfRK6VectorS3_RT_"
				"mac"		"@_Z21NavAreaTravelDistanceI16ShortestPathCostEfRK6VectorS3_RT_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\xD9"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? D9 */
			}

			/**
			 * NextBotCombatCharacter::DoThink()
			 *
			 * How to find on Windows:
			 * 1. Locate the "NextBotCombatCharacter::Spawn" function.
			 * 2. Look through the assembly for a 5-byte instruction that pushes the offset of a function.
			 * 3. It should be the second to last function call.
			 * 4. Click on that offset to go to this function.
			 * 5. The assembly should look something like this:
			 * .text:104A61CF 68 90 5A 4A 10                                push    offset sub_104A5A90
			 **/
			"NextBotCombatCharacter::DoThink"
			{
				"library"	"server"
				"linux"		"@_ZN22NextBotCombatCharacter7DoThinkEv"
				"mac"		"@_ZN22NextBotCombatCharacter7DoThinkEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x53\x56\x33\x2A\x89\x2A\x2A\x89\x2A\x2A\x57\x8B\x2A\x39\x2A\x2A\x74\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x56\x56\x56\x56\x8D\x2A\x2A\x51\x50\xFF\x2A\xA1\x2A\x2A\x2A\x2A\x83\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x6A\x2A\x56\x68\x2A\x2A\x2A\x2A\x56\x89\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x68\x2A\x2A\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\xFF\x15\x2A\x2A\x2A\x2A\x8B\x15"
						/* ? ? ? ? ? ? A1 ? ? ? ? 53 56 33 ? 89 ? ? 89 ? ? 57 8B ? 39 ? ? 74 ? 8B ? ? 68 ? ? ? ? 8B ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 68 ? ? ? ? 56 56 56 56 8D ? ? 51 50 FF ? A1 ? ? ? ? 83 ? ? 8B ? ? 8B ? ? 8B ? ? 6A ? 56 68 ? ? ? ? 56 89 ? ? 8B 0D ? ? ? ? 68 ? ? ? ? 89 ? ? 89 ? ? FF 15 ? ? ? ? 8B 15 */
			}

			/**
			 * NextBotCombatCharacter::Spawn()
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "NextBotCombatCharacter::`vftable'" to jump to the "NextBotCombatCharacter" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"NextBotCombatCharacter::Spawn"
			{
				"library"	"server"
				"linux"		"@_ZN22NextBotCombatCharacter5SpawnEv"
				"mac"		"@_ZN22NextBotCombatCharacter5SpawnEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8D\x8E\x2A\x2A\x2A\x2A\xFF\x2A\x6A\x2A\x8D"
						/* ? ? ? ? ? ? ? ? ? 8B 86 ? ? ? ? 8B 90 ? ? ? ? 8D 8E ? ? ? ? FF ? 6A ? 8D */
			}

			/**
			 * Boomer * NextBotCreatePlayerBot<Boomer>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Boomer" passed to it.
			 **/
			"NextBotCreatePlayerBot<Boomer>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI6BoomerEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI6BoomerEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\xB0\x24"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 B0 24 */
			}

			/**
			 * Charger * NextBotCreatePlayerBot<Charger>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Charger" passed to it.
			 **/
			"NextBotCreatePlayerBot<Charger>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI7ChargerEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI7ChargerEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\xB0\xD3"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 B0 D3 */
			}

			/**
			 * Hunter * NextBotCreatePlayerBot<Hunter>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Hunter" passed to it.
			 **/
			"NextBotCreatePlayerBot<Hunter>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI6HunterEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI6HunterEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\xA0"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 A0 */
			}

			/**
			 * Jockey * NextBotCreatePlayerBot<Jockey>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Jockey" passed to it.
			 **/
			"NextBotCreatePlayerBot<Jockey>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI6JockeyEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI6JockeyEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\x50\x3C"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 50 3C */
			}

			/**
			 * Smoker * NextBotCreatePlayerBot<Smoker>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Smoker" passed to it.
			 **/
			"NextBotCreatePlayerBot<Smoker>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI6SmokerEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI6SmokerEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\x60"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 60 */
			}

			/**
			 * Spitter * NextBotCreatePlayerBot<Spitter>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Spitter" passed to it.
			 **/
			"NextBotCreatePlayerBot<Spitter>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI7SpitterEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI7SpitterEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\x10"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 10 */
			}

			/**
			 * SurvivorBot * NextBotCreatePlayerBot<SurvivorBot>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "AddPlayer" or "RemovePlayer" string.
			 * 2. The string can only be found in "SurvivorReplacement::Restore".
			 * 3. One of the functions that calls "SurvivorReplacement::Restore" should be "CTerrorPlayer::ReplaceWithBot".
			 * 4. Look for "SurvivorReplacement::Restore" inside "CTerrorPlayer::ReplaceWithBot".
			 * 5. The first function call above "SurvivorReplacement::Restore" should be this function.
			 **/
			"NextBotCreatePlayerBot<SurvivorBot>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI11SurvivorBotEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI11SurvivorBotEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\x50\x7F"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 50 7F */
			}

			/**
			 * Tank * NextBotCreatePlayerBot<Tank>(char const*)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ReplaceWithBot" function.
			 * 2. This function is called inside that function with the string "Tank" passed to it.
			 **/
			"NextBotCreatePlayerBot<Tank>"
			{
				"library"	"server"
				"linux"		"@_Z22NextBotCreatePlayerBotI4TankEPT_PKc"
				"mac"		"@_Z22NextBotCreatePlayerBotI4TankEPT_PKc"
				"windows"	"\x55\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\x68\xE0"
						/* 55 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? 68 E0 */
			}

			/**
			 * NextBotManager::OnCharacterVomitedUpon(CBaseCombatCharacter *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "(MOB) %d wanderers grabbed for an IT mob of desired size %d.\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"NextBotManager::OnCharacterVomitedUpon"
			{
				"library"	"server"
				"linux"		"@_ZN14NextBotManager22OnCharacterVomitedUponEP20CBaseCombatCharacter"
				"mac"		"@_ZN14NextBotManager22OnCharacterVomitedUponEP20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x57\x33\x2A\x85"
						/* ? ? ? ? ? ? 83 ? ? 56 57 33 ? 85 */
			}

			/**
			 * NextBotManager::ShouldUpdate(INextBot *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Frame %8d/tick %8d: frame out of budget (%.2fms > %.2fms)\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"NextBotManager::ShouldUpdate"
			{
				"library"	"server"
				"linux"		"@_ZN14NextBotManager12ShouldUpdateEP8INextBot"
				"mac"		"@_ZN14NextBotManager12ShouldUpdateEP8INextBot"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x83\x2A\x2A\x2A\x7D\x2A\xB0"
						/* ? ? ? ? ? ? 57 8B ? 83 ? ? ? 7D ? B0 */
			}

			/**
			 * PassServerEntityFilter(IHandleEntity const*, IHandleEntity const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "RagdollImpact" string.
			 * 2. One of the functions that references that string should be "CBaseEntity::FireBullets".
			 * 3. Click on the first function call below the string to go to "Pickup_ForcePlayerToDropThisObject".
			 * 4. Check the references for "Pickup_ForcePlayerToDropThisObject".
			 * 5. One of the functions that calls "Pickup_ForcePlayerToDropThisObject" should be "CTraceFilterMelee::ShouldHitEntity".
			 * 6. The second function call in "CTraceFilterMelee::ShouldHitEntity" should be this function.
			 **/
			"PassServerEntityFilter"
			{
				"library"	"server"
				"linux"		"@_Z22PassServerEntityFilterPK13IHandleEntityS1_"
				"mac"		"@_Z22PassServerEntityFilterPK13IHandleEntityS1_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\xB0\x2A\x5F\x5D\xC3\x56"
						/* ? ? ? ? ? ? ? 85 ? 75 ? B0 ? 5F 5D C3 56 */
			}

			/**
			 * ReadWeaponDataFromFileForSlot(IFileSystem *, char const*, unsigned short *, unsigned char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Expecting 'file', got %s\n" string.
			 * 2. The string can only be found in "PrecacheFileWeaponInfoDatabase".
			 * 3. The second to last function call in "PrecacheFileWeaponInfoDatabase" should be this function.
			 **/
			"ReadWeaponDataFromFileForSlot"
			{
				"library"	"server"
				"linux"		"@_Z29ReadWeaponDataFromFileForSlotP11IFileSystemPKcPtPKh"
				"mac"		"@_Z29ReadWeaponDataFromFileForSlotP11IFileSystemPKcPtPKh"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x2A\x57\x8B\x2A\x2A\x89\x85"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 53 8B ? ? 56 8B ? ? 57 8B ? ? 89 85 */
			}

			/**
			 * SelectModelByPopulation(char const*, CUtlVector<char const*, CUtlMemory<char const*, int>> &)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "spawning a random zombie without population data\n"
			 * - "spawning a random zombie in unpopulated area '%s'\n"
			 * - "spawning a random zombie in area '%s' - %d%% < 100%%?\n"
			 * - "spawning %s in %s, %d%%\n"
			 **/
			"SelectModelByPopulation"
			{
				"library"	"server"
				"linux"		"@_Z23SelectModelByPopulationPKcR10CUtlVectorIS0_10CUtlMemoryIS0_iEE"
				"mac"		"@_Z23SelectModelByPopulationPKcR10CUtlVectorIS0_10CUtlMemoryIS0_iEE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x8B\x2A\x2A\x83\x2A\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 8B ? ? 83 ? ? ? 56 */
			}

			/**
			 * SurvivorAttack::SelectTarget(SurvivorBot *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: %s: NOT FIRING because we would pop the Boomer on a teammate\n" string.
			 * 2. The string can only be found in "SurvivorAttack::FireWeapon".
			 * 3. This function should be the second function call above the "%3.2f: %s: NOT FIRING because target is dead/gone\n" string.
			 **/
			"SurvivorAttack::SelectTarget"
			{
				"library"	"server"
				"linux"		"@_ZN14SurvivorAttack12SelectTargetEP11SurvivorBot"
				"mac"		"@_ZN14SurvivorAttack12SelectTargetEP11SurvivorBot"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\x57"
						/* ? ? ? ? ? ? 53 56 8B ? ? 8B ? 8B 90 ? ? ? ? 8B ? 57 */
			}

			/**
			 * SurvivorBehavior::SelectMoreDangerousThreat(INextBot const*, CBaseCombatCharacter const*, CBaseCombatCharacter*, CBaseCombatCharacter*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "SurvivorBehavior::`vftable'" to jump to the "SurvivorBehavior" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"SurvivorBehavior::SelectMoreDangerousThreat"
			{
				"library"	"server"
				"linux"		"@_ZNK16SurvivorBehavior25SelectMoreDangerousThreatEPK8INextBotPK20CBaseCombatCharacterPS3_S6_"
				"mac"		"@_ZNK16SurvivorBehavior25SelectMoreDangerousThreatEPK8INextBotPK20CBaseCombatCharacterPS3_S6_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x8B\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x7C\x67"
						/* ? ? ? ? ? ? ? ? 8B ? ? 8B ? 8B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 7C 67 */
			}

			/**
			 * SurvivorBot::FindScavengeItem(float)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Scavenging something" string.
			 * 2. One of the functions that calls this function passes the value "420.0" to it.
			 * 3. The other function that calls this function passes the value "1500.0" to it.
			 **/
			"SurvivorBot::FindScavengeItem"
			{
				"library"	"server"
				"linux"		"@_ZNK11SurvivorBot16FindScavengeItemEf"
				"mac"		"@_ZNK11SurvivorBot16FindScavengeItemEf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\x8B\x97"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? 8B 97 */
			}

			/**
			 * SurvivorBot::IsReachable(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: %s giving up, object is UNREACHABLE\n" string.
			 * 2. This function should be two function calls above the string.
			 **/
			"SurvivorBot::IsReachable<CBaseEntity>"
			{
				"library"	"server"
				"linux"		"@_ZNK11SurvivorBot11IsReachableEP11CBaseEntity"
				"mac"		"@_ZNK11SurvivorBot11IsReachableEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x56\x6A\x2A\x6A\x2A\x6A\x2A\x51\x8B\x2A\xD9"
						/* ? ? ? ? ? ? ? ? ? 56 6A ? 6A ? 6A ? 51 8B ? D9 */
			}

			/**
			 * SurvivorBot::IsReachable(CNavArea *, CNavArea *)
			 *
			 * How to find on Windows:
			 * 1. Locate the "SurvivorBot::IsReachable<CBaseEntity>" function.
			 * 2. The second and last function call in "SurvivorBot::IsReachable<CBaseEntity>" should be this function.
			 **/
			"SurvivorBot::IsReachable<CNavArea>"
			{
				"library"	"server"
				"linux"		"@_ZNK11SurvivorBot11IsReachableEP8CNavAreaS1_"
				"mac"		"@_ZNK11SurvivorBot11IsReachableEP8CNavAreaS1_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\x56\x57\x8B\x2A\x2A\x53\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83"
						/* ? ? ? ? ? ? 53 8B ? ? 56 57 8B ? ? 53 57 8B ? E8 ? ? ? ? 83 */
			}

			/**
			 * SurvivorBot::IsReachable(Vector const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Trying to use something to help us along" string.
			 * 2. This function should be four function calls above the string.
			 **/
			"SurvivorBot::IsReachable<Vector>"
			{
				"library"	"server"
				"linux"		"@_ZNK11SurvivorBot11IsReachableERK6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x56\x6A\x2A\x6A\x2A\x6A\x2A\x51"
						/* ? ? ? ? ? ? ? ? ? 8B ? ? 56 6A ? 6A ? 6A ? 51 */
			}

			/**
			 * SurvivorBot::SetHumanSpectator(CTerrorPlayer *)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::GoAwayFromKeyboard" function.
			 * 2. The third function call in "CTerrorPlayer::GoAwayFromKeyboard" should be this function.
			 * 3. This function should be two function calls above the "data" string.
			 **/
			"SurvivorBot::SetHumanSpectator"
			{
				"library"	"server"
				"linux"		"@_ZN11SurvivorBot17SetHumanSpectatorEP13CTerrorPlayer"
				"mac"		"@_ZN11SurvivorBot17SetHumanSpectatorEP13CTerrorPlayer"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x7E\x2A\x32\x2A\x5E\x5D\xC2\x2A\x2A\x8B\x0D"
						/* ? ? ? ? ? ? 83 BE ? ? ? ? ? 7E ? 32 ? 5E 5D C2 ? ? 8B 0D */
			}

			/**
			 * SurvivorBot::SetHumanSpectatorByUserID(int, char const*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "CREATING BOT %s FOR %s(%d)\n" string.
			 * 2. The string can only be found in "CreateInfoTransitioningPlayers".
			 * 3. This function should be three function calls above the "Skipping saved player %s(%d) - we're on %s and it's only valid for %s\n" string.
			 **/
			"SurvivorBot::SetHumanSpectatorByUserID"
			{
				"library"	"server"
				"linux"		"@_ZN11SurvivorBot25SetHumanSpectatorByUserIDEiPKc"
				"mac"		"@_ZN11SurvivorBot25SetHumanSpectatorByUserIDEiPKc"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\xBE\x2A\x2A\x2A\x2A\x2A\x7E\x2A\x32\x2A\x5E\x5D\xC2\x2A\x2A\x57"
						/* ? ? ? ? ? ? 83 BE ? ? ? ? ? 7E ? 32 ? 5E 5D C2 ? ? 57 */
			}

			/**
			 * SurvivorBot::UseHealingItems(Action<SurvivorBot> *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Trying to heal a friend" or "Giving pills to a friend" string.
			 * 2. The string can only be found in this function.
			 **/
			"SurvivorBot::UseHealingItems"
			{
				"library"	"server"
				"linux"		"@_ZN11SurvivorBot15UseHealingItemsEP6ActionIS_E"
				"mac"		"@_ZN11SurvivorBot15UseHealingItemsEP6ActionIS_E"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x8D\x8F"
						/* ? ? ? ? ? ? 53 56 57 8B ? 8D 8F */
			}

			/**
			 * SurvivorLegsMeetRescueVehicleArrival::Update(SurvivorBot*, float)
			 *
			 * How to find on Windows:
			 * 1a. Search for the "The rescue vehicle is here!!!" or "%3.2f: %s ERROR: No RESCUE_VEHICLE area!\n" string.
			 * 2a. One of the functions that references that string should be this function.
			 *
			 * 1b. Find the function's offsets with asherkin's VTable dump.
			 * 2b. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3b. Search for "SurvivorLegsMeetRescueVehicleArrival::`vftable'" to jump to the "SurvivorLegsMeetRescueVehicleArrival" vtable.
			 * 4b. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5b. Look for the target function in the Windows binary.
			 **/
			"SurvivorLegsMeetRescueVehicleArrival::Update"
			{
				"library"	"server"
				"linux"		"@_ZN36SurvivorLegsMeetRescueVehicleArrival6UpdateEP11SurvivorBotf"
				"mac"		"@_ZN36SurvivorLegsMeetRescueVehicleArrival6UpdateEP11SurvivorBotf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x8B\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x74\x2A\x68"
						/* ? ? ? ? ? ? 53 8B ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 74 ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 74 ? 68 */
			}

			/**
			 * SurvivorResponseCachedInfo::GetClosestSurvivorTo(SurvivorCharacterType)
			 *
			 * How to find on Windows:
			 * 1. Locate the "CTerrorPlayer::ModifyOrAppendCriteria" function.
			 * 2. The first function call below the "DistToManager" string should be this function.
			 **/
			"SurvivorResponseCachedInfo::GetClosestSurvivorTo"
			{
				"library"	"server"
				"linux"		"@_ZN26SurvivorResponseCachedInfo20GetClosestSurvivorToE21SurvivorCharacterType"
				"mac"		"@_ZN26SurvivorResponseCachedInfo20GetClosestSurvivorToE21SurvivorCharacterType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\xC1\x2A\x2A\x03\x2A\x57\xB9"
						/* ? ? ? ? ? ? ? ? 8B ? C1 ? ? 03 ? 57 B9 */
			}

			/**
			 * SurvivorResponseCachedInfo::Update()
			 *
			 * How to find on Windows:
			 * 1. Search for the "branch_zoey" string.
			 * 2. One of the functions that references that string should be "CDirector::Update".
			 * 3. This function should be the first function call above the string.
			 **/
			"SurvivorResponseCachedInfo::Update"
			{
				"library"	"server"
				"linux"		"@_ZN26SurvivorResponseCachedInfo6UpdateEv"
				"mac"		"@_ZN26SurvivorResponseCachedInfo6UpdateEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x83\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x33"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 83 ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 33 */
			}

			/**
			 * Tank::EnterStasis()
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in one function):
			 * - "Tank offer: Starting the lottery\n"
			 * - "Tank offer: Going to the only PZ\n"
			 * - "Tank offer: making a bot, and giving him to nobody\n"
			 * 2. This function should be referenced by a function that is two function calls above the "Tank offer: Starting the lottery\n" string.
			 * 3. This function should be the last function call in that function.
			 **/
			"Tank::EnterStasis"
			{
				"library"	"server"
				"linux"		"@_ZN4Tank11EnterStasisEv"
				"mac"		"@_ZN4Tank11EnterStasisEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8D\xB7\x2A\x2A\x2A\x2A\x74\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8D\x8E\x2A\x2A\x2A\x2A\x56\xFF\x2A\xC6\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? ? ? ? ? ? 8D B7 ? ? ? ? 74 ? 8B 86 ? ? ? ? 8B 90 ? ? ? ? 8D 8E ? ? ? ? 56 FF ? C6 ? ? 8B ? 8B 90 ? ? ? ? 6A */
			}

			/**
			 * Tank::LeaveStasis()
			 *
			 * How to find on Windows:
			 * 1. Search for the "Tank committing suicide at %f %f %f\n" string.
			 * 2. There should be two function calls above the string.
			 * 2. The first function call should be this function.
			 **/
			"Tank::LeaveStasis"
			{
				"library"	"server"
				"linux"		"@_ZN4Tank11LeaveStasisEv"
				"mac"		"@_ZN4Tank11LeaveStasisEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8D\xB7\x2A\x2A\x2A\x2A\x74\x2A\x8B\x86\x2A\x2A\x2A\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8D\x8E\x2A\x2A\x2A\x2A\x56\xFF\x2A\xC6\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? ? ? ? 8D B7 ? ? ? ? 74 ? 8B 86 ? ? ? ? 8B 90 ? ? ? ? 8D 8E ? ? ? ? 56 FF ? C6 ? ? 8B ? 8B 90 ? ? ? ? 8B */
			}

			/**
			 * TankAttack::Update(Tank *, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "TankAttack::`vftable'" to jump to the "TankAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"TankAttack::Update"
			{
				"library"	"server"
				"linux"		"@_ZN10TankAttack6UpdateEP4Tankf"
				"mac"		"@_ZN10TankAttack6UpdateEP4Tankf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8D\xB7"
						/* ? ? ? ? ? ? ? ? ? 53 56 57 8B ? ? 8B 87 ? ? ? ? 8B 90 ? ? ? ? 8D B7 */
			}

			/**
			 * TankBehavior::InitialContainedAction(Tank *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "TankBehavior::`vftable'" to jump to the "TankBehavior" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"TankBehavior::InitialContainedAction"
			{
				"library"	"server"
				"linux"		"@_ZN12TankBehavior22InitialContainedActionEP4Tank"
				"mac"		"@_ZN12TankBehavior22InitialContainedActionEP4Tank"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x2A\x2A\x8B\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\xFF"
						/* ? ? ? ? ? ? ? ? ? E8 ? ? ? ? 84 ? ? ? 8B ? ? 8B ? 8B 90 ? ? ? ? FF */
			}

			/**
			 * TerrorNavArea::FindRandomSpot()
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented" string.
			 * 2. Both functions that reference the string call this function.
			 * 3. This function should be the first function call above the string.
			 **/
			"TerrorNavArea::FindRandomSpot"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavArea14FindRandomSpotEv"
				"mac"		"@_ZNK13TerrorNavArea14FindRandomSpotEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x8B\x2A\xF3\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x0F"
						/* ? ? ? ? ? ? ? ? ? ? ? 83 ? ? 56 8B ? F3 ? ? ? ? F3 ? ? ? ? 0F */
			}

			/**
			 * TerrorNavArea::ScriptGetDoor()
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetDoor" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"TerrorNavArea::ScriptGetDoor"
			{
				"library"	"server"
				"linux"		"@_ZN13TerrorNavArea13ScriptGetDoorEv"
				"mac"		"@_ZN13TerrorNavArea13ScriptGetDoorEv"
				"windows"	"\x8B\x81\x6C\x01\x00\x00\x83\xF8\xFF\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\xC8\x81\xE1\xFF\x0F\x00\x00\x03\xC9\x8D\x4C\xCA\x04\x85\xC9\x74\x2A\xC1\xE8\x0C\x39\x41\x04\x75\x2A\x8B\x09"
						/* 8B 81 6C 01 00 00 83 F8 FF 74 ? 8B 15 ? ? ? ? 8B C8 81 E1 FF 0F 00 00 03 C9 8D 4C CA 04 85 C9 74 ? C1 E8 0C 39 41 04 75 ? 8B 09 */
			}

			/**
			 * TerrorNavArea::ScriptGetSpawnAttributes()
			 *
			 * How to find on Windows:
			 * 1. Search for the "GetSpawnAttributes" string.
			 * 2. The second function call below the string should be this function.
			 **/
			"TerrorNavArea::ScriptGetSpawnAttributes"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavArea24ScriptGetSpawnAttributesEv"
				"mac"		"@_ZNK13TerrorNavArea24ScriptGetSpawnAttributesEv"
				"windows"	"\x8B\x81\x28\x01\x00\x00\xC3"
						/* 8B 81 28 01 00 00 C3 */
			}

			/**
			 * TerrorNavArea::ScriptHasSpawnAttributes()
			 *
			 * How to find on Windows:
			 * 1. Search for the "HasSpawnAttributes" string.
			 * 2. The third function call below the string should be this function.
			 **/
			"TerrorNavArea::ScriptHasSpawnAttributes"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavArea24ScriptHasSpawnAttributesEi"
				"mac"		"@_ZNK13TerrorNavArea24ScriptHasSpawnAttributesEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x85\x81\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x5D"
						/* ? ? ? ? ? ? 85 81 ? ? ? ? 0F ? ? 5D */
			}

			/**
			 * TerrorNavMesh::GetInitialCheckpoint()
			 *
			 * How to find on Windows:
			 * 1. Search for the "************\nMost gross danger! Cannot find Landmark named %s!\n************" string.
			 * 2. The string can only be found in this function.
			 **/
			"TerrorNavMesh::GetInitialCheckpoint"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavMesh20GetInitialCheckpointEv"
				"mac"		"@_ZNK13TerrorNavMesh20GetInitialCheckpointEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x89\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x33"
						/* ? ? ? ? ? ? 89 ? ? 8B 0D ? ? ? ? E8 ? ? ? ? 84 ? 75 ? 33 */
			}

			/**
			 * TerrorNavMesh::GetLastCheckpoint()
			 *
			 * How to find on Windows:
			 * 1. Search for the "No exit checkpoint could be found.\n" string.
			 * 2. The string can only be found in "WarpToCheckpoint".
			 * 3. This function should be the first function call in "WarpToCheckpoint".
			 **/
			"TerrorNavMesh::GetLastCheckpoint"
			{
				"library"	"server"
				"linux"		"@_ZNK13TerrorNavMesh17GetLastCheckpointEv"
				"mac"		"@_ZNK13TerrorNavMesh17GetLastCheckpointEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x56\x33\x2A\x57\x85\x2A\x7E\x2A\x8B\xB1\x2A\x2A\x2A\x2A\x8B\x2A\x8B"
						/* ? ? ? ? ? ? 56 33 ? 57 85 ? 7E ? 8B B1 ? ? ? ? 8B ? 8B */
			}

			/**
			 * ThrowImpactedSurvivor(CTerrorPlayer *, CTerrorPlayer *, float, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "charger_impact" string.
			 * 2. The string can only be found in this function.
			 **/
			"ThrowImpactedSurvivor"
			{
				"library"	"server"
				"linux"		"@_Z21ThrowImpactedSurvivorP13CTerrorPlayerS0_fb"
				"mac"		"@_Z21ThrowImpactedSurvivorP13CTerrorPlayerS0_fb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\xC1\x2A\x2A\xA8\x2A\x74\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x8F"
						/* ? ? ? ? ? ? 53 56 57 8B ? ? 8B 87 ? ? ? ? C1 ? ? A8 ? 74 ? 8B ? E8 ? ? ? ? 8B 8F */
			}

			/**
			 * Witch::DoAttack(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Zombie.AttackMiss" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"Witch::DoAttack"
			{
				"library"	"server"
				"linux"		"@_ZN5Witch8DoAttackEP11CBaseEntity"
				"mac"		"@_ZN5Witch8DoAttackEP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x56\x8B\x2A\x89\x2A\x2A\x57\xC7"
						/* ? ? ? ? ? ? 8B ? ? 56 8B ? 89 ? ? 57 C7 */
			}

			/**
			 * WitchAttack::GetVictim()
			 *
			 * How to find on Windows:
			 * 1. Locate the "WitchAttack::OnContact" function.
			 * 2. The fourth function call in "WitchAttack::OnContact" should be this function.
			 **/
			"WitchAttack::GetVictim"
			{
				"library"	"server"
				"linux"		"@_ZNK11WitchAttack9GetVictimEv"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x75\x2A\x8B\x2A\x2A\x83\x2A\x2A\x74\x2A\x8B\x15\x2A\x2A\x2A\x2A\x8B\x2A\x81\xE1\x2A\x2A\x2A\x2A\x03\x2A\x8D\x2A\x2A\x2A\x85\x2A\x74\x2A\xC1\x2A\x2A\x39\x2A\x2A\x75\x2A\x8B\x2A\xC3"
						/* ? ? ? ? ? ? 75 ? 8B ? ? 83 ? ? 74 ? 8B 15 ? ? ? ? 8B ? 81 E1 ? ? ? ? 03 ? 8D ? ? ? 85 ? 74 ? C1 ? ? 39 ? ? 75 ? 8B ? C3 */
			}

			/**
			 * WitchAttack::OnAnimationEvent(Infected *, animevent_t *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchAttack::`vftable'" to jump to the "WitchAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchAttack::OnAnimationEvent"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttack16OnAnimationEventEP8InfectedP11animevent_t"
				"mac"		"@_ZN11WitchAttack16OnAnimationEventEP8InfectedP11animevent_t"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x2A\x83"
						/* ? ? ? ? ? ? 83 ? ? 75 ? 8B ? ? 83 ? ? 75 ? 8B ? ? 83 */
			}

			/**
			 * WitchAttack::OnContact(Infected *, CBaseEntity *, CGameTrace *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchAttack::`vftable'" to jump to the "WitchAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchAttack::OnContact"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttack9OnContactEP8InfectedP11CBaseEntityP10CGameTrace"
				"mac"		"@_ZN11WitchAttack9OnContactEP8InfectedP11CBaseEntityP10CGameTrace"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x8B\x2A\x2A\x8B\x2A\x89\x2A\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\x6A"
						/* ? ? ? ? ? ? 57 8B ? ? 8B ? 89 ? ? 85 ? 0F 84 ? ? ? ? 6A */
			}

			/**
			 * WitchAttack::OnMoveToFailure(Infected *, Path const*, MoveToFailureType)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchAttack::`vftable'" to jump to the "WitchAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchAttack::OnMoveToFailure"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttack15OnMoveToFailureEP8InfectedPK4Path17MoveToFailureType"
				"mac"		"@_ZN11WitchAttack15OnMoveToFailureEP8InfectedPK4Path17MoveToFailureType"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x74\x2A\x83\x2A\x2A\x75\x2A\x8B\x2A\x2A\x8B\x2A\x2A\x83"
						/* ? ? ? ? ? ? 83 ? ? 74 ? 83 ? ? 75 ? 8B ? ? 8B ? ? 83 */
			}

			/**
			 * WitchAttack::OnStart(Infected *, Action<Infected> *)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchAttack::`vftable'" to jump to the "WitchAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchAttack::OnStart"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttack7OnStartEP8InfectedP6ActionIS0_E"
				"mac"		"@_ZN11WitchAttack7OnStartEP8InfectedP6ActionIS0_E"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x15\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x8B\x87"
						/* ? ? ? ? ? ? 8B 15 ? ? ? ? 53 56 57 8B ? ? 8B 87 */
			}

			/**
			 * WitchAttack::Update(Infected *, float)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchAttack::`vftable'" to jump to the "WitchAttack" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchAttack::Update"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttack6UpdateEP8Infectedf"
				"mac"		"@_ZN11WitchAttack6UpdateEP8Infectedf"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x8B\x87\x2A\x2A\x2A\x2A\x8B\x90\x2A\x2A\x2A\x2A\x81"
						/* ? ? ? ? ? ? 53 56 57 8B ? ? 8B 87 ? ? ? ? 8B 90 ? ? ? ? 81 */
			}

			/**
			 * WitchAttack::WitchAttack(CBaseEntity *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Someone shoved me!" string.
			 * 2. The last function call in that function should be this function.
			 **/
			"WitchAttack::WitchAttack"
			{
				"library"	"server"
				"linux"		"@_ZN11WitchAttackC2EP11CBaseEntity"
				"mac"		"@_ZN11WitchAttackC2EP11CBaseEntity"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xC7\x46\x2A\x2A\x2A\x2A\x2A\xC7\x46\x2A\x2A\x2A\x2A\x2A\x33\x2A\x33\x2A\x89\x2A\x2A\x33\x2A\x89\x2A\x2A\x57\x33\x2A\x89\x2A\x2A\x33\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x89\x2A\x2A\x66\x2A\x2A\x2A\x89\x2A\x2A\xC7\x06\x2A\x2A\x2A\x2A\xC7\x46\x2A\x2A\x2A\x2A\x2A\x53\x8D\x2A\x2A\xC7\x46\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x0F\x2A\x2A\x8D\x86\x2A\x2A\x2A\x2A\x88"
						/* ? ? ? ? ? ? ? C7 46 ? ? ? ? ? C7 46 ? ? ? ? ? 33 ? 33 ? 89 ? ? 33 ? 89 ? ? 57 33 ? 89 ? ? 33 ? 89 ? ? 89 ? ? 89 ? ? 89 ? ? 89 ? ? 89 ? ? 66 ? ? ? 89 ? ? C7 06 ? ? ? ? C7 46 ? ? ? ? ? 53 8D ? ? C7 46 ? ? ? ? ? E8 ? ? ? ? 0F ? ? 8D 86 ? ? ? ? 88 */
			}

			/**
			 * WitchLocomotion::IsAreaTraversable(CNavArea const*)
			 *
			 * How to find on Windows:
			 * 1. Find the function's offsets with asherkin's VTable dump.
			 * 2. In IDA Pro, go to the ".rdata" section of the Windows binary.
			 * 3. Search for "WitchLocomotion::`vftable'" to jump to the "WitchLocomotion" vtable.
			 * 4. Compare your dump's offsets with asherkin's dump's offsets to find the target function.
			 * 5. Look for the target function in the Windows binary.
			 **/
			"WitchLocomotion::IsAreaTraversable"
			{
				"library"	"server"
				"linux"		"@_ZNK15WitchLocomotion17IsAreaTraversableEPK8CNavArea"
				"mac"		"@_ZNK15WitchLocomotion17IsAreaTraversableEPK8CNavArea"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x6A\x2A\x8B\x2A\x6A\x2A\x8B"
						/* ? ? ? ? ? ? ? ? 6A ? 8B ? 6A ? 8B */
			}

			/**
			 * ZombieManager::CanZombieSpawnHere(Vector const&, TerrorNavArea *, ZombieClassType, bool, CBaseCombatCharacter *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "CanZombieSpawnHere: Spot blocked (%.0f, %.0f, %.0f) for a %s%s\n" or "Witch converted to a normal Infected!\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::CanZombieSpawnHere"
			{
				"library"	"server"
				"linux"		"@_ZNK13ZombieManager18CanZombieSpawnHereERK6VectorP13TerrorNavArea15ZombieClassTypebP20CBaseCombatCharacter"
				"mac"		"@_ZNK13ZombieManager18CanZombieSpawnHereERK6VectorP13TerrorNavArea15ZombieClassTypebP20CBaseCombatCharacter"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x8B\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\x56\x8B\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 8B ? ? 8B 0D ? ? ? ? 53 8B ? ? 56 8B ? ? 57 */
			}

			/**
			 * ZombieManager::GetRandomPZSpawnPosition(ZombieClassType, int, CTerrorPlayer *, Vector *)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ZombieManager::GetRandomPZSpawnPosition failed! type: %s spawn set count: %d tries: %d location requirement: %d\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::GetRandomPZSpawnPosition"
			{
				"library"	"server"
				"linux"		"@_ZNK13ZombieManager24GetRandomPZSpawnPositionE15ZombieClassTypeiP13CTerrorPlayerP6Vector"
				"mac"		"@_ZNK13ZombieManager24GetRandomPZSpawnPositionE15ZombieClassTypeiP13CTerrorPlayerP6Vector"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x57\x8B\x2A\x2A\x8B\x2A\x89\x2A\x2A\x85\x2A\x75\x2A\x5F"
						/* ? ? ? ? ? ? 53 57 8B ? ? 8B ? 89 ? ? 85 ? 75 ? 5F */
			}

			/**
			 * ZombieManager::ReplaceTank(CTerrorPlayer*, CTerrorPlayer*)
			 *
			 * How to find on Windows:
			 * 1. Search for the "TANK OFFER: Looking for players\n" string.
			 * 2. The last function call in that function should be this function.
			 **/
			"ZombieManager::ReplaceTank"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager11ReplaceTankEP13CTerrorPlayerS1_"
				"mac"		"@_ZN13ZombieManager11ReplaceTankEP13CTerrorPlayerS1_"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x53\x56\x8B\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x57\x8B\x2A\x8B\x2A\xFF\x2A\x84\x2A\x0F\x84\x2A\x2A\x2A\x2A\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x0F\x85\x2A\x2A\x2A\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x83"
						/* ? ? ? ? ? ? 53 56 8B ? ? 8B ? 8B 90 ? ? ? ? 57 8B ? 8B ? FF ? 84 ? 0F 84 ? ? ? ? 8B ? E8 ? ? ? ? 83 ? ? 0F 85 ? ? ? ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 83 */
			}

			/**
			 * ZombieManager::SpawnCommonZombie(TerrorNavArea *, Vector const&, ZombieManager::CommonInfectedSpawnDirective)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: SpawnCommonZombie: Spot blocked (%.0f, %.0f, %.0f)\n" or "Zombie tried to spawn under displacement in nav area %d, setpos %.1f %.1f %.1f\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::SpawnCommonZombie"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager17SpawnCommonZombieEP13TerrorNavAreaRK6VectorNS_28CommonInfectedSpawnDirectiveE"
				"mac"		"@_ZN13ZombieManager17SpawnCommonZombieEP13TerrorNavAreaRK6VectorNS_28CommonInfectedSpawnDirectiveE"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x83\x2A\x2A\x55\x8B\x2A\x2A\x89\x2A\x2A\x2A\x8B\x2A\x81\xEC\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x80"
						/* ? ? ? ? ? ? 83 ? ? 83 ? ? 55 8B ? ? 89 ? ? ? 8B ? 81 EC ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 80 */
			}

			/**
			 * ZombieManager::SpawnITMob(int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: (MOB) SpawnITMob requested of size %d.\n" or "%3.2f: (MOB) SpawnITMob will make %d.\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::SpawnITMob"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager10SpawnITMobEi"
				"mac"		"@_ZN13ZombieManager10SpawnITMobEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x56\x57\x8B\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? D9 ? ? 56 57 8B ? ? 57 */
			}

			/**
			 * ZombieManager::SpawnMob(int)
			 *
			 * How to find on Windows:
			 * 1. Search for the "%3.2f: (MOB) SpawnMob requested of size %d.\n" or "%3.2f: (MOB) SpawnMob pending count is now %d.\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::SpawnMob"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager8SpawnMobEi"
				"mac"		"@_ZN13ZombieManager8SpawnMobEi"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xD9\x2A\x2A\x83\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? D9 ? ? 83 ? ? 53 56 57 8B ? ? 57 */
			}

			/**
			 * ZombieManager::SpawnSpecial(ZombieClassType, Vector const&, QAngle const&)
			 *
			 * Note: (Windows) This function is in-lined with the "ZombieManager::SpawnSpecial<TerrorNavArea>" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented" string.
			 * 2. Both functions that reference the string call this function.
			 **/
			"ZombieManager::SpawnSpecial<Vector>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager12SpawnSpecialE15ZombieClassTypeRK6VectorRK6QAngle"
				"mac"		"@_ZN13ZombieManager12SpawnSpecialE15ZombieClassTypeRK6VectorRK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x56\x8B\x2A\x83"
						/* ? ? ? ? ? ? ? 8D ? ? 56 8B ? 83 */
			}

			/**
			 * ZombieManager::SpawnSpecial(ZombieClassType, TerrorNavArea const*, QAngle const&)
			 *
			 * Note: (Windows) This function is in-lined with the "ZombieManager::SpawnSpecial<Vector>" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented" string.
			 * 2. Both functions that reference the string call this function.
			 **/
			"ZombieManager::SpawnSpecial<TerrorNavArea>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager12SpawnSpecialE15ZombieClassTypePK13TerrorNavAreaRK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8D\x2A\x2A\x56\x8B\x2A\x83"
						/* ? ? ? ? ? ? ? 8D ? ? 56 8B ? 83 */
			}

			/**
			 * ZombieManager::SpawnTank(Vector const&, QAngle const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Failed to find a tank spawn position in area %d\n" string.
			 * 2. The second function call in that function should be this function.
			 **/
			"ZombieManager::SpawnTank<Vector>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager9SpawnTankERK6VectorRK6QAngle"
				"mac"		"@_ZN13ZombieManager9SpawnTankERK6VectorRK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x78\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x39\x81\x2A\x2A\x2A\x2A\x7C\x2A\x33\x2A\x5F"
						/* ? ? ? ? ? ? 8B 0D ? ? ? ? E8 ? ? ? ? 85 ? 78 ? 8B 0D ? ? ? ? 39 81 ? ? ? ? 7C ? 33 ? 5F */
			}

			/**
			 * ZombieManager::SpawnTank(TerrorNavArea const*, QAngle const&, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Failed to find a tank spawn position in area %d\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::SpawnTank<TerrorNavArea>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager9SpawnTankEPK13TerrorNavAreaRK6QAngleb"
				"mac"		"@_ZN13ZombieManager9SpawnTankEPK13TerrorNavAreaRK6QAngleb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x50\x8D\x2A\x2A\x51\x6A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x8B\x97\x2A\x2A\x2A\x2A\x52\x68\xB8"
						/* ? ? ? ? ? ? 83 ? ? 56 57 8B ? ? 8B ? 50 8D ? ? 51 6A ? 57 8B ? E8 ? ? ? ? 84 ? 75 ? 8B 97 ? ? ? ? 52 68 B8 */
			}

			/**
			 * ZombieManager::SpawnWitch(Vector const&, QAngle const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "WitchLimit" string.
			 * 2. The string can only be found in "CDirector::GetWitchLimit".
			 * 3. One of the functions that calls "CDirector::GetWitchLimit" should be this function.
			 **/
			"ZombieManager::SpawnWitch<Vector>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager10SpawnWitchERK6VectorRK6QAngle"
				"mac"		"@_ZN13ZombieManager10SpawnWitchERK6VectorRK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x78\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x39\x81\x2A\x2A\x2A\x2A\x7C\x2A\x33\x2A\x5D"
						/* ? ? ? ? ? ? ? ? ? E8 ? ? ? ? 85 ? 78 ? 8B 0D ? ? ? ? 39 81 ? ? ? ? 7C ? 33 ? 5D */
			}

			/**
			 * ZombieManager::SpawnWitch(TerrorNavArea const*, QAngle const&, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Failed to find a witch spawn position in area %d\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"ZombieManager::SpawnWitch<TerrorNavArea>"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager10SpawnWitchEPK13TerrorNavAreaRK6QAngleb"
				"mac"		"@_ZN13ZombieManager10SpawnWitchEPK13TerrorNavAreaRK6QAngleb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x83\x2A\x2A\x56\x57\x8B\x2A\x2A\x8B\x2A\x50\x8D\x2A\x2A\x51\x6A\x2A\x57\x8B\x2A\xE8\x2A\x2A\x2A\x2A\x84\x2A\x75\x2A\x8B\x97\x2A\x2A\x2A\x2A\x52\x68\xF0"
						/* ? ? ? ? ? ? 83 ? ? 56 57 8B ? ? 8B ? 50 8D ? ? 51 6A ? 57 8B ? E8 ? ? ? ? 84 ? 75 ? 8B 97 ? ? ? ? 52 68 F0 */
			}

			/**
			 * ZombieManager::SpawnWitchBride(Vector const&, QAngle const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "WitchLimit" string.
			 * 2. The string can only be found in "CDirector::GetWitchLimit".
			 * 3. One of the functions that calls "CDirector::GetWitchLimit" should be this function.
			 **/
			"ZombieManager::SpawnWitchBride"
			{
				"library"	"server"
				"linux"		"@_ZN13ZombieManager15SpawnWitchBrideERK6VectorRK6QAngle"
				"mac"		"@_ZN13ZombieManager15SpawnWitchBrideERK6VectorRK6QAngle"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x85\x2A\x75\x2A\x5D\xC2\x2A\x2A\x56"
						/* ? ? ? ? ? ? ? ? ? E8 ? ? ? ? 85 ? 75 ? 5D C2 ? ? 56 */
			}

			/**
			 * ZSpawnCore(int, Vector, QAngle, int, bool, bool, bool)
			 *
			 * How to find on Windows:
			 * 1. Search for the "ragdoll flag is not implemented\n" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"ZSpawnCore"
			{
				"library"	"server"
				"linux"		"@_ZL10ZSpawnCorei6Vector6QAngleibbb.isra.150"
				"mac"		"@_ZL10ZSpawnCorei6Vector6QAngleibbb"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\xA1\x2A\x2A\x2A\x2A\xF3\x2A\x2A\x2A\x2A\x57"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? A1 ? ? ? ? F3 ? ? ? ? 57 */
			}

			/**
			 * go_away_from_keyboard(CCommand const&)
			 *
			 * Note: (Windows) This function is in-lined with the "CTerrorPlayer::Input_GoAwayFromKeyboard" function.
			 *
			 * How to find on Windows:
			 * 1. Search for the "Go away from the keyboard so a bot will take over." string.
			 * 2. The string will have two references, with the second reference being passed to this function.
			 **/
			"go_away_from_keyboard"
			{
				"library"	"server"
				"linux"		"@_ZL21go_away_from_keyboardRK8CCommand"
				"mac"		"@_ZL21go_away_from_keyboardRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x84\x2A\x74\x2A\x8B\x2A\x8B\x90\x2A\x2A\x2A\x2A\x8B\x2A\xFF\x2A\x0F\x2A\x2A\xF7\x2A\x1B\x2A\x23\x2A\x5E"
						/* ? ? ? ? ? ? 8B ? 85 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 84 ? 74 ? 8B ? 8B 90 ? ? ? ? 8B ? FF ? 0F ? ? F7 ? 1B ? 23 ? 5E */
			}

			/**
			 * nav_update_lighting(CCommand const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Computed lighting for %d/%d areas\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"nav_update_lighting"
			{
				"library"	"server"
				"linux"		"@_ZL19nav_update_lightingRK8CCommand"
				"mac"		"@_ZL19nav_update_lightingRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x57\x33\x2A\x83\x2A\x2A\x75"
						/* ? ? ? ? ? ? 57 33 ? 83 ? ? 75 */
			}

			/**
			 * outtro_stats_done(CCommand const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "FinaleWon" string.
			 * 2. One of the functions that references that string is "CDirector::OnFinaleEscapeFinished".
			 * 3. The last function call inside "CDirector::OnFinaleEscapeFinished" should be "CDirector::StartScenarioExit".
			 * 4. One of the functions that calls "CDirector::StartScenarioExit" should be this function.
			 **/
			"outtro_stats_done"
			{
				"library"	"server"
				"linux"		"@_ZL17outtro_stats_doneRK8CCommand"
				"mac"		"@_ZL17outtro_stats_doneRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x2A\x2A\x85\x2A\x75\x2A\xB8\x2A\x2A\x2A\x2A\x3D\x2A\x2A\x2A\x2A\x74\x2A\x68\x2A\x2A\x2A\x2A\x50\xE8\x2A\x2A\x2A\x2A\x83\x2A\x2A\x85\x2A\x74\x2A\xE8"
						/* ? ? ? ? ? ? ? ? ? 8B ? ? 85 ? 75 ? B8 ? ? ? ? 3D ? ? ? ? 74 ? 68 ? ? ? ? 50 E8 ? ? ? ? 83 ? ? 85 ? 74 ? E8 */
			}

			/**
			 * z_spawn(CCommand const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Common" or "witch_bride" string.
			 * 2. One of the functions that references that string should be this function.
			 **/
			"z_spawn"
			{
				"library"	"server"
				"linux"		"@_ZL7z_spawnRK8CCommand"
				"mac"		"@_ZL7z_spawnRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x53\x56\x57\x8B\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 53 56 57 8B ? ? E8 ? ? ? ? 8B ? 85 */
			}

			/**
			 * z_spawn_old(CCommand const&)
			 *
			 * How to find on Windows:
			 * 1. Search for the "Couldn't find a %s Spawn position in %d tries\n" string.
			 * 2. The string can only be found in this function.
			 **/
			"z_spawn_old"
			{
				"library"	"server"
				"linux"		"@_ZL11z_spawn_oldRK8CCommand"
				"mac"		"@_ZL11z_spawn_oldRK8CCommand"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\x2A\xA1\x2A\x2A\x2A\x2A\x33\x2A\x89\x2A\x2A\x56\x57\x8B\x2A\x2A\xE8\x2A\x2A\x2A\x2A\x8B\x2A\x85\x2A\x0F\x84\x2A\x2A\x2A\x2A\xA1"
						/* ? ? ? ? ? ? ? ? ? A1 ? ? ? ? 33 ? 89 ? ? 56 57 8B ? ? E8 ? ? ? ? 8B ? 85 ? 0F 84 ? ? ? ? A1 */
			}

			/**
			 * Script_ZSpawn(HSCRIPT__ *)
			 *
			 * How to find on Windows:
			 * 1. Search for any of the following strings (they can each only be found in this function):
			 * - "ScriptWarning: Can't ZSpawn without a position\n"
			 * - "ScriptWarning: Can't ZSpawn without a type\n"
			 * - "Can't auto_pos for type %d\n"
			 * - "Couldn't find a spawn pos for type %d in %d tries\n"
			 **/
			"Script_ZSpawn"
			{
				"library"	"server"
				"linux"		"@_Z13Script_ZSpawnP9HSCRIPT__"
				"mac"		"@_Z13Script_ZSpawnP9HSCRIPT__"
				"windows"	"\x2A\x2A\x2A\x2A\x2A\x2A\x8B\x0D\x2A\x2A\x2A\x2A\x53\x8B\x2A\x2A\x56\x33"
						/* ? ? ? ? ? ? 8B 0D ? ? ? ? 53 8B ? ? 56 33 */
			}
		}
	}
}